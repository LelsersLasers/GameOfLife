{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7","program":"C:\\Users\\milla\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","euclid","--edition=2018","C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=705277d0732f9f2b","-C","extra-filename=-705277d0732f9f2b","--out-dir","c:\\Users\\milla\\Desktop\\coding\\GameOfLife\\ggez\\game_of_life\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\milla\\Desktop\\coding\\GameOfLife\\ggez\\game_of_life\\target\\rls\\debug\\deps","--extern","num_traits=c:\\Users\\milla\\Desktop\\coding\\GameOfLife\\ggez\\game_of_life\\target\\rls\\debug\\deps\\libnum_traits-38693de2eacc0864.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\milla\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\milla\\Desktop\\coding\\GameOfLife\\ggez\\game_of_life\\target\\rls\\debug\\deps\\libeuclid-705277d0732f9f2b.rmeta"},"prelude":{"crate_id":{"name":"euclid","disambiguator":[17138022641224973531,0]},"crate_root":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src","external_crates":[{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":4,"id":{"name":"num_traits","disambiguator":[15441111099474508518,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":5,"id":{"name":"std","disambiguator":[7379719041391505039,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":6,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":7,"id":{"name":"libc","disambiguator":[6798478037195512723,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":8,"id":{"name":"unwind","disambiguator":[12572258325454906649,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":9,"id":{"name":"cfg_if","disambiguator":[598470195457823820,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":10,"id":{"name":"hashbrown","disambiguator":[7285820039251336650,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15004074270013699283,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":12,"id":{"name":"std_detect","disambiguator":[6568562326383462027,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":13,"id":{"name":"rustc_demangle","disambiguator":[7532148157145861684,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[15660406440960571571,0]}}],"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4574},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1894,"byte_end":1899,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"alias_span":null,"name":"Angle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1923,"byte_end":1928,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"alias_span":null,"name":"Box2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":834},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1954,"byte_end":1971,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"HomogeneousVector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2027,"byte_end":2033,"line_start":47,"line_end":47,"column_start":24,"column_end":30},"alias_span":null,"name":"point2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2035,"byte_end":2041,"line_start":47,"line_end":47,"column_start":32,"column_end":38},"alias_span":null,"name":"point3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2043,"byte_end":2050,"line_start":47,"line_end":47,"column_start":40,"column_end":47},"alias_span":null,"name":"Point2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2052,"byte_end":2059,"line_start":47,"line_end":47,"column_start":49,"column_end":56},"alias_span":null,"name":"Point3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2299},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2300},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3164},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2119,"byte_end":2130,"line_start":49,"line_end":49,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3405},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2160,"byte_end":2171,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4528},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2197,"byte_end":2202,"line_start":51,"line_end":51,"column_start":25,"column_end":30},"alias_span":null,"name":"bvec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4529},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2204,"byte_end":2209,"line_start":51,"line_end":51,"column_start":32,"column_end":37},"alias_span":null,"name":"bvec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4728},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2211,"byte_end":2223,"line_start":51,"line_end":51,"column_start":39,"column_end":51},"alias_span":null,"name":"BoolVector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4746},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2225,"byte_end":2237,"line_start":51,"line_end":51,"column_start":53,"column_end":65},"alias_span":null,"name":"BoolVector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4522},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2264,"byte_end":2268,"line_start":52,"line_end":52,"column_start":25,"column_end":29},"alias_span":null,"name":"vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4525},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2270,"byte_end":2274,"line_start":52,"line_end":52,"column_start":31,"column_end":35},"alias_span":null,"name":"vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4007},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2276,"byte_end":2284,"line_start":52,"line_end":52,"column_start":37,"column_end":45},"alias_span":null,"name":"Vector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4248},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2286,"byte_end":2294,"line_start":52,"line_end":52,"column_start":47,"column_end":55},"alias_span":null,"name":"Vector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2321,"byte_end":2326,"line_start":54,"line_end":54,"column_start":24,"column_end":29},"alias_span":null,"name":"box3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2328,"byte_end":2333,"line_start":54,"line_end":54,"column_start":31,"column_end":36},"alias_span":null,"name":"Box3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2358,"byte_end":2362,"line_start":55,"line_end":55,"column_start":23,"column_end":27},"alias_span":null,"name":"rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1744},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2364,"byte_end":2368,"line_start":55,"line_end":55,"column_start":29,"column_end":33},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4672},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2393,"byte_end":2409,"line_start":56,"line_end":56,"column_start":23,"column_end":39},"alias_span":null,"name":"RigidTransform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2437,"byte_end":2447,"line_start":57,"line_end":57,"column_start":27,"column_end":37},"alias_span":null,"name":"Rotation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2449,"byte_end":2459,"line_start":57,"line_end":57,"column_start":39,"column_end":49},"alias_span":null,"name":"Rotation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2455},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2491,"byte_end":2504,"line_start":58,"line_end":58,"column_start":30,"column_end":43},"alias_span":null,"name":"SideOffsets2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2846},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2528,"byte_end":2533,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"alias_span":null,"name":"size2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3084},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2535,"byte_end":2540,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"alias_span":null,"name":"size3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2659},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2542,"byte_end":2548,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"alias_span":null,"name":"Size2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2873},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2550,"byte_end":2556,"line_start":59,"line_end":59,"column_start":45,"column_end":51},"alias_span":null,"name":"Size3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3668},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2588,"byte_end":2601,"line_start":60,"line_end":60,"column_start":30,"column_end":43},"alias_span":null,"name":"Translation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3772},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2603,"byte_end":2616,"line_start":60,"line_end":60,"column_start":45,"column_end":58},"alias_span":null,"name":"Translation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3880},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2640,"byte_end":2644,"line_start":61,"line_end":61,"column_start":22,"column_end":26},"alias_span":null,"name":"Trig","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":280},{"krate":0,"index":287},{"krate":0,"index":292},{"krate":0,"index":546},{"krate":0,"index":793},{"krate":0,"index":890},{"krate":0,"index":1118},{"krate":0,"index":1140},{"krate":0,"index":1676},{"krate":0,"index":1935},{"krate":0,"index":2004},{"krate":0,"index":2241},{"krate":0,"index":2398},{"krate":0,"index":2564},{"krate":0,"index":3087},{"krate":0,"index":3304},{"krate":0,"index":3587},{"krate":0,"index":3879},{"krate":0,"index":3888},{"krate":0,"index":4765},{"krate":0,"index":4767},{"krate":0,"index":4769},{"krate":0,"index":4770},{"krate":0,"index":4772},{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4777},{"krate":0,"index":4778},{"krate":0,"index":4780},{"krate":0,"index":4782},{"krate":0,"index":4784},{"krate":0,"index":4530}],"decl_id":null,"docs":" A collection of strongly typed math tools for computer graphics with an inclination\n towards 2d graphics and layout.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":450,"byte_end":456,"line_start":10,"line_end":10,"column_start":24,"column_end":30}},{"value":"/ A collection of strongly typed math tools for computer graphics with an inclination","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":460,"byte_end":547,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ towards 2d graphics and layout.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":548,"byte_end":583,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":584,"byte_end":587,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ All types are generic over the scalar type of their component (`f32`, `i32`, etc.),","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":588,"byte_end":675,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ and tagged with a generic Unit parameter which is useful to prevent mixing","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":676,"byte_end":754,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ values from different spaces. For example it should not be legal to translate","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":755,"byte_end":836,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ a screen-space position by a world-space vector and this can be expressed using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":837,"byte_end":920,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ the generic Unit parameter.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":921,"byte_end":952,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":953,"byte_end":956,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This unit system is not mandatory and all structures have an alias","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":957,"byte_end":1027,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ with the default unit: `UnknownUnit`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1028,"byte_end":1069,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ for example ```default::Point2D<T>``` is equivalent to ```Point2D<T, UnknownUnit>```.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1070,"byte_end":1159,"line_start":23,"line_end":23,"column_start":1,"column_end":90}},{"value":"/ Client code typically creates a set of aliases for each type and doesn't need","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1160,"byte_end":1241,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/ to deal with the specifics of typed units further. For example:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1242,"byte_end":1309,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1310,"byte_end":1313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1314,"byte_end":1325,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use euclid::*;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1326,"byte_end":1344,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ pub struct ScreenSpace;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1345,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"/ pub type ScreenPoint = Point2D<f32, ScreenSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1373,"byte_end":1426,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/ pub type ScreenSize = Size2D<f32, ScreenSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1427,"byte_end":1478,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ pub struct WorldSpace;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1479,"byte_end":1505,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ pub type WorldPoint = Point3D<f32, WorldSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1506,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/ pub type ProjectionMatrix = Transform3D<f32, WorldSpace, ScreenSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1558,"byte_end":1632,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ // etc...","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1633,"byte_end":1646,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1647,"byte_end":1654,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1655,"byte_end":1658,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ All euclid types are marked `#[repr(C)]` in order to facilitate exposing them to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1659,"byte_end":1743,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ foreign function interfaces (provided the underlying scalar type is also `repr(C)`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1744,"byte_end":1832,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1833,"byte_end":1836,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"deny(unconditional_recursion)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":1837,"byte_end":1870,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4574},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6718,"byte_end":6723,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"Angle","qualname":"::angle::Angle","value":"Angle { radians }","parent":null,"children":[{"krate":0,"index":4576}],"decl_id":null,"docs":" An angle in radians\n","sig":null,"attributes":[{"value":"/ An angle in radians","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6483,"byte_end":6506,"line_start":23,"line_end":23,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":4576},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6737,"byte_end":6744,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"name":"radians","qualname":"::angle::Angle::radians","value":"T","parent":{"krate":0,"index":4574},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6946,"byte_end":6953,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"radians","qualname":"<Angle<T>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6925,"byte_end":6934,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7034,"byte_end":7037,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"get","qualname":"<Angle<T>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7013,"byte_end":7022,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7144,"byte_end":7151,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"degrees","qualname":"<Angle<T>>::degrees","value":"pub fn degrees(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7123,"byte_end":7132,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7277,"byte_end":7287,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"to_degrees","qualname":"<Angle<T>>::to_degrees","value":"pub fn to_degrees(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7256,"byte_end":7265,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7541,"byte_end":7549,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"positive","qualname":"<Angle<T>>::positive","value":"pub fn positive(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the [0..2*PI[ range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the [0..2*PI[ range.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7483,"byte_end":7529,"line_start":70,"line_end":70,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7810,"byte_end":7816,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"signed","qualname":"<Angle<T>>::signed","value":"pub fn signed(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the ]-PI..PI] range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the ]-PI..PI] range.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7752,"byte_end":7798,"line_start":80,"line_end":80,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8203,"byte_end":8211,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Angle<T>>::angle_to","value":"pub fn angle_to(&Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the shortest signed angle between two angles.","sig":null,"attributes":[{"value":"/ Returns the shortest signed angle between two angles.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8079,"byte_end":8136,"line_start":96,"line_end":96,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8141,"byte_end":8144,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Takes wrapping and signs into account.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8149,"byte_end":8191,"line_start":98,"line_end":98,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8497,"byte_end":8501,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Angle<T>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two angles, using the shortest path.\n","sig":null,"attributes":[{"value":"/ Linear interpolation between two angles, using the shortest path.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8416,"byte_end":8485,"line_start":107,"line_end":107,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8706,"byte_end":8715,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Angle<T>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the angle is a finite number.\n","sig":null,"attributes":[{"value":"/ Returns true if the angle is a finite number.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8631,"byte_end":8680,"line_start":117,"line_end":117,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8685,"byte_end":8694,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8863,"byte_end":8870,"line_start":129,"line_end":129,"column_start":12,"column_end":19},"name":"sin_cos","qualname":"<Angle<T>>::sin_cos","value":"pub fn sin_cos(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Returns (sin(self), cos(self)).\n","sig":null,"attributes":[{"value":"/ Returns (sin(self), cos(self)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8816,"byte_end":8851,"line_start":128,"line_end":128,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8978,"byte_end":8982,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"zero","qualname":"<Angle<T>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9111,"byte_end":9113,"line_start":147,"line_end":147,"column_start":12,"column_end":14},"name":"pi","qualname":"<Angle<T>>::pi","value":"pub fn pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9176,"byte_end":9182,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"name":"two_pi","qualname":"<Angle<T>>::two_pi","value":"pub fn two_pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9255,"byte_end":9264,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"frac_pi_2","qualname":"<Angle<T>>::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9334,"byte_end":9343,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"name":"frac_pi_3","qualname":"<Angle<T>>::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9413,"byte_end":9422,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"name":"frac_pi_4","qualname":"<Angle<T>>::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9613,"byte_end":9617,"line_start":174,"line_end":174,"column_start":12,"column_end":16},"name":"cast","qualname":"<Angle<T>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Angle<NewT>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9535,"byte_end":9587,"line_start":172,"line_end":172,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9592,"byte_end":9601,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9774,"byte_end":9782,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Angle<T>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Angle<NewT>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9701,"byte_end":9762,"line_start":178,"line_end":178,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10008,"byte_end":10014,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Angle<T>>::to_f32","value":"pub fn to_f32(&Self) -> Angle<f32>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle to `f32`.\n","sig":null,"attributes":[{"value":"/ Cast angle to `f32`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9958,"byte_end":9982,"line_start":185,"line_end":185,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9987,"byte_end":9996,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10116,"byte_end":10122,"line_start":193,"line_end":193,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Angle<T>>::to_f64","value":"pub fn to_f64(&Self) -> Angle<f64>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle `f64`.\n","sig":null,"attributes":[{"value":"/ Cast angle `f64`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10069,"byte_end":10090,"line_start":191,"line_end":191,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10095,"byte_end":10104,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxeq","qualname":"::approxeq","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":286},{"krate":0,"index":4606},{"krate":0,"index":4609}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15366,"byte_end":15374,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ApproxEq","qualname":"::approxeq::ApproxEq","value":"ApproxEq<Eps>","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"decl_id":null,"docs":" Trait for testing approximate equality\n","sig":null,"attributes":[{"value":"/ Trait for testing approximate equality","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15313,"byte_end":15355,"line_start":10,"line_end":10,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15419,"byte_end":15433,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"approx_epsilon","qualname":"::approxeq::ApproxEq::approx_epsilon","value":"pub fn approx_epsilon() -> Eps","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Default epsilon value\n","sig":null,"attributes":[{"value":"/ Default epsilon value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15386,"byte_end":15411,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15571,"byte_end":15584,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"approx_eq_eps","qualname":"::approxeq::ApproxEq::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &Eps) -> bool","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n a provided epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15449,"byte_end":15529,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ a provided epsilon value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15534,"byte_end":15563,"line_start":16,"line_end":16,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15776,"byte_end":15785,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"approx_eq","qualname":"::approxeq::ApproxEq::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n the `approx_epsilon()` epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15642,"byte_end":15722,"line_start":19,"line_end":19,"column_start":5,"column_end":85}},{"value":"/ the `approx_epsilon()` epsilon value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxeq.rs","byte_start":15727,"byte_end":15768,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxord.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxord","qualname":"::approxord","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxord.rs","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":290}],"decl_id":null,"docs":" Utilities for testing approximate ordering - especially true for\n floating point types, where NaN's cannot be ordered.\n","sig":null,"attributes":[{"value":"/ Utilities for testing approximate ordering - especially true for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxord.rs","byte_start":16762,"byte_end":16830,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/ floating point types, where NaN's cannot be ordered.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxord.rs","byte_start":16831,"byte_end":16887,"line_start":11,"line_end":11,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxord.rs","byte_start":16896,"byte_end":16899,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"min","qualname":"::approxord::min","value":"pub fn min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\approxord.rs","byte_start":16999,"byte_end":17002,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"max","qualname":"::approxord::max","value":"pub fn max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19930,"byte_end":19935,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"Box2D","qualname":"::box2d::Box2D","value":"Box2D { min, max }","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":" A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","sig":null,"attributes":[{"value":"/ A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18419,"byte_end":18502,"line_start":32,"line_end":32,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18503,"byte_end":18506,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18507,"byte_end":18527,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18528,"byte_end":18531,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ This struct is similar to [`Rect`], but stores rectangle as two endpoints","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18532,"byte_end":18609,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ instead of origin point and size. Such representation has several advantages over","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18610,"byte_end":18695,"line_start":37,"line_end":37,"column_start":1,"column_end":86}},{"value":"/ [`Rect`] representation:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18696,"byte_end":18724,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ - Several operations are more efficient with `Box2D`, including [`intersection`],","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18725,"byte_end":18810,"line_start":39,"line_end":39,"column_start":1,"column_end":86}},{"value":"/   [`union`], and point-in-rect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18811,"byte_end":18846,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/ - The representation is less susceptible to overflow. With [`Rect`], computation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18847,"byte_end":18931,"line_start":41,"line_end":41,"column_start":1,"column_end":85}},{"value":"/   of second point can overflow for a large range of values of origin and size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":18932,"byte_end":19014,"line_start":42,"line_end":42,"column_start":1,"column_end":83}},{"value":"/   However, with `Box2D`, computation of [`size`] cannot overflow if the coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19015,"byte_end":19102,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/   are signed and the resulting size is unsigned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19103,"byte_end":19155,"line_start":44,"line_end":44,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19156,"byte_end":19159,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ A known disadvantage of `Box2D` is that translating the rectangle requires translating","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19160,"byte_end":19250,"line_start":46,"line_end":46,"column_start":1,"column_end":91}},{"value":"/ both points, whereas translating [`Rect`] only requires translating one point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19251,"byte_end":19333,"line_start":47,"line_end":47,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19334,"byte_end":19337,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Empty box","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19338,"byte_end":19353,"line_start":49,"line_end":49,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19354,"byte_end":19357,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ A box is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19358,"byte_end":19439,"line_start":51,"line_end":51,"column_start":1,"column_end":82}},{"value":"/ - it's area is empty,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19440,"byte_end":19465,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`min.x > max.x` or `min.y > max.y`),","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19466,"byte_end":19531,"line_start":53,"line_end":53,"column_start":1,"column_end":66}},{"value":"/ - it contains NaNs.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19532,"byte_end":19555,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19556,"byte_end":19559,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`Rect`]: struct.Rect.html","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19560,"byte_end":19590,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/ [`intersection`]: #method.intersection","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19591,"byte_end":19633,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19634,"byte_end":19668,"line_start":58,"line_end":58,"column_start":1,"column_end":35}},{"value":"/ [`union`]: #method.union","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19669,"byte_end":19697,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"/ [`size`]: #method.size","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19698,"byte_end":19724,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19725,"byte_end":19735,"line_start":61,"line_end":61,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19952,"byte_end":19955,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"min","qualname":"::box2d::Box2D::min","value":"point::Point2D<T, U>","parent":{"krate":0,"index":375},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":19980,"byte_end":19983,"line_start":69,"line_end":69,"column_start":9,"column_end":12},"name":"max","qualname":"::box2d::Box2D::max","value":"point::Point2D<T, U>","parent":{"krate":0,"index":375},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21002,"byte_end":21005,"line_start":113,"line_end":113,"column_start":18,"column_end":21},"name":"new","qualname":"<Box2D<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Point2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20954,"byte_end":20970,"line_start":111,"line_end":111,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20975,"byte_end":20984,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21136,"byte_end":21156,"line_start":119,"line_end":119,"column_start":12,"column_end":32},"name":"from_origin_and_size","qualname":"<Box2D<T, U>>::from_origin_and_size","value":"pub fn from_origin_and_size(Point2D<T, U>, Size2D<T, U>) -> Self where\nT: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21094,"byte_end":21110,"line_start":117,"line_end":117,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21115,"byte_end":21124,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21476,"byte_end":21485,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box2D<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box2D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box2D of the given size, at offset zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21396,"byte_end":21450,"line_start":129,"line_end":129,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21455,"byte_end":21464,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21958,"byte_end":21969,"line_start":148,"line_end":148,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box2D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative area.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative area.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21703,"byte_end":21751,"line_start":143,"line_end":143,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21756,"byte_end":21759,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21764,"byte_end":21856,"line_start":145,"line_end":145,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21861,"byte_end":21932,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21937,"byte_end":21946,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22137,"byte_end":22145,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box2D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22057,"byte_end":22111,"line_start":152,"line_end":152,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22116,"byte_end":22125,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22308,"byte_end":22318,"line_start":160,"line_end":160,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box2D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two boxes intersect.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the two boxes intersect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22236,"byte_end":22282,"line_start":158,"line_end":158,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22287,"byte_end":22296,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22744,"byte_end":22752,"line_start":171,"line_end":171,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box2D<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the point. Points are considered\n in the box if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the point. Points are considered","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22514,"byte_end":22586,"line_start":167,"line_end":167,"column_start":5,"column_end":77}},{"value":"/ in the box if they are on the front, left or top faces, but outside if they","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22591,"byte_end":22670,"line_start":168,"line_end":168,"column_start":5,"column_end":84}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22675,"byte_end":22718,"line_start":169,"line_end":169,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22723,"byte_end":22732,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23110,"byte_end":23122,"line_start":179,"line_end":179,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box2D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the interior of the other box. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the interior of the other box. Always","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22886,"byte_end":22963,"line_start":175,"line_end":175,"column_start":5,"column_end":82}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":22968,"byte_end":23044,"line_start":176,"line_end":176,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box is empty.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23049,"byte_end":23084,"line_start":177,"line_end":177,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23089,"byte_end":23098,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23448,"byte_end":23460,"line_start":193,"line_end":193,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box2D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23427,"byte_end":23436,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23699,"byte_end":23711,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box2D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes, returning `None` if the boxes do not intersect.\n","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes, returning `None` if the boxes do not intersect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23582,"byte_end":23673,"line_start":201,"line_end":201,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23678,"byte_end":23687,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24289,"byte_end":24311,"line_start":220,"line_end":220,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box2D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes without check whether they do intersect.","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes without check whether they do intersect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23893,"byte_end":23976,"line_start":213,"line_end":213,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23981,"byte_end":23984,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ The result is a negative box if the boxes do not intersect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23989,"byte_end":24052,"line_start":215,"line_end":215,"column_start":5,"column_end":68}},{"value":"/ This can be useful for computing the intersection of more than two boxes, as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24057,"byte_end":24137,"line_start":216,"line_end":216,"column_start":5,"column_end":85}},{"value":"/ it is possible to chain multiple intersection_unchecked calls and check for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24142,"byte_end":24221,"line_start":217,"line_end":217,"column_start":5,"column_end":84}},{"value":"/ empty/negative result at the end.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24226,"byte_end":24263,"line_start":218,"line_end":218,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24268,"byte_end":24277,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24688,"byte_end":24693,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"union","qualname":"<Box2D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the union of two boxes.","sig":null,"attributes":[{"value":"/ Computes the union of two boxes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24550,"byte_end":24586,"line_start":227,"line_end":227,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24591,"byte_end":24594,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ If either of the boxes is empty, the other one is returned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24599,"byte_end":24662,"line_start":229,"line_end":229,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":24667,"byte_end":24676,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25207,"byte_end":25216,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box2D<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box, translated by a vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25132,"byte_end":25181,"line_start":250,"line_end":250,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25186,"byte_end":25195,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25443,"byte_end":25447,"line_start":265,"line_end":265,"column_start":12,"column_end":16},"name":"size","qualname":"<Box2D<T, U>>::size","value":"pub fn size(&Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25422,"byte_end":25431,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25654,"byte_end":25662,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"set_size","qualname":"<Box2D<T, U>>::set_size","value":"pub fn set_size(&mut Self, Size2D<T, U>)","parent":null,"children":[],"decl_id":null,"docs":" Change the size of the box by adjusting the max endpoint\n without modifying the min endpoint.\n","sig":null,"attributes":[{"value":"/ Change the size of the box by adjusting the max endpoint","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25524,"byte_end":25584,"line_start":269,"line_end":269,"column_start":5,"column_end":65}},{"value":"/ without modifying the min endpoint.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25589,"byte_end":25628,"line_start":270,"line_end":270,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25633,"byte_end":25642,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25807,"byte_end":25812,"line_start":278,"line_end":278,"column_start":12,"column_end":17},"name":"width","qualname":"<Box2D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25786,"byte_end":25795,"line_start":277,"line_end":277,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25891,"byte_end":25897,"line_start":283,"line_end":283,"column_start":12,"column_end":18},"name":"height","qualname":"<Box2D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25870,"byte_end":25879,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25976,"byte_end":25983,"line_start":288,"line_end":288,"column_start":12,"column_end":19},"name":"to_rect","qualname":"<Box2D<T, U>>::to_rect","value":"pub fn to_rect(&Self) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25955,"byte_end":25964,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26304,"byte_end":26311,"line_start":303,"line_end":303,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box2D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26192,"byte_end":26262,"line_start":300,"line_end":300,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26267,"byte_end":26276,"line_start":301,"line_end":301,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26281,"byte_end":26292,"line_start":302,"line_end":302,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26747,"byte_end":26756,"line_start":314,"line_end":314,"column_start":12,"column_end":21},"name":"inner_box","qualname":"<Box2D<T, U>>::inner_box","value":"pub fn inner_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner box.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26519,"byte_end":26571,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26576,"byte_end":26579,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal, vertical","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26584,"byte_end":26655,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/ and applicate offsets must not be larger than the original side length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26660,"byte_end":26735,"line_start":313,"line_end":313,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27104,"byte_end":27113,"line_start":324,"line_end":324,"column_start":12,"column_end":21},"name":"outer_box","qualname":"<Box2D<T, U>>::outer_box","value":"pub fn outer_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the b and position of an outer box.","sig":null,"attributes":[{"value":"/ Calculate the b and position of an outer box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26967,"byte_end":27016,"line_start":321,"line_end":321,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27021,"byte_end":27024,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded box is returned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27029,"byte_end":27092,"line_start":323,"line_end":323,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27469,"byte_end":27480,"line_start":337,"line_end":337,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box2D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27390,"byte_end":27457,"line_start":336,"line_end":336,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28516,"byte_end":28520,"line_start":379,"line_end":379,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box2D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box and another box.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box and another box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28432,"byte_end":28490,"line_start":377,"line_end":377,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28495,"byte_end":28504,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28739,"byte_end":28745,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"center","qualname":"<Box2D<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28979,"byte_end":28983,"line_start":399,"line_end":399,"column_start":12,"column_end":16},"name":"area","qualname":"<Box2D<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28958,"byte_end":28967,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29175,"byte_end":29179,"line_start":410,"line_end":410,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box2D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29120,"byte_end":29163,"line_start":409,"line_end":409,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30969,"byte_end":30976,"line_start":486,"line_end":486,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Box2D<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30948,"byte_end":30957,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31061,"byte_end":31068,"line_start":491,"line_end":491,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Box2D<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31040,"byte_end":31049,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31212,"byte_end":31222,"line_start":497,"line_end":497,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box2D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31132,"byte_end":31186,"line_start":495,"line_end":495,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31191,"byte_end":31200,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31395,"byte_end":31407,"line_start":503,"line_end":503,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box2D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box2D<T, UnknownUnit>) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31333,"byte_end":31369,"line_start":501,"line_end":501,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31374,"byte_end":31383,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31585,"byte_end":31594,"line_start":509,"line_end":509,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31542,"byte_end":31559,"line_start":507,"line_end":507,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31564,"byte_end":31573,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31717,"byte_end":31722,"line_start":514,"line_end":514,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box2D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31696,"byte_end":31705,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32380,"byte_end":32384,"line_start":532,"line_end":532,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32000,"byte_end":32074,"line_start":526,"line_end":526,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32079,"byte_end":32082,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32087,"byte_end":32174,"line_start":528,"line_end":528,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32179,"byte_end":32267,"line_start":529,"line_end":529,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32272,"byte_end":32354,"line_start":530,"line_end":530,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32359,"byte_end":32368,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32866,"byte_end":32874,"line_start":541,"line_end":541,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32491,"byte_end":32574,"line_start":536,"line_end":536,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32579,"byte_end":32582,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32587,"byte_end":32674,"line_start":538,"line_end":538,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32679,"byte_end":32767,"line_start":539,"line_end":539,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":32772,"byte_end":32854,"line_start":540,"line_end":540,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33186,"byte_end":33192,"line_start":552,"line_end":552,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box2D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33133,"byte_end":33160,"line_start":550,"line_end":550,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33165,"byte_end":33174,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33303,"byte_end":33309,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box2D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33250,"byte_end":33277,"line_start":556,"line_end":556,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33282,"byte_end":33291,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33666,"byte_end":33674,"line_start":568,"line_end":568,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box2D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33367,"byte_end":33424,"line_start":562,"line_end":562,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33429,"byte_end":33432,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33437,"byte_end":33512,"line_start":564,"line_end":564,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33517,"byte_end":33592,"line_start":565,"line_end":565,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33597,"byte_end":33640,"line_start":566,"line_end":566,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33645,"byte_end":33654,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34031,"byte_end":34037,"line_start":578,"line_end":578,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box2D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33734,"byte_end":33789,"line_start":572,"line_end":572,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33794,"byte_end":33797,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33802,"byte_end":33877,"line_start":574,"line_end":574,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33882,"byte_end":33957,"line_start":575,"line_end":575,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":33962,"byte_end":34005,"line_start":576,"line_end":576,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34010,"byte_end":34019,"line_start":577,"line_end":577,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34392,"byte_end":34398,"line_start":588,"line_end":588,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box2D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34095,"byte_end":34150,"line_start":582,"line_end":582,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34155,"byte_end":34158,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34163,"byte_end":34238,"line_start":584,"line_end":584,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34243,"byte_end":34318,"line_start":585,"line_end":585,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34323,"byte_end":34366,"line_start":586,"line_end":586,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34371,"byte_end":34380,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34753,"byte_end":34759,"line_start":598,"line_end":598,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box2D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34456,"byte_end":34511,"line_start":592,"line_end":592,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34516,"byte_end":34519,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34524,"byte_end":34599,"line_start":594,"line_end":594,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34604,"byte_end":34679,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34684,"byte_end":34727,"line_start":596,"line_end":596,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34732,"byte_end":34741,"line_start":597,"line_end":597,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34920,"byte_end":34929,"line_start":606,"line_end":606,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Box2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34851,"byte_end":34894,"line_start":604,"line_end":604,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34899,"byte_end":34908,"line_start":605,"line_end":605,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35601,"byte_end":35606,"line_start":625,"line_end":625,"column_start":12,"column_end":17},"name":"round","qualname":"<Box2D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with edges rounded to integer coordinates, such that\n the returned box has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box with edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35057,"byte_end":35126,"line_start":615,"line_end":615,"column_start":5,"column_end":74}},{"value":"/ the returned box has the same set of pixel centers as the original","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35131,"byte_end":35201,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35206,"byte_end":35214,"line_start":617,"line_end":617,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35219,"byte_end":35252,"line_start":618,"line_end":618,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35257,"byte_end":35319,"line_start":619,"line_end":619,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35324,"byte_end":35396,"line_start":620,"line_end":620,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35401,"byte_end":35433,"line_start":621,"line_end":621,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35438,"byte_end":35521,"line_start":622,"line_end":622,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35526,"byte_end":35573,"line_start":623,"line_end":623,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35578,"byte_end":35589,"line_start":624,"line_end":624,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35900,"byte_end":35908,"line_start":637,"line_end":637,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box2D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box contains the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35744,"byte_end":35819,"line_start":634,"line_end":634,"column_start":5,"column_end":80}},{"value":"/ the original box contains the resulting box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35824,"byte_end":35872,"line_start":635,"line_end":635,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35877,"byte_end":35888,"line_start":636,"line_end":636,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36198,"byte_end":36207,"line_start":646,"line_end":646,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box2D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box is contained in the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36035,"byte_end":36110,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ the original box is contained in the resulting box.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36115,"byte_end":36170,"line_start":644,"line_end":644,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36175,"byte_end":36186,"line_start":645,"line_end":645,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45437,"byte_end":45442,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"Box3D","qualname":"::box3d::Box3D","value":"Box3D { min, max }","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623}],"decl_id":null,"docs":" An axis aligned 3D box represented by its minimum and maximum coordinates.\n","sig":null,"attributes":[{"value":"/ An axis aligned 3D box represented by its minimum and maximum coordinates.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45153,"byte_end":45231,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45232,"byte_end":45242,"line_start":31,"line_end":31,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45459,"byte_end":45462,"line_start":38,"line_end":38,"column_start":9,"column_end":12},"name":"min","qualname":"::box3d::Box3D::min","value":"point::Point3D<T, U>","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45487,"byte_end":45490,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"max","qualname":"::box3d::Box3D::max","value":"point::Point3D<T, U>","parent":{"krate":0,"index":619},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46509,"byte_end":46512,"line_start":83,"line_end":83,"column_start":18,"column_end":21},"name":"new","qualname":"<Box3D<T, U>>::new","value":"pub const fn new(Point3D<T, U>, Point3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46461,"byte_end":46477,"line_start":81,"line_end":81,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46482,"byte_end":46491,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46681,"byte_end":46690,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box3D<T, U>>::from_size","value":"pub fn from_size(Size3D<T, U>) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box3D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box3D of the given size, at offset zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46601,"byte_end":46655,"line_start":87,"line_end":87,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46660,"byte_end":46669,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47177,"byte_end":47188,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box3D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative volume.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative volume.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46920,"byte_end":46970,"line_start":101,"line_end":101,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46975,"byte_end":46978,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46983,"byte_end":47075,"line_start":103,"line_end":103,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47080,"byte_end":47151,"line_start":104,"line_end":104,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47156,"byte_end":47165,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47383,"byte_end":47391,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box3D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47303,"byte_end":47357,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47362,"byte_end":47371,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47530,"byte_end":47540,"line_start":117,"line_end":117,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box3D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47509,"byte_end":47518,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48050,"byte_end":48058,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box3D<T, U>>::contains","value":"pub fn contains(&Self, Point3D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the point. Points are considered\n in the box3d if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the point. Points are considered","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47816,"byte_end":47890,"line_start":126,"line_end":126,"column_start":5,"column_end":79}},{"value":"/ in the box3d if they are on the front, left or top faces, but outside if they","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47895,"byte_end":47976,"line_start":127,"line_end":127,"column_start":5,"column_end":86}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":47981,"byte_end":48024,"line_start":128,"line_end":128,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48029,"byte_end":48038,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48551,"byte_end":48563,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box3D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the interior of the other box3d. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box3d is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the interior of the other box3d. Always","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48321,"byte_end":48402,"line_start":139,"line_end":139,"column_start":5,"column_end":86}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48407,"byte_end":48483,"line_start":140,"line_end":140,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box3d is empty.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48488,"byte_end":48525,"line_start":141,"line_end":141,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48530,"byte_end":48539,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48979,"byte_end":48991,"line_start":159,"line_end":159,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box3D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48958,"byte_end":48967,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49134,"byte_end":49146,"line_start":168,"line_end":168,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box3D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49113,"byte_end":49122,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49335,"byte_end":49357,"line_start":178,"line_end":178,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box3D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49959,"byte_end":49964,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"union","qualname":"<Box3D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the union of two boxes.","sig":null,"attributes":[{"value":"/ Computes the union of two boxes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49821,"byte_end":49857,"line_start":194,"line_end":194,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49862,"byte_end":49865,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ If either of the boxes is empty, the other one is returned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49870,"byte_end":49933,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":49938,"byte_end":49947,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50688,"byte_end":50697,"line_start":228,"line_end":228,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box3D<T, U>>::translate","value":"pub fn translate(&Self, Vector3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box3d, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box3d, translated by a vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50595,"byte_end":50646,"line_start":225,"line_end":225,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50651,"byte_end":50660,"line_start":226,"line_end":226,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50665,"byte_end":50676,"line_start":227,"line_end":227,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50924,"byte_end":50928,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"size","qualname":"<Box3D<T, U>>::size","value":"pub fn size(&Self) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50903,"byte_end":50912,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51128,"byte_end":51133,"line_start":250,"line_end":250,"column_start":12,"column_end":17},"name":"width","qualname":"<Box3D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51107,"byte_end":51116,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51212,"byte_end":51218,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"height","qualname":"<Box3D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51191,"byte_end":51200,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51297,"byte_end":51302,"line_start":260,"line_end":260,"column_start":12,"column_end":17},"name":"depth","qualname":"<Box3D<T, U>>::depth","value":"pub fn depth(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51276,"byte_end":51285,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51560,"byte_end":51567,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box3D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51448,"byte_end":51518,"line_start":269,"line_end":269,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51523,"byte_end":51532,"line_start":270,"line_end":270,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51537,"byte_end":51548,"line_start":271,"line_end":271,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51976,"byte_end":51987,"line_start":285,"line_end":285,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box3D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51897,"byte_end":51964,"line_start":284,"line_end":284,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53212,"byte_end":53216,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box3D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box3d and another box3d.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box3d and another box3d.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53124,"byte_end":53186,"line_start":331,"line_end":331,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53191,"byte_end":53200,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53435,"byte_end":53441,"line_start":342,"line_end":342,"column_start":12,"column_end":18},"name":"center","qualname":"<Box3D<T, U>>::center","value":"pub fn center(&Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53675,"byte_end":53681,"line_start":353,"line_end":353,"column_start":12,"column_end":18},"name":"volume","qualname":"<Box3D<T, U>>::volume","value":"pub fn volume(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53654,"byte_end":53663,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53806,"byte_end":53813,"line_start":359,"line_end":359,"column_start":12,"column_end":19},"name":"xy_area","qualname":"<Box3D<T, U>>::xy_area","value":"pub fn xy_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53785,"byte_end":53794,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53925,"byte_end":53932,"line_start":365,"line_end":365,"column_start":12,"column_end":19},"name":"yz_area","qualname":"<Box3D<T, U>>::yz_area","value":"pub fn yz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53904,"byte_end":53913,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54044,"byte_end":54051,"line_start":371,"line_end":371,"column_start":12,"column_end":19},"name":"xz_area","qualname":"<Box3D<T, U>>::xz_area","value":"pub fn xz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54023,"byte_end":54032,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54242,"byte_end":54246,"line_start":382,"line_end":382,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box3D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54187,"byte_end":54230,"line_start":381,"line_end":381,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56112,"byte_end":56119,"line_start":460,"line_end":460,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Box3D<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56091,"byte_end":56100,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56204,"byte_end":56211,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Box3D<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56183,"byte_end":56192,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56296,"byte_end":56303,"line_start":470,"line_end":470,"column_start":12,"column_end":19},"name":"z_range","qualname":"<Box3D<T, U>>::z_range","value":"pub fn z_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56275,"byte_end":56284,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56447,"byte_end":56457,"line_start":476,"line_end":476,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box3D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56367,"byte_end":56421,"line_start":474,"line_end":474,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56426,"byte_end":56435,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56671,"byte_end":56683,"line_start":485,"line_end":485,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box3D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box3D<T, UnknownUnit>) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56609,"byte_end":56645,"line_start":483,"line_end":483,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56650,"byte_end":56659,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56902,"byte_end":56911,"line_start":494,"line_end":494,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56859,"byte_end":56876,"line_start":492,"line_end":492,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56881,"byte_end":56890,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57034,"byte_end":57039,"line_start":499,"line_end":499,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box3D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57013,"byte_end":57022,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57741,"byte_end":57745,"line_start":517,"line_end":517,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57361,"byte_end":57435,"line_start":511,"line_end":511,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57440,"byte_end":57443,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57448,"byte_end":57535,"line_start":513,"line_end":513,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57540,"byte_end":57628,"line_start":514,"line_end":514,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57633,"byte_end":57715,"line_start":515,"line_end":515,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57720,"byte_end":57729,"line_start":516,"line_end":516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58227,"byte_end":58235,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57852,"byte_end":57935,"line_start":521,"line_end":521,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57940,"byte_end":57943,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57948,"byte_end":58035,"line_start":523,"line_end":523,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58040,"byte_end":58128,"line_start":524,"line_end":524,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58133,"byte_end":58215,"line_start":525,"line_end":525,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58549,"byte_end":58555,"line_start":537,"line_end":537,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box3D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box3d.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58494,"byte_end":58523,"line_start":535,"line_end":535,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58528,"byte_end":58537,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58668,"byte_end":58674,"line_start":543,"line_end":543,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box3D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box3d.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58613,"byte_end":58642,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58647,"byte_end":58656,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59035,"byte_end":59043,"line_start":553,"line_end":553,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box3D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box3d, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58732,"byte_end":58791,"line_start":547,"line_end":547,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58796,"byte_end":58799,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58804,"byte_end":58881,"line_start":549,"line_end":549,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58886,"byte_end":58961,"line_start":550,"line_end":550,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":58966,"byte_end":59009,"line_start":551,"line_end":551,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59014,"byte_end":59023,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59404,"byte_end":59410,"line_start":563,"line_end":563,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box3D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box3d, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59103,"byte_end":59160,"line_start":557,"line_end":557,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59165,"byte_end":59168,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59173,"byte_end":59250,"line_start":559,"line_end":559,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59255,"byte_end":59330,"line_start":560,"line_end":560,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59335,"byte_end":59378,"line_start":561,"line_end":561,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59383,"byte_end":59392,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59769,"byte_end":59775,"line_start":573,"line_end":573,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box3D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box3d, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59468,"byte_end":59525,"line_start":567,"line_end":567,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59530,"byte_end":59533,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59538,"byte_end":59615,"line_start":569,"line_end":569,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59620,"byte_end":59695,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59700,"byte_end":59743,"line_start":571,"line_end":571,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59748,"byte_end":59757,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60134,"byte_end":60140,"line_start":583,"line_end":583,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box3D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box3d, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59833,"byte_end":59890,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59895,"byte_end":59898,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59903,"byte_end":59980,"line_start":579,"line_end":579,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":59985,"byte_end":60060,"line_start":580,"line_end":580,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60065,"byte_end":60108,"line_start":581,"line_end":581,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60113,"byte_end":60122,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60301,"byte_end":60310,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Box3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60232,"byte_end":60275,"line_start":589,"line_end":589,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60280,"byte_end":60289,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60986,"byte_end":60991,"line_start":610,"line_end":610,"column_start":12,"column_end":17},"name":"round","qualname":"<Box3D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with edges rounded to integer coordinates, such that\n the returned box3d has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box3d with edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60438,"byte_end":60509,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"/ the returned box3d has the same set of pixel centers as the original","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60514,"byte_end":60586,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/ one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60591,"byte_end":60599,"line_start":602,"line_end":602,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60604,"byte_end":60637,"line_start":603,"line_end":603,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60642,"byte_end":60704,"line_start":604,"line_end":604,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60709,"byte_end":60781,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60786,"byte_end":60818,"line_start":606,"line_end":606,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60823,"byte_end":60906,"line_start":607,"line_end":607,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60911,"byte_end":60958,"line_start":608,"line_end":608,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60963,"byte_end":60974,"line_start":609,"line_end":609,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61291,"byte_end":61299,"line_start":622,"line_end":622,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box3D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d contains the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61129,"byte_end":61206,"line_start":619,"line_end":619,"column_start":5,"column_end":82}},{"value":"/ the original box3d contains the resulting box3d.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61211,"byte_end":61263,"line_start":620,"line_end":620,"column_start":5,"column_end":57}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61268,"byte_end":61279,"line_start":621,"line_end":621,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61592,"byte_end":61601,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box3D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d is contained in the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61423,"byte_end":61500,"line_start":629,"line_end":629,"column_start":5,"column_end":82}},{"value":"/ the original box3d is contained in the resulting box3d.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61505,"byte_end":61564,"line_start":630,"line_end":630,"column_start":5,"column_end":64}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61569,"byte_end":61580,"line_start":631,"line_end":631,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":62158,"byte_end":62163,"line_start":659,"line_end":659,"column_start":8,"column_end":13},"name":"box3d","qualname":"::box3d::box3d","value":"pub fn box3d<T: Copy, U>(T, T, T, T, T, T) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":62067,"byte_end":62150,"line_start":658,"line_end":658,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":834},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72078,"byte_end":72095,"line_start":27,"line_end":27,"column_start":12,"column_end":29},"name":"HomogeneousVector","qualname":"::homogen::HomogeneousVector","value":"HomogeneousVector { x, y, z, w, _unit }","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841}],"decl_id":null,"docs":" Homogeneous vector in 3D space.\n","sig":null,"attributes":[{"value":"/ Homogeneous vector in 3D space.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72020,"byte_end":72055,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72056,"byte_end":72066,"line_start":26,"line_end":26,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":837},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72112,"byte_end":72113,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"x","qualname":"::homogen::HomogeneousVector::x","value":"T","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72126,"byte_end":72127,"line_start":29,"line_end":29,"column_start":9,"column_end":10},"name":"y","qualname":"::homogen::HomogeneousVector::y","value":"T","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72140,"byte_end":72141,"line_start":30,"line_end":30,"column_start":9,"column_end":10},"name":"z","qualname":"::homogen::HomogeneousVector::z","value":"T","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72154,"byte_end":72155,"line_start":31,"line_end":31,"column_start":9,"column_end":10},"name":"w","qualname":"::homogen::HomogeneousVector::w","value":"T","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72187,"byte_end":72192,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"_unit","qualname":"::homogen::HomogeneousVector::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74141,"byte_end":74144,"line_start":115,"line_end":115,"column_start":18,"column_end":21},"name":"new","qualname":"<HomogeneousVector<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74063,"byte_end":74109,"line_start":113,"line_end":113,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74114,"byte_end":74123,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74546,"byte_end":74556,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"to_point2d","qualname":"<HomogeneousVector<T, U>>::to_point2d","value":"pub fn to_point2d(Self) -> Option<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 2D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 2D point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74406,"byte_end":74442,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74447,"byte_end":74450,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74455,"byte_end":74520,"line_start":129,"line_end":129,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74525,"byte_end":74534,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74882,"byte_end":74892,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"to_point3d","qualname":"<HomogeneousVector<T, U>>::to_point3d","value":"pub fn to_point3d(Self) -> Option<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 3D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 3D point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74742,"byte_end":74778,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74783,"byte_end":74786,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74791,"byte_end":74856,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74861,"byte_end":74870,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78687,"byte_end":78693,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"Length","qualname":"::length::Length","value":"","parent":null,"children":[],"decl_id":null,"docs":" A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","sig":null,"attributes":[{"value":"/ A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":77999,"byte_end":78092,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78093,"byte_end":78096,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ `T` can be any numeric type, for example a primitive type like `u64` or `f32`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78097,"byte_end":78179,"line_start":32,"line_end":32,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78180,"byte_end":78183,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ `Unit` is not used in the representation of a `Length` value. It is used only at compile time","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78184,"byte_end":78281,"line_start":34,"line_end":34,"column_start":1,"column_end":98}},{"value":"/ to ensure that a `Length` stored with one unit is converted explicitly before being used in an","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78282,"byte_end":78380,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ expression that requires a different unit.  It may be a type without values, such as an empty","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78381,"byte_end":78478,"line_start":36,"line_end":36,"column_start":1,"column_end":98}},{"value":"/ enum.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78479,"byte_end":78488,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78489,"byte_end":78492,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ You can multiply a `Length` by a `scale::Scale` to convert it from one unit to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78493,"byte_end":78575,"line_start":39,"line_end":39,"column_start":1,"column_end":83}},{"value":"/ another. See the [`Scale`] docs for an example.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78576,"byte_end":78627,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78628,"byte_end":78631,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ [`Scale`]: struct.Scale.html","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78632,"byte_end":78664,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78665,"byte_end":78675,"line_start":43,"line_end":43,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":969},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78703,"byte_end":78708,"line_start":44,"line_end":44,"column_start":28,"column_end":33},"name":"0","qualname":"::length::Length::0","value":"T","parent":{"krate":0,"index":965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78725,"byte_end":78746,"line_start":44,"line_end":44,"column_start":50,"column_end":71},"name":"1","qualname":"::length::Length::1","value":"core::marker::PhantomData<Unit>","parent":{"krate":0,"index":965},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79745,"byte_end":79748,"line_start":89,"line_end":89,"column_start":18,"column_end":21},"name":"new","qualname":"<Length<T, U>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Associate a value with a unit of measure.\n","sig":null,"attributes":[{"value":"/ Associate a value with a unit of measure.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79668,"byte_end":79713,"line_start":87,"line_end":87,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79718,"byte_end":79727,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79903,"byte_end":79906,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"get","qualname":"<Length<T, U>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unpack the underlying value from the wrapper.\n","sig":null,"attributes":[{"value":"/ Unpack the underlying value from the wrapper.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79842,"byte_end":79891,"line_start":95,"line_end":95,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79989,"byte_end":79998,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Length<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Length<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79946,"byte_end":79963,"line_start":100,"line_end":100,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79968,"byte_end":79977,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80642,"byte_end":80646,"line_start":123,"line_end":123,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Length<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this length and another length.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this length and another length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80065,"byte_end":80129,"line_start":106,"line_end":106,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80134,"byte_end":80137,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80142,"byte_end":80155,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80160,"byte_end":80163,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80168,"byte_end":80179,"line_start":110,"line_end":110,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Length;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80184,"byte_end":80216,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80221,"byte_end":80224,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let from = Length::new(0.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80229,"byte_end":80261,"line_start":113,"line_end":113,"column_start":5,"column_end":37}},{"value":"/ let to = Length::new(8.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80266,"byte_end":80296,"line_start":114,"line_end":114,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80301,"byte_end":80304,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), Length::new(-8.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80309,"byte_end":80364,"line_start":116,"line_end":116,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), Length::new( 0.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80369,"byte_end":80424,"line_start":117,"line_end":117,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), Length::new( 4.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80429,"byte_end":80484,"line_start":118,"line_end":118,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), Length::new( 8.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80489,"byte_end":80544,"line_start":119,"line_end":119,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), Length::new(16.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80549,"byte_end":80604,"line_start":120,"line_end":120,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80609,"byte_end":80616,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80621,"byte_end":80630,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81002,"byte_end":81005,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"min","qualname":"<Length<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns minimum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns minimum between this length and another length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80917,"byte_end":80976,"line_start":133,"line_end":133,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80981,"byte_end":80990,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81156,"byte_end":81159,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"max","qualname":"<Length<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns maximum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns maximum between this length and another length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81071,"byte_end":81130,"line_start":139,"line_end":139,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81135,"byte_end":81144,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81370,"byte_end":81374,"line_start":149,"line_end":149,"column_start":12,"column_end":16},"name":"cast","qualname":"<Length<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Length<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81270,"byte_end":81344,"line_start":147,"line_end":147,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81349,"byte_end":81358,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81556,"byte_end":81564,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Length<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Length<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81461,"byte_end":81544,"line_start":153,"line_end":153,"column_start":5,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":4612},{"krate":0,"index":4614},{"krate":0,"index":4616},{"krate":0,"index":4618},{"krate":0,"index":4620},{"krate":0,"index":4622},{"krate":0,"index":4624},{"krate":0,"index":4626},{"krate":0,"index":4628},{"krate":0,"index":4630},{"krate":0,"index":4632},{"krate":0,"index":4634},{"krate":0,"index":4636},{"krate":0,"index":4638},{"krate":0,"index":4640},{"krate":0,"index":4642},{"krate":0,"index":4644},{"krate":0,"index":4646},{"krate":0,"index":4648},{"krate":0,"index":4650},{"krate":0,"index":4652},{"krate":0,"index":4654},{"krate":0,"index":4656},{"krate":0,"index":4658},{"krate":0,"index":4660},{"krate":0,"index":4662},{"krate":0,"index":4664},{"krate":0,"index":4666},{"krate":0,"index":4668},{"krate":0,"index":4670}],"decl_id":null,"docs":" A one-dimensional length, tagged with its units.\n","sig":null,"attributes":[{"value":"/ A one-dimensional length, tagged with its units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":93504,"byte_end":93556,"line_start":9,"line_end":9,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94685,"byte_end":94689,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"Zero","qualname":"::num::Zero","value":"Zero","parent":null,"children":[{"krate":0,"index":1123}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94699,"byte_end":94703,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"zero","qualname":"::num::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94830,"byte_end":94833,"line_start":38,"line_end":38,"column_start":11,"column_end":14},"name":"One","qualname":"::num::One","value":"One","parent":null,"children":[{"krate":0,"index":1128}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94843,"byte_end":94846,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"one","qualname":"::num::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":1127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1132},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95029,"byte_end":95034,"line_start":49,"line_end":49,"column_start":11,"column_end":16},"name":"Round","qualname":"::num::Round","value":"Round: Copy","parent":null,"children":[{"krate":0,"index":1133}],"decl_id":null,"docs":" Defines the nearest integer value to the original value.\n","sig":null,"attributes":[{"value":"/ Defines the nearest integer value to the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94958,"byte_end":95018,"line_start":48,"line_end":48,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95199,"byte_end":95204,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"round","qualname":"::num::Round::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Rounds to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95047,"byte_end":95087,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95092,"byte_end":95095,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95100,"byte_end":95175,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95180,"byte_end":95191,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95304,"byte_end":95309,"line_start":57,"line_end":57,"column_start":11,"column_end":16},"name":"Floor","qualname":"::num::Floor","value":"Floor: Copy","parent":null,"children":[{"krate":0,"index":1135}],"decl_id":null,"docs":" Defines the biggest integer equal or lower than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95222,"byte_end":95293,"line_start":56,"line_end":56,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95507,"byte_end":95512,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"floor","qualname":"::num::Floor::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":1134},"children":[],"decl_id":null,"docs":" Rounds to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95322,"byte_end":95395,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95400,"byte_end":95403,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95408,"byte_end":95483,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95488,"byte_end":95499,"line_start":61,"line_end":61,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":1136},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95615,"byte_end":95619,"line_start":65,"line_end":65,"column_start":11,"column_end":15},"name":"Ceil","qualname":"::num::Ceil","value":"Ceil: Copy","parent":null,"children":[{"krate":0,"index":1137}],"decl_id":null,"docs":" Defines the smallest integer equal or greater than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95530,"byte_end":95604,"line_start":64,"line_end":64,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95820,"byte_end":95824,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"ceil","qualname":"::num::Ceil::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":1136},"children":[],"decl_id":null,"docs":" Rounds to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95632,"byte_end":95708,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95713,"byte_end":95716,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95721,"byte_end":95796,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95801,"byte_end":95812,"line_start":69,"line_end":69,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98075,"byte_end":98082,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"Point2D","qualname":"::point::Point2D","value":"Point2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240}],"decl_id":null,"docs":" A 2d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Point tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98018,"byte_end":98052,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98053,"byte_end":98063,"line_start":34,"line_end":34,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98099,"byte_end":98100,"line_start":36,"line_end":36,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point2D::x","value":"T","parent":{"krate":0,"index":1235},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98113,"byte_end":98114,"line_start":37,"line_end":37,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point2D::y","value":"T","parent":{"krate":0,"index":1235},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98146,"byte_end":98151,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1235},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100515,"byte_end":100521,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point2D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100441,"byte_end":100489,"line_start":143,"line_end":143,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100494,"byte_end":100503,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100690,"byte_end":100694,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100619,"byte_end":100664,"line_start":152,"line_end":152,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100669,"byte_end":100678,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100850,"byte_end":100853,"line_start":163,"line_end":163,"column_start":18,"column_end":21},"name":"new","qualname":"<Point2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100772,"byte_end":100818,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100823,"byte_end":100832,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101068,"byte_end":101080,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100977,"byte_end":101042,"line_start":171,"line_end":171,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101047,"byte_end":101056,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101244,"byte_end":101249,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"splat","qualname":"<Point2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101161,"byte_end":101218,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101223,"byte_end":101232,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101475,"byte_end":101487,"line_start":192,"line_end":192,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point2D<T, U>>::from_untyped","value":"pub fn from_untyped(Point2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101413,"byte_end":101449,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101454,"byte_end":101463,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101688,"byte_end":101694,"line_start":200,"line_end":200,"column_start":12,"column_end":18},"name":"extend","qualname":"<Point2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d point from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d point from this one, using the specified z value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101597,"byte_end":101662,"line_start":198,"line_end":198,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101667,"byte_end":101676,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101901,"byte_end":101910,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101771,"byte_end":101805,"line_start":204,"line_end":204,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101810,"byte_end":101813,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin from this point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101818,"byte_end":101875,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101880,"byte_end":101889,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102334,"byte_end":102336,"line_start":229,"line_end":229,"column_start":12,"column_end":14},"name":"yx","qualname":"<Point2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102055,"byte_end":102072,"line_start":216,"line_end":216,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102077,"byte_end":102080,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102085,"byte_end":102098,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102103,"byte_end":102106,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102111,"byte_end":102122,"line_start":220,"line_end":220,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102127,"byte_end":102163,"line_start":221,"line_end":221,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102168,"byte_end":102182,"line_start":222,"line_end":222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102187,"byte_end":102190,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102195,"byte_end":102241,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102246,"byte_end":102249,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.yx(), point2(-8, 1));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102254,"byte_end":102296,"line_start":226,"line_end":226,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102301,"byte_end":102308,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102313,"byte_end":102322,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102766,"byte_end":102776,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102395,"byte_end":102449,"line_start":233,"line_end":233,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102454,"byte_end":102457,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102462,"byte_end":102475,"line_start":235,"line_end":235,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102480,"byte_end":102483,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102488,"byte_end":102499,"line_start":237,"line_end":237,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102504,"byte_end":102540,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102545,"byte_end":102559,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102564,"byte_end":102567,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102572,"byte_end":102618,"line_start":241,"line_end":241,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102623,"byte_end":102626,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102631,"byte_end":102677,"line_start":243,"line_end":243,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102682,"byte_end":102728,"line_start":244,"line_end":244,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102733,"byte_end":102740,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102745,"byte_end":102754,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103248,"byte_end":103257,"line_start":266,"line_end":266,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102854,"byte_end":102902,"line_start":251,"line_end":251,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102907,"byte_end":102910,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102915,"byte_end":102928,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102933,"byte_end":102936,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102941,"byte_end":102952,"line_start":255,"line_end":255,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102957,"byte_end":102993,"line_start":256,"line_end":256,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":102998,"byte_end":103012,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103017,"byte_end":103031,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103036,"byte_end":103039,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103044,"byte_end":103090,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103095,"byte_end":103098,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103103,"byte_end":103154,"line_start":262,"line_end":262,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103159,"byte_end":103210,"line_start":263,"line_end":263,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103215,"byte_end":103222,"line_start":264,"line_end":264,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103227,"byte_end":103236,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103626,"byte_end":103634,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103328,"byte_end":103364,"line_start":270,"line_end":270,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103369,"byte_end":103372,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103377,"byte_end":103390,"line_start":272,"line_end":272,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103395,"byte_end":103398,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103403,"byte_end":103414,"line_start":274,"line_end":274,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103419,"byte_end":103455,"line_start":275,"line_end":275,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103460,"byte_end":103474,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103479,"byte_end":103482,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103487,"byte_end":103533,"line_start":278,"line_end":278,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103538,"byte_end":103541,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103546,"byte_end":103588,"line_start":280,"line_end":280,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103593,"byte_end":103600,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103605,"byte_end":103614,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103986,"byte_end":103994,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103689,"byte_end":103724,"line_start":287,"line_end":287,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103729,"byte_end":103732,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103737,"byte_end":103750,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103755,"byte_end":103758,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103763,"byte_end":103774,"line_start":291,"line_end":291,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103779,"byte_end":103815,"line_start":292,"line_end":292,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103820,"byte_end":103834,"line_start":293,"line_end":293,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103839,"byte_end":103842,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103847,"byte_end":103893,"line_start":295,"line_end":295,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103898,"byte_end":103901,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103906,"byte_end":103948,"line_start":297,"line_end":297,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103953,"byte_end":103960,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":103965,"byte_end":103974,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104136,"byte_end":104141,"line_start":306,"line_end":306,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Point2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Point3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d point with z-coordinate equals to zero.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d point with z-coordinate equals to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104049,"byte_end":104110,"line_start":304,"line_end":304,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104115,"byte_end":104124,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104616,"byte_end":104621,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"round","qualname":"<Point2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104254,"byte_end":104309,"line_start":313,"line_end":313,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104314,"byte_end":104317,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104322,"byte_end":104397,"line_start":315,"line_end":315,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104402,"byte_end":104405,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104410,"byte_end":104421,"line_start":317,"line_end":317,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104426,"byte_end":104451,"line_start":318,"line_end":318,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104456,"byte_end":104470,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104475,"byte_end":104478,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).round(), point2::<_, Mm>(0.0, -1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104483,"byte_end":104562,"line_start":321,"line_end":321,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104567,"byte_end":104574,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104579,"byte_end":104588,"line_start":323,"line_end":323,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104593,"byte_end":104604,"line_start":324,"line_end":324,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105124,"byte_end":105128,"line_start":344,"line_end":344,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104728,"byte_end":104819,"line_start":332,"line_end":332,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104824,"byte_end":104827,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104832,"byte_end":104907,"line_start":334,"line_end":334,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104912,"byte_end":104915,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104920,"byte_end":104931,"line_start":336,"line_end":336,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104936,"byte_end":104961,"line_start":337,"line_end":337,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104966,"byte_end":104980,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104985,"byte_end":104988,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).ceil(), point2::<_, Mm>(0.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":104993,"byte_end":105070,"line_start":340,"line_end":340,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105075,"byte_end":105082,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105087,"byte_end":105096,"line_start":342,"line_end":342,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105101,"byte_end":105112,"line_start":343,"line_end":343,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105628,"byte_end":105633,"line_start":363,"line_end":363,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105232,"byte_end":105320,"line_start":351,"line_end":351,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105325,"byte_end":105328,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105333,"byte_end":105408,"line_start":353,"line_end":353,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105413,"byte_end":105416,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105421,"byte_end":105432,"line_start":355,"line_end":355,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105437,"byte_end":105462,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105467,"byte_end":105481,"line_start":357,"line_end":357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105486,"byte_end":105489,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).floor(), point2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105494,"byte_end":105574,"line_start":359,"line_end":359,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105579,"byte_end":105586,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105591,"byte_end":105600,"line_start":361,"line_end":361,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105605,"byte_end":105616,"line_start":362,"line_end":362,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106381,"byte_end":106385,"line_start":388,"line_end":388,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105740,"byte_end":105802,"line_start":370,"line_end":370,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105807,"byte_end":105810,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105815,"byte_end":105828,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105833,"byte_end":105836,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105841,"byte_end":105852,"line_start":374,"line_end":374,"column_start":5,"column_end":16}},{"value":"/ use euclid::point2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105857,"byte_end":105880,"line_start":375,"line_end":375,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105885,"byte_end":105918,"line_start":376,"line_end":376,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105923,"byte_end":105926,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let from: Point2D<_> = point2(0.0, 10.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105931,"byte_end":105976,"line_start":378,"line_end":378,"column_start":5,"column_end":50}},{"value":"/ let to:  Point2D<_> = point2(8.0, -4.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":105981,"byte_end":106025,"line_start":379,"line_end":379,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106030,"byte_end":106033,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point2(-8.0,  24.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106038,"byte_end":106095,"line_start":381,"line_end":381,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point2( 0.0,  10.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106100,"byte_end":106157,"line_start":382,"line_end":382,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point2( 4.0,   3.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106162,"byte_end":106219,"line_start":383,"line_end":383,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point2( 8.0,  -4.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106224,"byte_end":106281,"line_start":384,"line_end":384,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point2(16.0, -18.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106286,"byte_end":106343,"line_start":385,"line_end":385,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106348,"byte_end":106355,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106360,"byte_end":106369,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106687,"byte_end":106690,"line_start":399,"line_end":399,"column_start":12,"column_end":15},"name":"min","qualname":"<Point2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106666,"byte_end":106675,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106811,"byte_end":106814,"line_start":404,"line_end":404,"column_start":12,"column_end":15},"name":"max","qualname":"<Point2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106790,"byte_end":106799,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107108,"byte_end":107113,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106914,"byte_end":106984,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106989,"byte_end":107025,"line_start":409,"line_end":409,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107030,"byte_end":107033,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107038,"byte_end":107082,"line_start":411,"line_end":411,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107087,"byte_end":107096,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107654,"byte_end":107658,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107274,"byte_end":107348,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107353,"byte_end":107356,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107361,"byte_end":107448,"line_start":424,"line_end":424,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107453,"byte_end":107541,"line_start":425,"line_end":425,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107546,"byte_end":107628,"line_start":426,"line_end":426,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107633,"byte_end":107642,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108121,"byte_end":108129,"line_start":437,"line_end":437,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107746,"byte_end":107829,"line_start":432,"line_end":432,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107834,"byte_end":107837,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107842,"byte_end":107929,"line_start":434,"line_end":434,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107934,"byte_end":108022,"line_start":435,"line_end":435,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108027,"byte_end":108109,"line_start":436,"line_end":436,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108444,"byte_end":108450,"line_start":448,"line_end":448,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108389,"byte_end":108418,"line_start":446,"line_end":446,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108423,"byte_end":108432,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108564,"byte_end":108570,"line_start":454,"line_end":454,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108509,"byte_end":108538,"line_start":452,"line_end":452,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108543,"byte_end":108552,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108923,"byte_end":108931,"line_start":464,"line_end":464,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108629,"byte_end":108688,"line_start":458,"line_end":458,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108693,"byte_end":108696,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108701,"byte_end":108777,"line_start":460,"line_end":460,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108782,"byte_end":108856,"line_start":461,"line_end":461,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108861,"byte_end":108897,"line_start":462,"line_end":462,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108902,"byte_end":108911,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109284,"byte_end":109290,"line_start":474,"line_end":474,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":108992,"byte_end":109049,"line_start":468,"line_end":468,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109054,"byte_end":109057,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109062,"byte_end":109138,"line_start":470,"line_end":470,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109143,"byte_end":109217,"line_start":471,"line_end":471,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109222,"byte_end":109258,"line_start":472,"line_end":472,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109263,"byte_end":109272,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109639,"byte_end":109645,"line_start":484,"line_end":484,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109349,"byte_end":109404,"line_start":478,"line_end":478,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109409,"byte_end":109412,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109417,"byte_end":109493,"line_start":480,"line_end":480,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109498,"byte_end":109572,"line_start":481,"line_end":481,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109577,"byte_end":109613,"line_start":482,"line_end":482,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109618,"byte_end":109627,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109994,"byte_end":110000,"line_start":494,"line_end":494,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109704,"byte_end":109759,"line_start":488,"line_end":488,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109764,"byte_end":109767,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109772,"byte_end":109848,"line_start":490,"line_end":490,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109853,"byte_end":109927,"line_start":491,"line_end":491,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109932,"byte_end":109968,"line_start":492,"line_end":492,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":109973,"byte_end":109982,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110164,"byte_end":110173,"line_start":502,"line_end":502,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Point2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110095,"byte_end":110138,"line_start":500,"line_end":500,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110143,"byte_end":110152,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110327,"byte_end":110335,"line_start":509,"line_end":509,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point2D<T, U>>::add_size","value":"pub fn add_size(Self, &Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110306,"byte_end":110315,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110522,"byte_end":110533,"line_start":516,"line_end":516,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point2D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110501,"byte_end":110510,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115808,"byte_end":115815,"line_start":740,"line_end":740,"column_start":12,"column_end":19},"name":"Point3D","qualname":"::point::Point3D","value":"Point3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456}],"decl_id":null,"docs":" A 3d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Point tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115751,"byte_end":115785,"line_start":738,"line_end":738,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115786,"byte_end":115796,"line_start":739,"line_end":739,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115832,"byte_end":115833,"line_start":741,"line_end":741,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point3D::x","value":"T","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1454},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115846,"byte_end":115847,"line_start":742,"line_end":742,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point3D::y","value":"T","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115860,"byte_end":115861,"line_start":743,"line_end":743,"column_start":9,"column_end":10},"name":"z","qualname":"::point::Point3D::z","value":"T","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115893,"byte_end":115898,"line_start":745,"line_end":745,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1450},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118078,"byte_end":118084,"line_start":842,"line_end":842,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point3D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118004,"byte_end":118052,"line_start":840,"line_end":840,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118057,"byte_end":118066,"line_start":841,"line_end":841,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118267,"byte_end":118271,"line_start":851,"line_end":851,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118196,"byte_end":118241,"line_start":849,"line_end":849,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118246,"byte_end":118255,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118427,"byte_end":118430,"line_start":860,"line_end":860,"column_start":18,"column_end":21},"name":"new","qualname":"<Point3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118349,"byte_end":118395,"line_start":858,"line_end":858,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118400,"byte_end":118409,"line_start":859,"line_end":859,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118666,"byte_end":118678,"line_start":871,"line_end":871,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118575,"byte_end":118640,"line_start":869,"line_end":869,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118645,"byte_end":118654,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118864,"byte_end":118869,"line_start":877,"line_end":877,"column_start":12,"column_end":17},"name":"splat","qualname":"<Point3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118781,"byte_end":118838,"line_start":875,"line_end":875,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":118843,"byte_end":118852,"line_start":876,"line_end":876,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119121,"byte_end":119133,"line_start":891,"line_end":891,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point3D<T, U>>::from_untyped","value":"pub fn from_untyped(Point3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119059,"byte_end":119095,"line_start":889,"line_end":889,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119100,"byte_end":119109,"line_start":890,"line_end":890,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119376,"byte_end":119385,"line_start":901,"line_end":901,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119248,"byte_end":119282,"line_start":897,"line_end":897,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119287,"byte_end":119290,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin to this point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119295,"byte_end":119350,"line_start":899,"line_end":899,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119355,"byte_end":119364,"line_start":900,"line_end":900,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119640,"byte_end":119642,"line_start":912,"line_end":912,"column_start":12,"column_end":14},"name":"xy","qualname":"<Point3D<T, U>>::xy","value":"pub fn xy(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and y coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119553,"byte_end":119614,"line_start":910,"line_end":910,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119619,"byte_end":119628,"line_start":911,"line_end":911,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119797,"byte_end":119799,"line_start":918,"line_end":918,"column_start":12,"column_end":14},"name":"xz","qualname":"<Point3D<T, U>>::xz","value":"pub fn xz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119710,"byte_end":119771,"line_start":916,"line_end":916,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119776,"byte_end":119785,"line_start":917,"line_end":917,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119954,"byte_end":119956,"line_start":924,"line_end":924,"column_start":12,"column_end":14},"name":"yz","qualname":"<Point3D<T, U>>::yz","value":"pub fn yz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119867,"byte_end":119928,"line_start":922,"line_end":922,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119933,"byte_end":119942,"line_start":923,"line_end":923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120331,"byte_end":120339,"line_start":941,"line_end":941,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120024,"byte_end":120063,"line_start":928,"line_end":928,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120068,"byte_end":120071,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120076,"byte_end":120089,"line_start":930,"line_end":930,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120094,"byte_end":120097,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120102,"byte_end":120113,"line_start":932,"line_end":932,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120118,"byte_end":120154,"line_start":933,"line_end":933,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120159,"byte_end":120173,"line_start":934,"line_end":934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120178,"byte_end":120181,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120186,"byte_end":120235,"line_start":936,"line_end":936,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120240,"byte_end":120243,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8, 0]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120248,"byte_end":120293,"line_start":938,"line_end":938,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120298,"byte_end":120305,"line_start":939,"line_end":939,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120310,"byte_end":120319,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120423,"byte_end":120434,"line_start":946,"line_end":946,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Point3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120402,"byte_end":120411,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120845,"byte_end":120853,"line_start":966,"line_end":966,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120539,"byte_end":120577,"line_start":953,"line_end":953,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120582,"byte_end":120585,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120590,"byte_end":120603,"line_start":955,"line_end":955,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120608,"byte_end":120611,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120616,"byte_end":120627,"line_start":957,"line_end":957,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120632,"byte_end":120668,"line_start":958,"line_end":958,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120673,"byte_end":120687,"line_start":959,"line_end":959,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120692,"byte_end":120695,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120700,"byte_end":120749,"line_start":961,"line_end":961,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120754,"byte_end":120757,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8, 0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120762,"byte_end":120807,"line_start":963,"line_end":963,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120812,"byte_end":120819,"line_start":964,"line_end":964,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120824,"byte_end":120833,"line_start":965,"line_end":965,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120940,"byte_end":120951,"line_start":971,"line_end":971,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Point3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":120919,"byte_end":120928,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121487,"byte_end":121497,"line_start":993,"line_end":993,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121062,"byte_end":121116,"line_start":978,"line_end":978,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121121,"byte_end":121124,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121129,"byte_end":121142,"line_start":980,"line_end":980,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121147,"byte_end":121150,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121155,"byte_end":121166,"line_start":982,"line_end":982,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121171,"byte_end":121207,"line_start":983,"line_end":983,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121212,"byte_end":121226,"line_start":984,"line_end":984,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121231,"byte_end":121234,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121239,"byte_end":121288,"line_start":986,"line_end":986,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121293,"byte_end":121296,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121301,"byte_end":121347,"line_start":988,"line_end":988,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121352,"byte_end":121398,"line_start":989,"line_end":989,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.z, point.to_untyped().z);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121403,"byte_end":121449,"line_start":990,"line_end":990,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121454,"byte_end":121461,"line_start":991,"line_end":991,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121466,"byte_end":121475,"line_start":992,"line_end":992,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122036,"byte_end":122045,"line_start":1013,"line_end":1013,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121583,"byte_end":121631,"line_start":997,"line_end":997,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121636,"byte_end":121639,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121644,"byte_end":121657,"line_start":999,"line_end":999,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121662,"byte_end":121665,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121670,"byte_end":121681,"line_start":1001,"line_end":1001,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121686,"byte_end":121722,"line_start":1002,"line_end":1002,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121727,"byte_end":121741,"line_start":1003,"line_end":1003,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121746,"byte_end":121760,"line_start":1004,"line_end":1004,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121765,"byte_end":121768,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121773,"byte_end":121822,"line_start":1006,"line_end":1006,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121827,"byte_end":121830,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121835,"byte_end":121886,"line_start":1008,"line_end":1008,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121891,"byte_end":121942,"line_start":1009,"line_end":1009,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.z, point.cast_unit::<Cm>().z);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":121947,"byte_end":121998,"line_start":1010,"line_end":1010,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122003,"byte_end":122010,"line_start":1011,"line_end":1011,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122015,"byte_end":122024,"line_start":1012,"line_end":1012,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122178,"byte_end":122183,"line_start":1019,"line_end":1019,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Point3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d point.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122124,"byte_end":122152,"line_start":1017,"line_end":1017,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122157,"byte_end":122166,"line_start":1018,"line_end":1018,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122610,"byte_end":122615,"line_start":1035,"line_end":1035,"column_start":12,"column_end":17},"name":"round","qualname":"<Point3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122238,"byte_end":122293,"line_start":1023,"line_end":1023,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122298,"byte_end":122301,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122306,"byte_end":122381,"line_start":1025,"line_end":1025,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122386,"byte_end":122389,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122394,"byte_end":122405,"line_start":1027,"line_end":1027,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122410,"byte_end":122435,"line_start":1028,"line_end":1028,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122440,"byte_end":122454,"line_start":1029,"line_end":1029,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122459,"byte_end":122462,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).round(), point3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122467,"byte_end":122556,"line_start":1031,"line_end":1031,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122561,"byte_end":122568,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122573,"byte_end":122582,"line_start":1033,"line_end":1033,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122587,"byte_end":122598,"line_start":1034,"line_end":1034,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123144,"byte_end":123148,"line_start":1054,"line_end":1054,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122738,"byte_end":122829,"line_start":1042,"line_end":1042,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122834,"byte_end":122837,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122842,"byte_end":122917,"line_start":1044,"line_end":1044,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122922,"byte_end":122925,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122930,"byte_end":122941,"line_start":1046,"line_end":1046,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122946,"byte_end":122971,"line_start":1047,"line_end":1047,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122976,"byte_end":122990,"line_start":1048,"line_end":1048,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":122995,"byte_end":122998,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), point3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123003,"byte_end":123090,"line_start":1050,"line_end":1050,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123095,"byte_end":123102,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123107,"byte_end":123116,"line_start":1052,"line_end":1052,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123121,"byte_end":123132,"line_start":1053,"line_end":1053,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123673,"byte_end":123678,"line_start":1073,"line_end":1073,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123267,"byte_end":123355,"line_start":1061,"line_end":1061,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123360,"byte_end":123363,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123368,"byte_end":123443,"line_start":1063,"line_end":1063,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123448,"byte_end":123451,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123456,"byte_end":123467,"line_start":1065,"line_end":1065,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123472,"byte_end":123497,"line_start":1066,"line_end":1066,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123502,"byte_end":123516,"line_start":1067,"line_end":1067,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123521,"byte_end":123524,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).floor(), point3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123529,"byte_end":123619,"line_start":1069,"line_end":1069,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123624,"byte_end":123631,"line_start":1070,"line_end":1070,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123636,"byte_end":123645,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123650,"byte_end":123661,"line_start":1072,"line_end":1072,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124484,"byte_end":124488,"line_start":1098,"line_end":1098,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123801,"byte_end":123863,"line_start":1080,"line_end":1080,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123868,"byte_end":123871,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123876,"byte_end":123889,"line_start":1082,"line_end":1082,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123894,"byte_end":123897,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123902,"byte_end":123913,"line_start":1084,"line_end":1084,"column_start":5,"column_end":16}},{"value":"/ use euclid::point3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123918,"byte_end":123941,"line_start":1085,"line_end":1085,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123946,"byte_end":123979,"line_start":1086,"line_end":1086,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123984,"byte_end":123987,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ let from: Point3D<_> = point3(0.0, 10.0, -1.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":123992,"byte_end":124043,"line_start":1088,"line_end":1088,"column_start":5,"column_end":56}},{"value":"/ let to:  Point3D<_> = point3(8.0, -4.0,  0.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124048,"byte_end":124098,"line_start":1089,"line_end":1089,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124103,"byte_end":124106,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point3(-8.0,  24.0, -2.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124111,"byte_end":124174,"line_start":1091,"line_end":1091,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point3( 0.0,  10.0, -1.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124179,"byte_end":124242,"line_start":1092,"line_end":1092,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point3( 4.0,   3.0, -0.5));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124247,"byte_end":124310,"line_start":1093,"line_end":1093,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point3( 8.0,  -4.0,  0.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124315,"byte_end":124378,"line_start":1094,"line_end":1094,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point3(16.0, -18.0,  1.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124383,"byte_end":124446,"line_start":1095,"line_end":1095,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124451,"byte_end":124458,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124463,"byte_end":124472,"line_start":1097,"line_end":1097,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124867,"byte_end":124870,"line_start":1113,"line_end":1113,"column_start":12,"column_end":15},"name":"min","qualname":"<Point3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124846,"byte_end":124855,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125060,"byte_end":125063,"line_start":1122,"line_end":1122,"column_start":12,"column_end":15},"name":"max","qualname":"<Point3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125039,"byte_end":125048,"line_start":1121,"line_end":1121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125426,"byte_end":125431,"line_start":1135,"line_end":1135,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125232,"byte_end":125302,"line_start":1130,"line_end":1130,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125307,"byte_end":125343,"line_start":1131,"line_end":1131,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125348,"byte_end":125351,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125356,"byte_end":125400,"line_start":1133,"line_end":1133,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125405,"byte_end":125414,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125972,"byte_end":125976,"line_start":1150,"line_end":1150,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125592,"byte_end":125666,"line_start":1144,"line_end":1144,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125671,"byte_end":125674,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125679,"byte_end":125766,"line_start":1146,"line_end":1146,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125771,"byte_end":125859,"line_start":1147,"line_end":1147,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125864,"byte_end":125946,"line_start":1148,"line_end":1148,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125951,"byte_end":125960,"line_start":1149,"line_end":1149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126439,"byte_end":126447,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126064,"byte_end":126147,"line_start":1154,"line_end":1154,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126152,"byte_end":126155,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126160,"byte_end":126247,"line_start":1156,"line_end":1156,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126252,"byte_end":126340,"line_start":1157,"line_end":1157,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126345,"byte_end":126427,"line_start":1158,"line_end":1158,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126844,"byte_end":126850,"line_start":1174,"line_end":1174,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126789,"byte_end":126818,"line_start":1172,"line_end":1172,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126823,"byte_end":126832,"line_start":1173,"line_end":1173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126964,"byte_end":126970,"line_start":1180,"line_end":1180,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126909,"byte_end":126938,"line_start":1178,"line_end":1178,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":126943,"byte_end":126952,"line_start":1179,"line_end":1179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127323,"byte_end":127331,"line_start":1190,"line_end":1190,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127029,"byte_end":127088,"line_start":1184,"line_end":1184,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127093,"byte_end":127096,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127101,"byte_end":127177,"line_start":1186,"line_end":1186,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127182,"byte_end":127256,"line_start":1187,"line_end":1187,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127261,"byte_end":127297,"line_start":1188,"line_end":1188,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127302,"byte_end":127311,"line_start":1189,"line_end":1189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127684,"byte_end":127690,"line_start":1200,"line_end":1200,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127392,"byte_end":127449,"line_start":1194,"line_end":1194,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127454,"byte_end":127457,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127462,"byte_end":127538,"line_start":1196,"line_end":1196,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127543,"byte_end":127617,"line_start":1197,"line_end":1197,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127622,"byte_end":127658,"line_start":1198,"line_end":1198,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127663,"byte_end":127672,"line_start":1199,"line_end":1199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128041,"byte_end":128047,"line_start":1210,"line_end":1210,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127749,"byte_end":127806,"line_start":1204,"line_end":1204,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127811,"byte_end":127814,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127819,"byte_end":127895,"line_start":1206,"line_end":1206,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127900,"byte_end":127974,"line_start":1207,"line_end":1207,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":127979,"byte_end":128015,"line_start":1208,"line_end":1208,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128020,"byte_end":128029,"line_start":1209,"line_end":1209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128398,"byte_end":128404,"line_start":1220,"line_end":1220,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` point, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128106,"byte_end":128163,"line_start":1214,"line_end":1214,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128168,"byte_end":128171,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128176,"byte_end":128252,"line_start":1216,"line_end":1216,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128257,"byte_end":128331,"line_start":1217,"line_end":1217,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128336,"byte_end":128372,"line_start":1218,"line_end":1218,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128377,"byte_end":128386,"line_start":1219,"line_end":1219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128568,"byte_end":128577,"line_start":1228,"line_end":1228,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Point3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128499,"byte_end":128542,"line_start":1226,"line_end":1226,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128547,"byte_end":128556,"line_start":1227,"line_end":1227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128753,"byte_end":128761,"line_start":1235,"line_end":1235,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point3D<T, U>>::add_size","value":"pub fn add_size(Self, Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128732,"byte_end":128741,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129016,"byte_end":129027,"line_start":1246,"line_end":1246,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point3D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128995,"byte_end":129004,"line_start":1245,"line_end":1245,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":135020,"byte_end":135026,"line_start":1504,"line_end":1504,"column_start":14,"column_end":20},"name":"point2","qualname":"::point::point2","value":"pub const fn point2<T, U>(T, T) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point2D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point2D::new(x, y)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134957,"byte_end":134996,"line_start":1502,"line_end":1502,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134997,"byte_end":135006,"line_start":1503,"line_end":1503,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":135200,"byte_end":135206,"line_start":1514,"line_end":1514,"column_start":14,"column_end":20},"name":"point3","qualname":"::point::point3","value":"pub const fn point3<T, U>(T, T, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point3D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point3D::new(x, y)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":135137,"byte_end":135176,"line_start":1512,"line_end":1512,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":135177,"byte_end":135186,"line_start":1513,"line_end":1513,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1744},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150163,"byte_end":150167,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect { origin, size }","parent":null,"children":[{"krate":0,"index":1747},{"krate":0,"index":1748}],"decl_id":null,"docs":" A 2d Rectangle optionally tagged with a unit.","sig":null,"attributes":[{"value":"/ A 2d Rectangle optionally tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149454,"byte_end":149503,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149504,"byte_end":149507,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149508,"byte_end":149528,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149529,"byte_end":149532,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ `Rect` is represented by an origin point and a size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149533,"byte_end":149589,"line_start":35,"line_end":35,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149590,"byte_end":149593,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ See [`Box2D`] for a rectangle represented by two endpoints.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149594,"byte_end":149657,"line_start":37,"line_end":37,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149658,"byte_end":149661,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Empty rectangle","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149662,"byte_end":149683,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149684,"byte_end":149687,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ A rectangle is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149688,"byte_end":149775,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/ - it's area is empty,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149776,"byte_end":149801,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`size.x < 0` or `size.y < 0`),","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149802,"byte_end":149861,"line_start":43,"line_end":43,"column_start":1,"column_end":60}},{"value":"/ - it contains NaNs.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149862,"byte_end":149885,"line_start":44,"line_end":44,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149886,"byte_end":149889,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149890,"byte_end":149924,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149925,"byte_end":149957,"line_start":47,"line_end":47,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":149958,"byte_end":149968,"line_start":48,"line_end":48,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150184,"byte_end":150190,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"name":"origin","qualname":"::rect::Rect::origin","value":"point::Point2D<T, U>","parent":{"krate":0,"index":1744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1748},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150215,"byte_end":150219,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"size","qualname":"::rect::Rect::size","value":"size::Size2D<T, U>","parent":{"krate":0,"index":1744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151789,"byte_end":151792,"line_start":122,"line_end":122,"column_start":18,"column_end":21},"name":"new","qualname":"<Rect<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151741,"byte_end":151757,"line_start":120,"line_end":120,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151762,"byte_end":151771,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152001,"byte_end":152005,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"zero","qualname":"<Rect<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151932,"byte_end":151975,"line_start":131,"line_end":131,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151980,"byte_end":151989,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152161,"byte_end":152170,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Rect<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rect of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a rect of the given size, at offset zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152082,"byte_end":152135,"line_start":137,"line_end":137,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152140,"byte_end":152149,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152379,"byte_end":152382,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"min","qualname":"<Rect<T, U>>::min","value":"pub fn min(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152358,"byte_end":152367,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152461,"byte_end":152464,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"max","qualname":"<Rect<T, U>>::max","value":"pub fn max(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152440,"byte_end":152449,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152555,"byte_end":152560,"line_start":162,"line_end":162,"column_start":12,"column_end":17},"name":"max_x","qualname":"<Rect<T, U>>::max_x","value":"pub fn max_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152534,"byte_end":152543,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152647,"byte_end":152652,"line_start":167,"line_end":167,"column_start":12,"column_end":17},"name":"min_x","qualname":"<Rect<T, U>>::min_x","value":"pub fn min_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152626,"byte_end":152635,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152721,"byte_end":152726,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"max_y","qualname":"<Rect<T, U>>::max_y","value":"pub fn max_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152700,"byte_end":152709,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152814,"byte_end":152819,"line_start":177,"line_end":177,"column_start":12,"column_end":17},"name":"min_y","qualname":"<Rect<T, U>>::min_y","value":"pub fn min_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152793,"byte_end":152802,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152888,"byte_end":152893,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152867,"byte_end":152876,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152964,"byte_end":152970,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152943,"byte_end":152952,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153042,"byte_end":153049,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Rect<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153021,"byte_end":153030,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153138,"byte_end":153145,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Rect<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153117,"byte_end":153126,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153310,"byte_end":153319,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"translate","qualname":"<Rect<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same rectangle, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same rectangle, translated by a vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153213,"byte_end":153268,"line_start":201,"line_end":201,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153273,"byte_end":153282,"line_start":202,"line_end":202,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153287,"byte_end":153298,"line_start":203,"line_end":203,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153436,"byte_end":153444,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"to_box2d","qualname":"<Rect<T, U>>::to_box2d","value":"pub fn to_box2d(&Self) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153415,"byte_end":153424,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153868,"byte_end":153876,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"contains","qualname":"<Rect<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the point. Points are considered\n in the rectangle if they are on the left or top edge, but outside if they\n are on the right or bottom edge.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the point. Points are considered","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153643,"byte_end":153719,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/ in the rectangle if they are on the left or top edge, but outside if they","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153724,"byte_end":153801,"line_start":222,"line_end":222,"column_start":5,"column_end":82}},{"value":"/ are on the right or bottom edge.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153806,"byte_end":153842,"line_start":223,"line_end":223,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153847,"byte_end":153856,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153980,"byte_end":153990,"line_start":230,"line_end":230,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Rect<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153959,"byte_end":153968,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154208,"byte_end":154220,"line_start":240,"line_end":240,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Rect<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154187,"byte_end":154196,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154571,"byte_end":154578,"line_start":257,"line_end":257,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Rect<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154534,"byte_end":154543,"line_start":255,"line_end":255,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154548,"byte_end":154559,"line_start":256,"line_end":256,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155176,"byte_end":155189,"line_start":276,"line_end":276,"column_start":12,"column_end":25},"name":"contains_rect","qualname":"<Rect<T, U>>::contains_rect","value":"pub fn contains_rect(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the interior of rect. Always\n returns true if rect is empty, and always returns false if rect is\n nonempty but this rectangle is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the interior of rect. Always","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154957,"byte_end":155029,"line_start":272,"line_end":272,"column_start":5,"column_end":77}},{"value":"/ returns true if rect is empty, and always returns false if rect is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155034,"byte_end":155104,"line_start":273,"line_end":273,"column_start":5,"column_end":75}},{"value":"/ nonempty but this rectangle is empty.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155109,"byte_end":155150,"line_start":274,"line_end":274,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155155,"byte_end":155164,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155824,"byte_end":155834,"line_start":294,"line_end":294,"column_start":12,"column_end":22},"name":"inner_rect","qualname":"<Rect<T, U>>::inner_rect","value":"pub fn inner_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155552,"byte_end":155610,"line_start":289,"line_end":289,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155615,"byte_end":155618,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal and vertical","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155623,"byte_end":155697,"line_start":291,"line_end":291,"column_start":5,"column_end":79}},{"value":"/ offsets must not be larger than the original side length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155702,"byte_end":155763,"line_start":292,"line_end":292,"column_start":5,"column_end":66}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155768,"byte_end":155812,"line_start":293,"line_end":293,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156584,"byte_end":156594,"line_start":316,"line_end":316,"column_start":12,"column_end":22},"name":"outer_rect","qualname":"<Rect<T, U>>::outer_rect","value":"pub fn outer_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an outer rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an outer rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156383,"byte_end":156441,"line_start":312,"line_end":312,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156446,"byte_end":156449,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded rectangle is returned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156454,"byte_end":156523,"line_start":314,"line_end":314,"column_start":5,"column_end":74}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156528,"byte_end":156572,"line_start":315,"line_end":315,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157564,"byte_end":157575,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Rect<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest rectangle defined by the top/bottom/left/right-most\n points provided as parameter.","sig":null,"attributes":[{"value":"/ Returns the smallest rectangle defined by the top/bottom/left/right-most","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157004,"byte_end":157080,"line_start":331,"line_end":331,"column_start":5,"column_end":81}},{"value":"/ points provided as parameter.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157085,"byte_end":157118,"line_start":332,"line_end":332,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157123,"byte_end":157126,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Note: This function has a behavior that can be surprising because","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157131,"byte_end":157200,"line_start":334,"line_end":334,"column_start":5,"column_end":74}},{"value":"/ the right-most and bottom-most points are exactly on the edge","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157205,"byte_end":157270,"line_start":335,"line_end":335,"column_start":5,"column_end":70}},{"value":"/ of the rectangle while the `contains` function is has exclusive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157275,"byte_end":157342,"line_start":336,"line_end":336,"column_start":5,"column_end":72}},{"value":"/ semantic on these edges. This means that the right-most and bottom-most","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157347,"byte_end":157422,"line_start":337,"line_end":337,"column_start":5,"column_end":80}},{"value":"/ points provided to `from_points` will count as not contained by the rect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157427,"byte_end":157504,"line_start":338,"line_end":338,"column_start":5,"column_end":82}},{"value":"/ This behavior may change in the future.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157509,"byte_end":157552,"line_start":339,"line_end":339,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157936,"byte_end":157940,"line_start":355,"line_end":355,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rect<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this rectangle and another rectangle.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this rectangle and another rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157840,"byte_end":157910,"line_start":353,"line_end":353,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157915,"byte_end":157924,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158201,"byte_end":158207,"line_start":367,"line_end":367,"column_start":12,"column_end":18},"name":"center","qualname":"<Rect<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158462,"byte_end":158467,"line_start":378,"line_end":378,"column_start":12,"column_end":17},"name":"union","qualname":"<Rect<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158441,"byte_end":158450,"line_start":377,"line_end":377,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158616,"byte_end":158621,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"scale","qualname":"<Rect<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Copy + Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158595,"byte_end":158604,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158958,"byte_end":158962,"line_start":398,"line_end":398,"column_start":12,"column_end":16},"name":"area","qualname":"<Rect<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158937,"byte_end":158946,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159086,"byte_end":159094,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Rect<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159065,"byte_end":159074,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159225,"byte_end":159237,"line_start":412,"line_end":412,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Rect<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159204,"byte_end":159213,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161165,"byte_end":161175,"line_start":490,"line_end":490,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rect<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161085,"byte_end":161139,"line_start":488,"line_end":488,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161144,"byte_end":161153,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161350,"byte_end":161362,"line_start":496,"line_end":496,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rect<T, U>>::from_untyped","value":"pub fn from_untyped(&Rect<T, UnknownUnit>) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161288,"byte_end":161324,"line_start":494,"line_end":494,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161329,"byte_end":161338,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161575,"byte_end":161584,"line_start":505,"line_end":505,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rect<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Rect<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161532,"byte_end":161549,"line_start":503,"line_end":503,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161554,"byte_end":161563,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162110,"byte_end":162114,"line_start":517,"line_end":517,"column_start":12,"column_end":16},"name":"cast","qualname":"<Rect<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Rect<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161730,"byte_end":161804,"line_start":511,"line_end":511,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161809,"byte_end":161812,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161817,"byte_end":161904,"line_start":513,"line_end":513,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161909,"byte_end":161997,"line_start":514,"line_end":514,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162002,"byte_end":162084,"line_start":515,"line_end":515,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162089,"byte_end":162098,"line_start":516,"line_end":516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162598,"byte_end":162606,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Rect<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Rect<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162223,"byte_end":162306,"line_start":521,"line_end":521,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162311,"byte_end":162314,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162319,"byte_end":162406,"line_start":523,"line_end":523,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162411,"byte_end":162499,"line_start":524,"line_end":524,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162504,"byte_end":162586,"line_start":525,"line_end":525,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1911},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162942,"byte_end":162948,"line_start":537,"line_end":537,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Rect<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Rect<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162883,"byte_end":162916,"line_start":535,"line_end":535,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":162921,"byte_end":162930,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1912},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163064,"byte_end":163070,"line_start":543,"line_end":543,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Rect<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Rect<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163005,"byte_end":163038,"line_start":541,"line_end":541,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163043,"byte_end":163052,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163437,"byte_end":163445,"line_start":553,"line_end":553,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Rect<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Rect<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` rectangle, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163127,"byte_end":163190,"line_start":547,"line_end":547,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163195,"byte_end":163198,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163203,"byte_end":163283,"line_start":549,"line_end":549,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163288,"byte_end":163363,"line_start":550,"line_end":550,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163368,"byte_end":163411,"line_start":551,"line_end":551,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163416,"byte_end":163425,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163812,"byte_end":163818,"line_start":563,"line_end":563,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Rect<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Rect<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` rectangle, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163504,"byte_end":163565,"line_start":557,"line_end":557,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163570,"byte_end":163573,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163578,"byte_end":163658,"line_start":559,"line_end":559,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163663,"byte_end":163738,"line_start":560,"line_end":560,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163743,"byte_end":163786,"line_start":561,"line_end":561,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163791,"byte_end":163800,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164183,"byte_end":164189,"line_start":573,"line_end":573,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Rect<T, U>>::to_u64","value":"pub fn to_u64(&Self) -> Rect<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` rectangle, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163875,"byte_end":163936,"line_start":567,"line_end":567,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163941,"byte_end":163944,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":163949,"byte_end":164029,"line_start":569,"line_end":569,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164034,"byte_end":164109,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164114,"byte_end":164157,"line_start":571,"line_end":571,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164162,"byte_end":164171,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164554,"byte_end":164560,"line_start":583,"line_end":583,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Rect<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Rect<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` rectangle, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164246,"byte_end":164307,"line_start":577,"line_end":577,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164312,"byte_end":164315,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164320,"byte_end":164400,"line_start":579,"line_end":579,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164405,"byte_end":164480,"line_start":580,"line_end":580,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164485,"byte_end":164528,"line_start":581,"line_end":581,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164533,"byte_end":164542,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164925,"byte_end":164931,"line_start":593,"line_end":593,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Rect<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Rect<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` rectangle, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164617,"byte_end":164678,"line_start":587,"line_end":587,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164683,"byte_end":164686,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164691,"byte_end":164771,"line_start":589,"line_end":589,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164776,"byte_end":164851,"line_start":590,"line_end":590,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164856,"byte_end":164899,"line_start":591,"line_end":591,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":164904,"byte_end":164913,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165090,"byte_end":165099,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Rect<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165021,"byte_end":165064,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165069,"byte_end":165078,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166122,"byte_end":166127,"line_start":624,"line_end":624,"column_start":12,"column_end":17},"name":"round","qualname":"<Rect<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the returned rectangle has the same set of pixel centers as the original\n one.\n Edges at offset 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165274,"byte_end":165349,"line_start":607,"line_end":607,"column_start":5,"column_end":80}},{"value":"/ the returned rectangle has the same set of pixel centers as the original","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165354,"byte_end":165430,"line_start":608,"line_end":608,"column_start":5,"column_end":81}},{"value":"/ one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165435,"byte_end":165443,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ Edges at offset 0.5 round up.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165448,"byte_end":165481,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165486,"byte_end":165548,"line_start":611,"line_end":611,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165553,"byte_end":165625,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165630,"byte_end":165662,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165667,"byte_end":165750,"line_start":614,"line_end":614,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165755,"byte_end":165802,"line_start":615,"line_end":615,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165807,"byte_end":165810,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165815,"byte_end":165832,"line_start":617,"line_end":617,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165837,"byte_end":165922,"line_start":618,"line_end":618,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165927,"byte_end":166013,"line_start":619,"line_end":619,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166018,"byte_end":166049,"line_start":620,"line_end":620,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166054,"byte_end":166057,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166062,"byte_end":166094,"line_start":622,"line_end":622,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166099,"byte_end":166110,"line_start":623,"line_end":623,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166658,"byte_end":166666,"line_start":638,"line_end":638,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Rect<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle contains the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166198,"byte_end":166273,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/ the original rectangle contains the resulting rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166278,"byte_end":166338,"line_start":629,"line_end":629,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166343,"byte_end":166346,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166351,"byte_end":166368,"line_start":631,"line_end":631,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166373,"byte_end":166458,"line_start":632,"line_end":632,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166463,"byte_end":166549,"line_start":633,"line_end":633,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166554,"byte_end":166585,"line_start":634,"line_end":634,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166590,"byte_end":166593,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166598,"byte_end":166630,"line_start":636,"line_end":636,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166635,"byte_end":166646,"line_start":637,"line_end":637,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1927},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167207,"byte_end":167216,"line_start":652,"line_end":652,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Rect<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle is contained in the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166740,"byte_end":166815,"line_start":642,"line_end":642,"column_start":5,"column_end":80}},{"value":"/ the original rectangle is contained in the resulting rectangle.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166820,"byte_end":166887,"line_start":643,"line_end":643,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166892,"byte_end":166895,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166900,"byte_end":166917,"line_start":645,"line_end":645,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":166922,"byte_end":167007,"line_start":646,"line_end":646,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167012,"byte_end":167098,"line_start":647,"line_end":647,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167103,"byte_end":167134,"line_start":648,"line_end":648,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167139,"byte_end":167142,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167147,"byte_end":167179,"line_start":650,"line_end":650,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167184,"byte_end":167195,"line_start":651,"line_end":651,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167519,"byte_end":167523,"line_start":667,"line_end":667,"column_start":14,"column_end":18},"name":"rect","qualname":"::rect::rect","value":"pub const fn rect<T, U>(T, T, T, T) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167436,"byte_end":167505,"line_start":666,"line_end":666,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":4672},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177767,"byte_end":177783,"line_start":25,"line_end":25,"column_start":12,"column_end":28},"name":"RigidTransform3D","qualname":"::rigid::RigidTransform3D","value":"RigidTransform3D { rotation, translation }","parent":null,"children":[{"krate":0,"index":4676},{"krate":0,"index":4677}],"decl_id":null,"docs":" A rigid transformation. All lengths are preserved under such a transformation.","sig":null,"attributes":[{"value":"/ A rigid transformation. All lengths are preserved under such a transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177272,"byte_end":177354,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177355,"byte_end":177358,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177359,"byte_end":177362,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Internally, this is a rotation and a translation, with the rotation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177363,"byte_end":177434,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ applied first (i.e. `Rotation * Translation`, in row-vector notation)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177435,"byte_end":177508,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177509,"byte_end":177512,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This can be more efficient to use over full matrices, especially if you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177513,"byte_end":177588,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ have to deal with the decomposed quantities often.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177589,"byte_end":177643,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177745,"byte_end":177755,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4676},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177807,"byte_end":177815,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"name":"rotation","qualname":"::rigid::RigidTransform3D::rotation","value":"rotation::Rotation3D<T, Src, Dst>","parent":{"krate":0,"index":4672},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4677},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177850,"byte_end":177861,"line_start":27,"line_end":27,"column_start":9,"column_end":20},"name":"translation","qualname":"::rigid::RigidTransform3D::translation","value":"vector::Vector3D<T, Dst>","parent":{"krate":0,"index":4672},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178046,"byte_end":178049,"line_start":33,"line_end":33,"column_start":18,"column_end":21},"name":"new","qualname":"<RigidTransform3D<T, Src, Dst>>::new","value":"pub const fn new(Rotation3D<T, Src, Dst>, Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `rotation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `rotation` applies first","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177938,"byte_end":178014,"line_start":31,"line_end":31,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178019,"byte_end":178028,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178274,"byte_end":178283,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<RigidTransform3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> RigidTransform3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178625,"byte_end":178633,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"identity","qualname":"<RigidTransform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an identity transform\n","sig":null,"attributes":[{"value":"/ Construct an identity transform","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178564,"byte_end":178599,"line_start":51,"line_end":51,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178604,"byte_end":178613,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178876,"byte_end":178893,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"name":"new_from_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::new_from_reversed","value":"pub fn new_from_reversed(Vector3D<T, Src>, Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `translation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `translation` applies first","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178771,"byte_end":178850,"line_start":60,"line_end":60,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178855,"byte_end":178864,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179451,"byte_end":179464,"line_start":83,"line_end":83,"column_start":12,"column_end":25},"name":"from_rotation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_rotation","value":"pub fn from_rotation(Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179430,"byte_end":179439,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179632,"byte_end":179648,"line_start":91,"line_end":91,"column_start":12,"column_end":28},"name":"from_translation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_translation","value":"pub fn from_translation(Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179611,"byte_end":179620,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179969,"byte_end":179987,"line_start":102,"line_end":102,"column_start":12,"column_end":30},"name":"decompose_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::decompose_reversed","value":"pub fn decompose_reversed(&Self)\n-> (Vector3D<T, Src>, Rotation3D<T, Src, Dst>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose this into a translation and an rotation to be applied in the opposite order","sig":null,"attributes":[{"value":"/ Decompose this into a translation and an rotation to be applied in the opposite order","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179797,"byte_end":179886,"line_start":98,"line_end":98,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179891,"byte_end":179894,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ i.e., the translation is applied _first_","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179899,"byte_end":179943,"line_start":100,"line_end":100,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":179948,"byte_end":179957,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":180599,"byte_end":180603,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"then","qualname":"<RigidTransform3D<T, Src, Dst>>::then","value":"pub fn then<Dst2>(&Self, &RigidTransform3D<T, Dst, Dst2>)\n-> RigidTransform3D<T, Src, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two transforms such that\n other's transformation applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two transforms such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":180369,"byte_end":180431,"line_start":114,"line_end":114,"column_start":5,"column_end":67}},{"value":"/ other's transformation applies after self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":180436,"byte_end":180499,"line_start":115,"line_end":115,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":180504,"byte_end":180507,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ i.e., this produces `self * other` in row-vector notation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":180512,"byte_end":180573,"line_start":117,"line_end":117,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":180578,"byte_end":180587,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":181493,"byte_end":181500,"line_start":146,"line_end":146,"column_start":12,"column_end":19},"name":"inverse","qualname":"<RigidTransform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> RigidTransform3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation\n","sig":null,"attributes":[{"value":"/ Inverts the transformation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":181437,"byte_end":181467,"line_start":144,"line_end":144,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":181472,"byte_end":181481,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182051,"byte_end":182063,"line_start":162,"line_end":162,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182299,"byte_end":182309,"line_start":171,"line_end":171,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182219,"byte_end":182273,"line_start":169,"line_end":169,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182278,"byte_end":182287,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182584,"byte_end":182596,"line_start":180,"line_end":180,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&RigidTransform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182522,"byte_end":182558,"line_start":178,"line_end":178,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182563,"byte_end":182572,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187478,"byte_end":187488,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"Rotation2D","qualname":"::rotation::Rotation2D","value":"Rotation2D { angle, _unit }","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093}],"decl_id":null,"docs":" A transform that can represent rotations in 2d, represented as an angle in radians.\n","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 2d, represented as an angle in radians.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187149,"byte_end":187236,"line_start":26,"line_end":26,"column_start":1,"column_end":88}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187237,"byte_end":187247,"line_start":27,"line_end":27,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187537,"byte_end":187542,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"angle","qualname":"::rotation::Rotation2D::angle","value":"T","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" Angle in radians\n","sig":null,"attributes":[{"value":"/ Angle in radians","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187508,"byte_end":187528,"line_start":37,"line_end":37,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187574,"byte_end":187579,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188607,"byte_end":188610,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation2D<T, Src, Dst>>::new","value":"pub fn new(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188533,"byte_end":188581,"line_start":81,"line_end":81,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188586,"byte_end":188595,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188806,"byte_end":188813,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"radians","qualname":"<Rotation2D<T, Src, Dst>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188746,"byte_end":188794,"line_start":90,"line_end":90,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188946,"byte_end":188954,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188886,"byte_end":188920,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188925,"byte_end":188934,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189537,"byte_end":189546,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation2D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation2D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189094,"byte_end":189142,"line_start":106,"line_end":106,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189147,"byte_end":189150,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189155,"byte_end":189168,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189173,"byte_end":189176,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189181,"byte_end":189192,"line_start":110,"line_end":110,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189197,"byte_end":189226,"line_start":111,"line_end":111,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189231,"byte_end":189248,"line_start":112,"line_end":112,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189253,"byte_end":189270,"line_start":113,"line_end":113,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189275,"byte_end":189278,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189283,"byte_end":189301,"line_start":115,"line_end":115,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189306,"byte_end":189324,"line_start":116,"line_end":116,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189329,"byte_end":189332,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189337,"byte_end":189409,"line_start":118,"line_end":118,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189414,"byte_end":189417,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.cast_unit::<Local2, World2>().angle);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189422,"byte_end":189499,"line_start":120,"line_end":120,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189504,"byte_end":189511,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189516,"byte_end":189525,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190080,"byte_end":190090,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189702,"byte_end":189756,"line_start":130,"line_end":130,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189761,"byte_end":189764,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189769,"byte_end":189782,"line_start":132,"line_end":132,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189787,"byte_end":189790,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189795,"byte_end":189806,"line_start":134,"line_end":134,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189811,"byte_end":189840,"line_start":135,"line_end":135,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189845,"byte_end":189862,"line_start":136,"line_end":136,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189867,"byte_end":189884,"line_start":137,"line_end":137,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189889,"byte_end":189892,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189897,"byte_end":189969,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189974,"byte_end":189977,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.to_untyped().angle);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189982,"byte_end":190042,"line_start":141,"line_end":141,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190047,"byte_end":190054,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190059,"byte_end":190068,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190602,"byte_end":190614,"line_start":163,"line_end":163,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190179,"byte_end":190215,"line_start":148,"line_end":148,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190220,"byte_end":190223,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190228,"byte_end":190241,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190246,"byte_end":190249,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190254,"byte_end":190265,"line_start":152,"line_end":152,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190270,"byte_end":190299,"line_start":153,"line_end":153,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190304,"byte_end":190332,"line_start":154,"line_end":154,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190337,"byte_end":190354,"line_start":155,"line_end":155,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190359,"byte_end":190376,"line_start":156,"line_end":156,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190381,"byte_end":190384,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation2D<_, UnknownUnit, UnknownUnit> = Rotation2D::radians(42);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190389,"byte_end":190468,"line_start":158,"line_end":158,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190473,"byte_end":190476,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.angle, Rotation2D::<_, Local, World>::from_untyped(&rot).angle);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190481,"byte_end":190564,"line_start":160,"line_end":160,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190569,"byte_end":190576,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190581,"byte_end":190590,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190834,"byte_end":190843,"line_start":173,"line_end":173,"column_start":12,"column_end":21},"name":"get_angle","qualname":"<Rotation2D<T, Src, Dst>>::get_angle","value":"pub fn get_angle(&Self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns self.angle as a strongly typed `Angle<T>`.\n","sig":null,"attributes":[{"value":"/ Returns self.angle as a strongly typed `Angle<T>`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190768,"byte_end":190822,"line_start":172,"line_end":172,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191057,"byte_end":191062,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Rotation2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Rotation3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3d rotation (around the z axis) from this 2d rotation.\n","sig":null,"attributes":[{"value":"/ Creates a 3d rotation (around the z axis) from this 2d rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190963,"byte_end":191031,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191036,"byte_end":191045,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191224,"byte_end":191231,"line_start":187,"line_end":187,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation2D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191157,"byte_end":191198,"line_start":185,"line_end":185,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191203,"byte_end":191212,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191427,"byte_end":191431,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation2D<T, Src, Dst>>::then","value":"pub fn then<NewSrc>(&Self, &Rotation2D<T, NewSrc, Src>)\n-> Rotation2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing the other rotation followed by this rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing the other rotation followed by this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191320,"byte_end":191401,"line_start":191,"line_end":191,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191406,"byte_end":191415,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191788,"byte_end":191803,"line_start":204,"line_end":204,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Rotation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191603,"byte_end":191663,"line_start":200,"line_end":200,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191668,"byte_end":191671,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191676,"byte_end":191762,"line_start":202,"line_end":202,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191767,"byte_end":191776,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192182,"byte_end":192198,"line_start":213,"line_end":213,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Rotation2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":191996,"byte_end":192057,"line_start":209,"line_end":209,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192062,"byte_end":192065,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192070,"byte_end":192156,"line_start":211,"line_end":211,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192161,"byte_end":192170,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192539,"byte_end":192551,"line_start":224,"line_end":224,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192458,"byte_end":192513,"line_start":222,"line_end":222,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192518,"byte_end":192527,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193397,"byte_end":193407,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"Rotation3D","qualname":"::rotation::Rotation3D","value":"Rotation3D { i, j, k, r, _unit }","parent":null,"children":[{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162}],"decl_id":null,"docs":" A transform that can represent rotations in 3d, represented as a quaternion.","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 3d, represented as a quaternion.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192646,"byte_end":192726,"line_start":229,"line_end":229,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192727,"byte_end":192730,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Most methods expect the quaternion to be normalized.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192731,"byte_end":192787,"line_start":231,"line_end":231,"column_start":1,"column_end":57}},{"value":"/ When in doubt, use `unit_quaternion` instead of `quaternion` to create","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192788,"byte_end":192862,"line_start":232,"line_end":232,"column_start":1,"column_end":75}},{"value":"/ a rotation as the former will ensure that its result is normalized.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192863,"byte_end":192934,"line_start":233,"line_end":233,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192935,"byte_end":192938,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ Some people use the `x, y, z, w` (or `w, x, y, z`) notations. The equivalence is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192939,"byte_end":193023,"line_start":235,"line_end":235,"column_start":1,"column_end":85}},{"value":"/ as follows: `x -> i`, `y -> j`, `z -> k`, `w -> r`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193024,"byte_end":193079,"line_start":236,"line_end":236,"column_start":1,"column_end":56}},{"value":"/ The memory layout of this type corresponds to the `x, y, z, w` notation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193080,"byte_end":193155,"line_start":237,"line_end":237,"column_start":1,"column_end":76}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193156,"byte_end":193166,"line_start":238,"line_end":238,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193489,"byte_end":193490,"line_start":249,"line_end":249,"column_start":9,"column_end":10},"name":"i","qualname":"::rotation::Rotation3D::i","value":"T","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `i`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `i`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193427,"byte_end":193480,"line_start":248,"line_end":248,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2159},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193561,"byte_end":193562,"line_start":251,"line_end":251,"column_start":9,"column_end":10},"name":"j","qualname":"::rotation::Rotation3D::j","value":"T","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `j`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `j`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193499,"byte_end":193552,"line_start":250,"line_end":250,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2160},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193633,"byte_end":193634,"line_start":253,"line_end":253,"column_start":9,"column_end":10},"name":"k","qualname":"::rotation::Rotation3D::k","value":"T","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `k`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `k`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193571,"byte_end":193624,"line_start":252,"line_end":252,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2161},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193670,"byte_end":193671,"line_start":255,"line_end":255,"column_start":9,"column_end":10},"name":"r","qualname":"::rotation::Rotation3D::r","value":"T","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":" The real part.\n","sig":null,"attributes":[{"value":"/ The real part.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193643,"byte_end":193661,"line_start":254,"line_end":254,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193703,"byte_end":193708,"line_start":257,"line_end":257,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195320,"byte_end":195330,"line_start":314,"line_end":314,"column_start":12,"column_end":22},"name":"quaternion","qualname":"<Rotation3D<T, Src, Dst>>::quaternion","value":"pub fn quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194870,"byte_end":194933,"line_start":304,"line_end":304,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194938,"byte_end":194941,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194946,"byte_end":195027,"line_start":306,"line_end":306,"column_start":5,"column_end":86}},{"value":"/ where `a`, `b` and `c` describe the vector part and the last parameter `r` is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195032,"byte_end":195113,"line_start":307,"line_end":307,"column_start":5,"column_end":86}},{"value":"/ the real part.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195118,"byte_end":195136,"line_start":308,"line_end":308,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195141,"byte_end":195144,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The resulting quaternion is not necessarily normalized. See [`unit_quaternion`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195149,"byte_end":195233,"line_start":310,"line_end":310,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195238,"byte_end":195241,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ [`unit_quaternion`]: #method.unit_quaternion","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195246,"byte_end":195294,"line_start":312,"line_end":312,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195299,"byte_end":195308,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195568,"byte_end":195576,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195508,"byte_end":195542,"line_start":324,"line_end":324,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195547,"byte_end":195556,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195853,"byte_end":195864,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"vector_part","qualname":"<Rotation3D<T, Src, Dst>>::vector_part","value":"pub fn vector_part(&Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector part (i, j, k) of this quaternion.\n","sig":null,"attributes":[{"value":"/ Returns the vector part (i, j, k) of this quaternion.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195770,"byte_end":195827,"line_start":338,"line_end":338,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195832,"byte_end":195841,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196618,"byte_end":196627,"line_start":364,"line_end":364,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195950,"byte_end":195998,"line_start":344,"line_end":344,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196003,"byte_end":196006,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196011,"byte_end":196024,"line_start":346,"line_end":346,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196029,"byte_end":196032,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196037,"byte_end":196048,"line_start":348,"line_end":348,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196053,"byte_end":196082,"line_start":349,"line_end":349,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196087,"byte_end":196104,"line_start":350,"line_end":350,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196109,"byte_end":196126,"line_start":351,"line_end":351,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196131,"byte_end":196134,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196139,"byte_end":196157,"line_start":353,"line_end":353,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196162,"byte_end":196180,"line_start":354,"line_end":354,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196185,"byte_end":196188,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196193,"byte_end":196276,"line_start":356,"line_end":356,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196281,"byte_end":196284,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.cast_unit::<Local2, World2>().i);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196289,"byte_end":196358,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.j, to_world.cast_unit::<Local2, World2>().j);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196363,"byte_end":196432,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.k, to_world.cast_unit::<Local2, World2>().k);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196437,"byte_end":196506,"line_start":360,"line_end":360,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.r, to_world.cast_unit::<Local2, World2>().r);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196511,"byte_end":196580,"line_start":361,"line_end":361,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196585,"byte_end":196592,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196597,"byte_end":196606,"line_start":363,"line_end":363,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197396,"byte_end":197406,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196844,"byte_end":196898,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196903,"byte_end":196906,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196911,"byte_end":196924,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196929,"byte_end":196932,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196937,"byte_end":196948,"line_start":378,"line_end":378,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196953,"byte_end":196982,"line_start":379,"line_end":379,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":196987,"byte_end":197004,"line_start":380,"line_end":380,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197009,"byte_end":197026,"line_start":381,"line_end":381,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197031,"byte_end":197034,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197039,"byte_end":197122,"line_start":383,"line_end":383,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197127,"byte_end":197130,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.to_untyped().i);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197135,"byte_end":197187,"line_start":385,"line_end":385,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.j, to_world.to_untyped().j);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197192,"byte_end":197244,"line_start":386,"line_end":386,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.k, to_world.to_untyped().k);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197249,"byte_end":197301,"line_start":387,"line_end":387,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.r, to_world.to_untyped().r);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197306,"byte_end":197358,"line_start":388,"line_end":388,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197363,"byte_end":197370,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197375,"byte_end":197384,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198161,"byte_end":198173,"line_start":413,"line_end":413,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197495,"byte_end":197531,"line_start":395,"line_end":395,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197536,"byte_end":197539,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197544,"byte_end":197557,"line_start":397,"line_end":397,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197562,"byte_end":197565,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197570,"byte_end":197581,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197586,"byte_end":197615,"line_start":400,"line_end":400,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197620,"byte_end":197648,"line_start":401,"line_end":401,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197653,"byte_end":197670,"line_start":402,"line_end":402,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197675,"byte_end":197692,"line_start":403,"line_end":403,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197697,"byte_end":197700,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation3D<_, UnknownUnit, UnknownUnit> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197705,"byte_end":197795,"line_start":405,"line_end":405,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197800,"byte_end":197803,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.i, Rotation3D::<_, Local, World>::from_untyped(&rot).i);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197808,"byte_end":197883,"line_start":407,"line_end":407,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.j, Rotation3D::<_, Local, World>::from_untyped(&rot).j);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197888,"byte_end":197963,"line_start":408,"line_end":408,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.k, Rotation3D::<_, Local, World>::from_untyped(&rot).k);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":197968,"byte_end":198043,"line_start":409,"line_end":409,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.r, Rotation3D::<_, Local, World>::from_untyped(&rot).r);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198048,"byte_end":198123,"line_start":410,"line_end":410,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198128,"byte_end":198135,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198140,"byte_end":198149,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2207},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198659,"byte_end":198674,"line_start":428,"line_end":428,"column_start":12,"column_end":27},"name":"unit_quaternion","qualname":"<Rotation3D<T, Src, Dst>>::unit_quaternion","value":"pub fn unit_quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation and normalizes it.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation and normalizes it.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198327,"byte_end":198408,"line_start":422,"line_end":422,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198413,"byte_end":198416,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198421,"byte_end":198502,"line_start":424,"line_end":424,"column_start":5,"column_end":86}},{"value":"/ before normalization, where `a`, `b` and `c` describe the vector part and the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198507,"byte_end":198588,"line_start":425,"line_end":425,"column_start":5,"column_end":86}},{"value":"/ last parameter `r` is the real part.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198593,"byte_end":198633,"line_start":426,"line_end":426,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198638,"byte_end":198647,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198824,"byte_end":198835,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"around_axis","qualname":"<Rotation3D<T, Src, Dst>>::around_axis","value":"pub fn around_axis(Vector3D<T, Src>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around a given axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around a given axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198769,"byte_end":198812,"line_start":432,"line_end":432,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199153,"byte_end":199161,"line_start":441,"line_end":441,"column_start":12,"column_end":20},"name":"around_x","qualname":"<Rotation3D<T, Src, Dst>>::around_x","value":"pub fn around_x(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the x axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199100,"byte_end":199141,"line_start":440,"line_end":440,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199426,"byte_end":199434,"line_start":449,"line_end":449,"column_start":12,"column_end":20},"name":"around_y","qualname":"<Rotation3D<T, Src, Dst>>::around_y","value":"pub fn around_y(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the y axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199373,"byte_end":199414,"line_start":448,"line_end":448,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199699,"byte_end":199707,"line_start":457,"line_end":457,"column_start":12,"column_end":20},"name":"around_z","qualname":"<Rotation3D<T, Src, Dst>>::around_z","value":"pub fn around_z(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the z axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199646,"byte_end":199687,"line_start":456,"line_end":456,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200267,"byte_end":200272,"line_start":471,"line_end":471,"column_start":12,"column_end":17},"name":"euler","qualname":"<Rotation3D<T, Src, Dst>>::euler","value":"pub fn euler(Angle<T>, Angle<T>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from Euler angles.","sig":null,"attributes":[{"value":"/ Creates a rotation from Euler angles.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199919,"byte_end":199960,"line_start":464,"line_end":464,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199965,"byte_end":199968,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ The rotations are applied in roll then pitch then yaw order.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":199973,"byte_end":200037,"line_start":466,"line_end":466,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200042,"byte_end":200045,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/  - Roll (also called bank) is a rotation around the x axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200050,"byte_end":200113,"line_start":468,"line_end":468,"column_start":5,"column_end":68}},{"value":"/  - Pitch (also called bearing) is a rotation around the y axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200118,"byte_end":200185,"line_start":469,"line_end":469,"column_start":5,"column_end":72}},{"value":"/  - Yaw (also called heading) is a rotation around the z axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200190,"byte_end":200255,"line_start":470,"line_end":470,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2213},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200835,"byte_end":200842,"line_start":488,"line_end":488,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200768,"byte_end":200809,"line_start":486,"line_end":486,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200814,"byte_end":200823,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201023,"byte_end":201027,"line_start":494,"line_end":494,"column_start":12,"column_end":16},"name":"norm","qualname":"<Rotation3D<T, Src, Dst>>::norm","value":"pub fn norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the norm of this quaternion.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":200956,"byte_end":200997,"line_start":492,"line_end":492,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201002,"byte_end":201011,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201162,"byte_end":201173,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"square_norm","qualname":"<Rotation3D<T, Src, Dst>>::square_norm","value":"pub fn square_norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the squared norm of this quaternion.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201087,"byte_end":201136,"line_start":498,"line_end":498,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201141,"byte_end":201150,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201441,"byte_end":201450,"line_start":508,"line_end":508,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Rotation3D<T, Src, Dst>>::normalize","value":"pub fn normalize(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a [unit quaternion] from this one.","sig":null,"attributes":[{"value":"/ Returns a [unit quaternion] from this one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201277,"byte_end":201323,"line_start":504,"line_end":504,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201328,"byte_end":201331,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ [unit quaternion]: https://en.wikipedia.org/wiki/Quaternion#Unit_quaternion","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201336,"byte_end":201415,"line_start":506,"line_end":506,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201420,"byte_end":201429,"line_start":507,"line_end":507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201654,"byte_end":201667,"line_start":516,"line_end":516,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Rotation3D<T, Src, Dst>>::is_normalized","value":"pub fn is_normalized(&Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [norm] of this quaternion is (approximately) one.","sig":null,"attributes":[{"value":"/ Returns `true` if [norm] of this quaternion is (approximately) one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201520,"byte_end":201591,"line_start":512,"line_end":512,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201596,"byte_end":201599,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ [norm]: #method.norm","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201604,"byte_end":201628,"line_start":514,"line_end":514,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201633,"byte_end":201642,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201992,"byte_end":201997,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Rotation3D<T, Src, Dst>>::slerp","value":"pub fn slerp(&Self, &Self, T) -> Self where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Spherical linear interpolation between this rotation and another rotation.","sig":null,"attributes":[{"value":"/ Spherical linear interpolation between this rotation and another rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201842,"byte_end":201920,"line_start":524,"line_end":524,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201925,"byte_end":201928,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ `t` is expected to be between zero and one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":201933,"byte_end":201980,"line_start":526,"line_end":526,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2219},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203256,"byte_end":203260,"line_start":568,"line_end":568,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rotation3D<T, Src, Dst>>::lerp","value":"pub fn lerp(&Self, &Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Basic Linear interpolation between this rotation and another rotation.\n","sig":null,"attributes":[{"value":"/ Basic Linear interpolation between this rotation and another rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203156,"byte_end":203230,"line_start":566,"line_end":566,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203235,"byte_end":203244,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203568,"byte_end":203585,"line_start":576,"line_end":576,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Point3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203397,"byte_end":203457,"line_start":573,"line_end":573,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203462,"byte_end":203465,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":203470,"byte_end":203556,"line_start":575,"line_end":575,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2221},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204333,"byte_end":204350,"line_start":596,"line_end":596,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Point2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation then projected on the xy plane.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204117,"byte_end":204208,"line_start":592,"line_end":592,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204213,"byte_end":204216,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204221,"byte_end":204307,"line_start":594,"line_end":594,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204312,"byte_end":204321,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204690,"byte_end":204708,"line_start":607,"line_end":607,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204503,"byte_end":204564,"line_start":603,"line_end":603,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204569,"byte_end":204572,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204577,"byte_end":204664,"line_start":605,"line_end":605,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204669,"byte_end":204678,"line_start":606,"line_end":606,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":205093,"byte_end":205111,"line_start":618,"line_end":618,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation then projected on the xy plane.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204875,"byte_end":204967,"line_start":614,"line_end":614,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204972,"byte_end":204975,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":204980,"byte_end":205067,"line_start":616,"line_end":616,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":205072,"byte_end":205081,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2224},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":205350,"byte_end":205362,"line_start":627,"line_end":627,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":205269,"byte_end":205324,"line_start":625,"line_end":625,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":205329,"byte_end":205338,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":206474,"byte_end":206478,"line_start":671,"line_end":671,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Rotation3D<T, Dst, NewDst>)\n-> Rotation3D<T, Src, NewDst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing this rotation followed by the other rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing this rotation followed by the other rotation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":206367,"byte_end":206448,"line_start":669,"line_end":669,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":206453,"byte_end":206462,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2299},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218764,"byte_end":218769,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"Scale","qualname":"::scale::Scale","value":"","parent":null,"children":[],"decl_id":null,"docs":" A scaling factor between two different units of measurement.","sig":null,"attributes":[{"value":"/ A scaling factor between two different units of measurement.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":217797,"byte_end":217861,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":217862,"byte_end":217865,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This is effectively a type-safe float, intended to be used in combination with other types like","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":217866,"byte_end":217965,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ `length::Length` to enforce conversion between systems of measurement at compile time.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":217966,"byte_end":218056,"line_start":28,"line_end":28,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218057,"byte_end":218060,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `Src` and `Dst` represent the units before and after multiplying a value by a `Scale`. They","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218061,"byte_end":218156,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ may be types without values, such as empty enums.  For example:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218157,"byte_end":218224,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218225,"byte_end":218228,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218229,"byte_end":218240,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ use euclid::Scale;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218241,"byte_end":218263,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"/ use euclid::Length;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218264,"byte_end":218287,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218288,"byte_end":218303,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/ enum Inch {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218304,"byte_end":218321,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218322,"byte_end":218325,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let mm_per_inch: Scale<f32, Inch, Mm> = Scale::new(25.4);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218326,"byte_end":218387,"line_start":39,"line_end":39,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218388,"byte_end":218391,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let one_foot: Length<f32, Inch> = Length::new(12.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218392,"byte_end":218448,"line_start":41,"line_end":41,"column_start":1,"column_end":57}},{"value":"/ let one_foot_in_mm: Length<f32, Mm> = one_foot * mm_per_inch;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218449,"byte_end":218514,"line_start":42,"line_end":42,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218515,"byte_end":218522,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218523,"byte_end":218533,"line_start":44,"line_end":44,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2304},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218783,"byte_end":218788,"line_start":53,"line_end":53,"column_start":31,"column_end":36},"name":"0","qualname":"::scale::Scale::0","value":"T","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218805,"byte_end":218832,"line_start":53,"line_end":53,"column_start":53,"column_end":80},"name":"1","qualname":"::scale::Scale::1","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2299},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2310},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218906,"byte_end":218909,"line_start":57,"line_end":57,"column_start":18,"column_end":21},"name":"new","qualname":"<Scale<T, Src, Dst>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218879,"byte_end":218888,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219029,"byte_end":219037,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"identity","qualname":"<Scale<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity scale (1.0).\n","sig":null,"attributes":[{"value":"/ Creates an identity scale (1.0).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218967,"byte_end":219003,"line_start":61,"line_end":61,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219008,"byte_end":219017,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219489,"byte_end":219504,"line_start":84,"line_end":84,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Scale<T, Src, Dst>>::transform_point","value":"pub fn transform_point(Self, Point2D<T, Src>) -> Point2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219119,"byte_end":219173,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219178,"byte_end":219181,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219186,"byte_end":219199,"line_start":72,"line_end":72,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219204,"byte_end":219207,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219212,"byte_end":219223,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219228,"byte_end":219260,"line_start":75,"line_end":75,"column_start":5,"column_end":37}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219265,"byte_end":219280,"line_start":76,"line_end":76,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219285,"byte_end":219300,"line_start":77,"line_end":77,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219305,"byte_end":219308,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219313,"byte_end":219364,"line_start":79,"line_end":79,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219369,"byte_end":219372,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_point(point2(42, -42)), point2(420, -420));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219377,"byte_end":219451,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219456,"byte_end":219463,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219468,"byte_end":219477,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219749,"byte_end":219766,"line_start":93,"line_end":93,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Scale<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(Self, Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219669,"byte_end":219723,"line_start":91,"line_end":91,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219728,"byte_end":219737,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220315,"byte_end":220331,"line_start":114,"line_end":114,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Scale<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(Self, Vector2D<T, Src>) -> Vector2D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":219949,"byte_end":220004,"line_start":100,"line_end":100,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220009,"byte_end":220012,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220017,"byte_end":220030,"line_start":102,"line_end":102,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220035,"byte_end":220038,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220043,"byte_end":220054,"line_start":104,"line_end":104,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, vec2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220059,"byte_end":220089,"line_start":105,"line_end":105,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220094,"byte_end":220109,"line_start":106,"line_end":106,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220114,"byte_end":220129,"line_start":107,"line_end":107,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220134,"byte_end":220137,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220142,"byte_end":220193,"line_start":109,"line_end":109,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220198,"byte_end":220201,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_vector(vec2(42, -42)), vec2(420, -420));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220206,"byte_end":220277,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220282,"byte_end":220289,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220294,"byte_end":220303,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220860,"byte_end":220874,"line_start":135,"line_end":135,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Scale<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220493,"byte_end":220548,"line_start":121,"line_end":121,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220553,"byte_end":220556,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220561,"byte_end":220574,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220579,"byte_end":220582,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220587,"byte_end":220598,"line_start":125,"line_end":125,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, size2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220603,"byte_end":220634,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220639,"byte_end":220654,"line_start":127,"line_end":127,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220659,"byte_end":220674,"line_start":128,"line_end":128,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220679,"byte_end":220682,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220687,"byte_end":220738,"line_start":130,"line_end":130,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220743,"byte_end":220746,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_size(size2(42, -42)), size2(420, -420));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220751,"byte_end":220822,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220827,"byte_end":220834,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":220839,"byte_end":220848,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221419,"byte_end":221433,"line_start":156,"line_end":156,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Scale<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given rect transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given rect transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221042,"byte_end":221095,"line_start":142,"line_end":142,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221100,"byte_end":221103,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221108,"byte_end":221121,"line_start":144,"line_end":144,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221126,"byte_end":221129,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221134,"byte_end":221145,"line_start":146,"line_end":146,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, rect};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221150,"byte_end":221180,"line_start":147,"line_end":147,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221185,"byte_end":221200,"line_start":148,"line_end":148,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221205,"byte_end":221220,"line_start":149,"line_end":149,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221225,"byte_end":221228,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221233,"byte_end":221284,"line_start":151,"line_end":151,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221289,"byte_end":221292,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_rect(&rect(1, 2, 42, -42)), rect(10, 20, 420, -420));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221297,"byte_end":221381,"line_start":153,"line_end":153,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221386,"byte_end":221393,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221398,"byte_end":221407,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221733,"byte_end":221748,"line_start":168,"line_end":168,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Scale<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221655,"byte_end":221707,"line_start":166,"line_end":166,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221712,"byte_end":221721,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222045,"byte_end":222060,"line_start":180,"line_end":180,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Scale<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":221967,"byte_end":222019,"line_start":178,"line_end":178,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222024,"byte_end":222033,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2319},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222801,"byte_end":222812,"line_start":208,"line_end":208,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Scale<T, Src, Dst>>::is_identity","value":"pub fn is_identity(Self) -> bool where T: PartialEq + One","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this scale has no effect.","sig":null,"attributes":[{"value":"/ Returns `true` if this scale has no effect.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222283,"byte_end":222330,"line_start":190,"line_end":190,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222335,"byte_end":222338,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222343,"byte_end":222356,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222361,"byte_end":222364,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222369,"byte_end":222380,"line_start":194,"line_end":194,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222385,"byte_end":222407,"line_start":195,"line_end":195,"column_start":5,"column_end":27}},{"value":"/ use euclid::num::One;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222412,"byte_end":222437,"line_start":196,"line_end":196,"column_start":5,"column_end":30}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222442,"byte_end":222457,"line_start":197,"line_end":197,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222462,"byte_end":222477,"line_start":198,"line_end":198,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222482,"byte_end":222485,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Mm, Cm> = Scale::new(0.1);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222490,"byte_end":222546,"line_start":200,"line_end":200,"column_start":5,"column_end":61}},{"value":"/ let mm_per_mm: Scale<f32, Mm, Mm> = Scale::new(1.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222551,"byte_end":222607,"line_start":201,"line_end":201,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222612,"byte_end":222615,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.is_identity(), false);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222620,"byte_end":222667,"line_start":203,"line_end":203,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(mm_per_mm.is_identity(), true);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222672,"byte_end":222718,"line_start":204,"line_end":204,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(mm_per_mm, Scale::one());","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222723,"byte_end":222763,"line_start":205,"line_end":205,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222768,"byte_end":222775,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222780,"byte_end":222789,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222982,"byte_end":222985,"line_start":217,"line_end":217,"column_start":12,"column_end":15},"name":"get","qualname":"<Scale<T, Src, Dst>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying scalar scale factor.\n","sig":null,"attributes":[{"value":"/ Returns the underlying scalar scale factor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222909,"byte_end":222956,"line_start":215,"line_end":215,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":222961,"byte_end":222970,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223337,"byte_end":223344,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Scale<T, Src, Dst>>::inverse","value":"pub fn inverse(Self) -> Scale<T::Output, Dst, Src> where T: One + Div","parent":null,"children":[],"decl_id":null,"docs":" The inverse Scale (1.0 / self).","sig":null,"attributes":[{"value":"/ The inverse Scale (1.0 / self).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223025,"byte_end":223060,"line_start":221,"line_end":221,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223065,"byte_end":223068,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223073,"byte_end":223086,"line_start":223,"line_end":223,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223091,"byte_end":223094,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223099,"byte_end":223110,"line_start":225,"line_end":225,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223115,"byte_end":223137,"line_start":226,"line_end":226,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223142,"byte_end":223157,"line_start":227,"line_end":227,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223162,"byte_end":223177,"line_start":228,"line_end":228,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223182,"byte_end":223185,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Cm, Mm> = Scale::new(0.1);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223190,"byte_end":223246,"line_start":230,"line_end":230,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223251,"byte_end":223254,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.inverse(), Scale::new(10.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223259,"byte_end":223313,"line_start":232,"line_end":232,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223318,"byte_end":223325,"line_start":233,"line_end":233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2326},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224425,"byte_end":224429,"line_start":272,"line_end":272,"column_start":12,"column_end":16},"name":"cast","qualname":"<Scale<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Scale<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223546,"byte_end":223620,"line_start":244,"line_end":244,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223625,"byte_end":223628,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223633,"byte_end":223645,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223650,"byte_end":223653,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223658,"byte_end":223735,"line_start":248,"line_end":248,"column_start":5,"column_end":82}},{"value":"/ method panics. Use `try_cast` if that must be case.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223740,"byte_end":223795,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223800,"byte_end":223803,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223808,"byte_end":223821,"line_start":251,"line_end":251,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223826,"byte_end":223829,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223834,"byte_end":223845,"line_start":253,"line_end":253,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223850,"byte_end":223872,"line_start":254,"line_end":254,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223877,"byte_end":223892,"line_start":255,"line_end":255,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223897,"byte_end":223912,"line_start":256,"line_end":256,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223917,"byte_end":223920,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223925,"byte_end":223976,"line_start":258,"line_end":258,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223981,"byte_end":223984,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.cast::<f32>(), Scale::new(10.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223989,"byte_end":224043,"line_start":260,"line_end":260,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224048,"byte_end":224055,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ That conversion will panic, because `i32` not enough to store such big numbers:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224060,"byte_end":224143,"line_start":262,"line_end":262,"column_start":5,"column_end":88}},{"value":"/ ```rust,should_panic","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224148,"byte_end":224172,"line_start":263,"line_end":263,"column_start":5,"column_end":29}},{"value":"/ use euclid::Scale;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224177,"byte_end":224199,"line_start":264,"line_end":264,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};// millimeter = 10^-2 meters","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224204,"byte_end":224247,"line_start":265,"line_end":265,"column_start":5,"column_end":48}},{"value":"/ enum Em {};// exameter   = 10^18 meters","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224252,"byte_end":224295,"line_start":266,"line_end":266,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224300,"byte_end":224303,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ // Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224308,"byte_end":224321,"line_start":268,"line_end":268,"column_start":5,"column_end":18}},{"value":"/ let to_em: Scale<i32, Mm, Em> = Scale::new(10e20).cast();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224326,"byte_end":224387,"line_start":269,"line_end":269,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224392,"byte_end":224399,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224404,"byte_end":224413,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225202,"byte_end":225210,"line_start":295,"line_end":295,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Scale<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Scale<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n If the source value cannot be represented by the target type `NewT`, then `None`\n is returned.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224522,"byte_end":224605,"line_start":276,"line_end":276,"column_start":5,"column_end":88}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then `None`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224610,"byte_end":224694,"line_start":277,"line_end":277,"column_start":5,"column_end":89}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224699,"byte_end":224715,"line_start":278,"line_end":278,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224720,"byte_end":224723,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224728,"byte_end":224741,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224746,"byte_end":224749,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224754,"byte_end":224765,"line_start":282,"line_end":282,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224770,"byte_end":224792,"line_start":283,"line_end":283,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224797,"byte_end":224812,"line_start":284,"line_end":284,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224817,"byte_end":224832,"line_start":285,"line_end":285,"column_start":5,"column_end":20}},{"value":"/ enum Em {};// Exameter = 10^18 meters","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224837,"byte_end":224878,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224883,"byte_end":224886,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224891,"byte_end":224942,"line_start":288,"line_end":288,"column_start":5,"column_end":56}},{"value":"/ let to_em: Scale<f32, Mm, Em> = Scale::new(10e20);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":224947,"byte_end":225001,"line_start":289,"line_end":289,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225006,"byte_end":225009,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.try_cast::<f32>(), Some(Scale::new(10.0)));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225014,"byte_end":225078,"line_start":291,"line_end":291,"column_start":5,"column_end":69}},{"value":"/ // Integer to small to store that number","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225083,"byte_end":225127,"line_start":292,"line_end":292,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(to_em.try_cast::<i32>(), None);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225132,"byte_end":225178,"line_start":293,"line_end":293,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225183,"byte_end":225190,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2455},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230039,"byte_end":230052,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"SideOffsets2D","qualname":"::side_offsets::SideOffsets2D","value":"SideOffsets2D { top, right, bottom, left, _unit }","parent":null,"children":[{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462}],"decl_id":null,"docs":" A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,\n and margins in CSS, optionally tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":229683,"byte_end":229778,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ and margins in CSS, optionally tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":229779,"byte_end":229833,"line_start":28,"line_end":28,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":229834,"byte_end":229844,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2458},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230069,"byte_end":230072,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"top","qualname":"::side_offsets::SideOffsets2D::top","value":"T","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2459},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230085,"byte_end":230090,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"right","qualname":"::side_offsets::SideOffsets2D::right","value":"T","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2460},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230103,"byte_end":230109,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"name":"bottom","qualname":"::side_offsets::SideOffsets2D::bottom","value":"T","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2461},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230122,"byte_end":230126,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"left","qualname":"::side_offsets::SideOffsets2D::left","value":"T","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2462},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230158,"byte_end":230163,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"_unit","qualname":"::side_offsets::SideOffsets2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232521,"byte_end":232524,"line_start":135,"line_end":135,"column_start":18,"column_end":21},"name":"new","qualname":"<SideOffsets2D<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a scalar for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a scalar for each side.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232354,"byte_end":232400,"line_start":131,"line_end":131,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232405,"byte_end":232408,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232413,"byte_end":232477,"line_start":133,"line_end":133,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232482,"byte_end":232503,"line_start":134,"line_end":134,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232891,"byte_end":232903,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<SideOffsets2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>, Length<T, U>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a typed Length for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a typed Length for each side.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232724,"byte_end":232776,"line_start":145,"line_end":145,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232781,"byte_end":232784,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232789,"byte_end":232853,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232858,"byte_end":232879,"line_start":148,"line_end":148,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233399,"byte_end":233417,"line_start":163,"line_end":163,"column_start":12,"column_end":30},"name":"from_vectors_outer","qualname":"<SideOffsets2D<T, U>>::from_vectors_outer","value":"pub fn from_vectors_outer(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233107,"byte_end":233168,"line_start":158,"line_end":158,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233173,"byte_end":233176,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The outer rect of the resulting side offsets is equivalent to translating","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233181,"byte_end":233258,"line_start":160,"line_end":160,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233263,"byte_end":233338,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233343,"byte_end":233387,"line_start":162,"line_end":162,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233985,"byte_end":234003,"line_start":181,"line_end":181,"column_start":12,"column_end":30},"name":"from_vectors_inner","qualname":"<SideOffsets2D<T, U>>::from_vectors_inner","value":"pub fn from_vectors_inner(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233693,"byte_end":233754,"line_start":176,"line_end":176,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233759,"byte_end":233762,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The inner rect of the resulting side offsets is equivalent to translating","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233767,"byte_end":233844,"line_start":178,"line_end":178,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233849,"byte_end":233924,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":233929,"byte_end":233973,"line_start":180,"line_end":180,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234334,"byte_end":234338,"line_start":195,"line_end":195,"column_start":12,"column_end":16},"name":"zero","qualname":"<SideOffsets2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234279,"byte_end":234322,"line_start":194,"line_end":194,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234532,"byte_end":234539,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<SideOffsets2D<T, U>>::is_zero","value":"pub fn is_zero(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all side offsets are zero.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all side offsets are zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234472,"byte_end":234520,"line_start":201,"line_end":201,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2499},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234828,"byte_end":234840,"line_start":211,"line_end":211,"column_start":12,"column_end":24},"name":"new_all_same","qualname":"<SideOffsets2D<T, U>>::new_all_same","value":"pub fn new_all_same(T) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a scalar value directly.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a scalar value directly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234732,"byte_end":234816,"line_start":210,"line_end":210,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235031,"byte_end":235051,"line_start":218,"line_end":218,"column_start":12,"column_end":32},"name":"from_length_all_same","qualname":"<SideOffsets2D<T, U>>::from_length_all_same","value":"pub fn from_length_all_same(Length<T, U>) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a typed Length.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a typed Length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":234944,"byte_end":235019,"line_start":217,"line_end":217,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235169,"byte_end":235179,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"horizontal","qualname":"<SideOffsets2D<T, U>>::horizontal","value":"pub fn horizontal(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235290,"byte_end":235298,"line_start":230,"line_end":230,"column_start":12,"column_end":20},"name":"vertical","qualname":"<SideOffsets2D<T, U>>::vertical","value":"pub fn vertical(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2659},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243302,"byte_end":243308,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Size2D","qualname":"::size::Size2D","value":"Size2D { width, height, _unit }","parent":null,"children":[{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664}],"decl_id":null,"docs":" A 2d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d size tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243246,"byte_end":243279,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243280,"byte_end":243290,"line_start":33,"line_end":33,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2662},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243417,"byte_end":243422,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size2D::width","value":"T","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis (usually horizontal).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis (usually horizontal).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243321,"byte_end":243408,"line_start":35,"line_end":35,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":2663},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243525,"byte_end":243531,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size2D::height","value":"T","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis (usually vertical).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis (usually vertical).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243431,"byte_end":243516,"line_start":37,"line_end":37,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":2664},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243563,"byte_end":243568,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2659},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246223,"byte_end":246227,"line_start":150,"line_end":150,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246056,"byte_end":246127,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246132,"byte_end":246135,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246140,"byte_end":246197,"line_start":148,"line_end":148,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246202,"byte_end":246211,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246399,"byte_end":246402,"line_start":159,"line_end":159,"column_start":18,"column_end":21},"name":"new","qualname":"<Size2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246330,"byte_end":246367,"line_start":157,"line_end":157,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246372,"byte_end":246381,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246621,"byte_end":246633,"line_start":168,"line_end":168,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246542,"byte_end":246595,"line_start":166,"line_end":166,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246600,"byte_end":246609,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246820,"byte_end":246825,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"splat","qualname":"<Size2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246737,"byte_end":246794,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246799,"byte_end":246808,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247059,"byte_end":247071,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size2D<T, U>>::from_untyped","value":"pub fn from_untyped(Size2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246997,"byte_end":247033,"line_start":185,"line_end":185,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247038,"byte_end":247047,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247289,"byte_end":247297,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of two elements (width, then height).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247193,"byte_end":247263,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247268,"byte_end":247277,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2705},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247456,"byte_end":247464,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a tuple of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as a tuple of two elements (width, then height).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247361,"byte_end":247430,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247435,"byte_end":247444,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247609,"byte_end":247618,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width and height.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width and height.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247528,"byte_end":247583,"line_start":205,"line_end":205,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247588,"byte_end":247597,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2707},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247774,"byte_end":247784,"line_start":213,"line_end":213,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247694,"byte_end":247748,"line_start":211,"line_end":211,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247753,"byte_end":247762,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247898,"byte_end":247907,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247855,"byte_end":247872,"line_start":217,"line_end":217,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247877,"byte_end":247886,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248350,"byte_end":248355,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"round","qualname":"<Size2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247991,"byte_end":248046,"line_start":223,"line_end":223,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248051,"byte_end":248054,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248059,"byte_end":248134,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248139,"byte_end":248142,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248147,"byte_end":248158,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248163,"byte_end":248187,"line_start":228,"line_end":228,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248192,"byte_end":248206,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248211,"byte_end":248214,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).round(), size2::<_, Mm>(0.0, -1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248219,"byte_end":248296,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248301,"byte_end":248308,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248313,"byte_end":248322,"line_start":233,"line_end":233,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248327,"byte_end":248338,"line_start":234,"line_end":234,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2711},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248869,"byte_end":248873,"line_start":254,"line_end":254,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248476,"byte_end":248567,"line_start":242,"line_end":242,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248572,"byte_end":248575,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248580,"byte_end":248655,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248660,"byte_end":248663,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248668,"byte_end":248679,"line_start":246,"line_end":246,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248684,"byte_end":248708,"line_start":247,"line_end":247,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248713,"byte_end":248727,"line_start":248,"line_end":248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248732,"byte_end":248735,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).ceil(), size2::<_, Mm>(0.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248740,"byte_end":248815,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248820,"byte_end":248827,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248832,"byte_end":248841,"line_start":252,"line_end":252,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248846,"byte_end":248857,"line_start":253,"line_end":253,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249384,"byte_end":249389,"line_start":273,"line_end":273,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":248991,"byte_end":249079,"line_start":261,"line_end":261,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249084,"byte_end":249087,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249092,"byte_end":249167,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249172,"byte_end":249175,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249180,"byte_end":249191,"line_start":265,"line_end":265,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249196,"byte_end":249220,"line_start":266,"line_end":266,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249225,"byte_end":249239,"line_start":267,"line_end":267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249244,"byte_end":249247,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).floor(), size2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249252,"byte_end":249330,"line_start":269,"line_end":269,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249335,"byte_end":249342,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249347,"byte_end":249356,"line_start":271,"line_end":271,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249361,"byte_end":249372,"line_start":272,"line_end":272,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2713},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249577,"byte_end":249581,"line_start":281,"line_end":281,"column_start":12,"column_end":16},"name":"area","qualname":"<Size2D<T, U>>::area","value":"pub fn area(Self) -> T::Output where T: Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of both components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of both components","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249510,"byte_end":249565,"line_start":280,"line_end":280,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2714},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250320,"byte_end":250324,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this size and another size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249677,"byte_end":249752,"line_start":288,"line_end":288,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249757,"byte_end":249760,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249765,"byte_end":249778,"line_start":290,"line_end":290,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249783,"byte_end":249786,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249791,"byte_end":249802,"line_start":292,"line_end":292,"column_start":5,"column_end":16}},{"value":"/ use euclid::size2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249807,"byte_end":249829,"line_start":293,"line_end":293,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249834,"byte_end":249866,"line_start":294,"line_end":294,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249871,"byte_end":249874,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let from: Size2D<_> = size2(0.0, 10.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249879,"byte_end":249922,"line_start":296,"line_end":296,"column_start":5,"column_end":48}},{"value":"/ let to:  Size2D<_> = size2(8.0, -4.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249927,"byte_end":249969,"line_start":297,"line_end":297,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249974,"byte_end":249977,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size2(-8.0,  24.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":249982,"byte_end":250038,"line_start":299,"line_end":299,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size2( 0.0,  10.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250043,"byte_end":250099,"line_start":300,"line_end":300,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size2( 4.0,   3.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250104,"byte_end":250160,"line_start":301,"line_end":301,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size2( 8.0,  -4.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250165,"byte_end":250221,"line_start":302,"line_end":302,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size2(16.0, -18.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250226,"byte_end":250282,"line_start":303,"line_end":303,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250287,"byte_end":250294,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250299,"byte_end":250308,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2718},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250946,"byte_end":250950,"line_start":322,"line_end":322,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250566,"byte_end":250640,"line_start":316,"line_end":316,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250645,"byte_end":250648,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250653,"byte_end":250740,"line_start":318,"line_end":318,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250745,"byte_end":250833,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250838,"byte_end":250920,"line_start":320,"line_end":320,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250925,"byte_end":250934,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2720},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251412,"byte_end":251420,"line_start":331,"line_end":331,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251037,"byte_end":251120,"line_start":326,"line_end":326,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251125,"byte_end":251128,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251133,"byte_end":251220,"line_start":328,"line_end":328,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251225,"byte_end":251313,"line_start":329,"line_end":329,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251318,"byte_end":251400,"line_start":330,"line_end":330,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2722},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251747,"byte_end":251753,"line_start":342,"line_end":342,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251693,"byte_end":251721,"line_start":340,"line_end":340,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251726,"byte_end":251735,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2723},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251865,"byte_end":251871,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251811,"byte_end":251839,"line_start":346,"line_end":346,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251844,"byte_end":251853,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2724},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252220,"byte_end":252228,"line_start":358,"line_end":358,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251929,"byte_end":251986,"line_start":352,"line_end":352,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251991,"byte_end":251994,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":251999,"byte_end":252074,"line_start":354,"line_end":354,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252079,"byte_end":252153,"line_start":355,"line_end":355,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252158,"byte_end":252194,"line_start":356,"line_end":356,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252199,"byte_end":252208,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2725},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252578,"byte_end":252584,"line_start":368,"line_end":368,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252288,"byte_end":252344,"line_start":362,"line_end":362,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252349,"byte_end":252352,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252357,"byte_end":252432,"line_start":364,"line_end":364,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252437,"byte_end":252511,"line_start":365,"line_end":365,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252516,"byte_end":252552,"line_start":366,"line_end":366,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252557,"byte_end":252566,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2726},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252932,"byte_end":252938,"line_start":378,"line_end":378,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Size2D<T, U>>::to_u64","value":"pub fn to_u64(Self) -> Size2D<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252642,"byte_end":252698,"line_start":372,"line_end":372,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252703,"byte_end":252706,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252711,"byte_end":252786,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252791,"byte_end":252865,"line_start":375,"line_end":375,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252870,"byte_end":252906,"line_start":376,"line_end":376,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252911,"byte_end":252920,"line_start":377,"line_end":377,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253286,"byte_end":253292,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":252996,"byte_end":253052,"line_start":382,"line_end":382,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253057,"byte_end":253060,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253065,"byte_end":253140,"line_start":384,"line_end":384,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253145,"byte_end":253219,"line_start":385,"line_end":385,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253224,"byte_end":253260,"line_start":386,"line_end":386,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253265,"byte_end":253274,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253640,"byte_end":253646,"line_start":398,"line_end":398,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253350,"byte_end":253406,"line_start":392,"line_end":392,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253411,"byte_end":253414,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253419,"byte_end":253494,"line_start":394,"line_end":394,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253499,"byte_end":253573,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253578,"byte_end":253614,"line_start":396,"line_end":396,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253619,"byte_end":253628,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253808,"byte_end":253817,"line_start":406,"line_end":406,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Size2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253739,"byte_end":253782,"line_start":404,"line_end":404,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253787,"byte_end":253796,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2736},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254207,"byte_end":254210,"line_start":417,"line_end":417,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size2D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253939,"byte_end":253989,"line_start":412,"line_end":412,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253994,"byte_end":253997,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254002,"byte_end":254090,"line_start":414,"line_end":414,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254095,"byte_end":254098,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254103,"byte_end":254195,"line_start":416,"line_end":416,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254397,"byte_end":254408,"line_start":422,"line_end":422,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size2D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if both components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if both components is positive and `false` any component is zero or negative.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254289,"byte_end":254385,"line_start":421,"line_end":421,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254646,"byte_end":254649,"line_start":430,"line_end":430,"column_start":12,"column_end":15},"name":"min","qualname":"<Size2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254538,"byte_end":254620,"line_start":428,"line_end":428,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254625,"byte_end":254634,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254874,"byte_end":254877,"line_start":436,"line_end":436,"column_start":12,"column_end":15},"name":"max","qualname":"<Size2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254766,"byte_end":254848,"line_start":434,"line_end":434,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254853,"byte_end":254862,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2743},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255187,"byte_end":255192,"line_start":445,"line_end":445,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254994,"byte_end":255063,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255068,"byte_end":255104,"line_start":441,"line_end":441,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255109,"byte_end":255112,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255117,"byte_end":255161,"line_start":443,"line_end":443,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255166,"byte_end":255175,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255418,"byte_end":255426,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"contains","qualname":"<Size2D<T, U>>::contains","value":"pub fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255397,"byte_end":255406,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2745},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255622,"byte_end":255634,"line_start":459,"line_end":459,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater then\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255532,"byte_end":255610,"line_start":458,"line_end":458,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255888,"byte_end":255898,"line_start":467,"line_end":467,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower then\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":255800,"byte_end":255876,"line_start":466,"line_end":466,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256146,"byte_end":256154,"line_start":475,"line_end":475,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size2D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative, or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative, or NaN.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256064,"byte_end":256134,"line_start":474,"line_end":474,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2751},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256523,"byte_end":256528,"line_start":488,"line_end":488,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256440,"byte_end":256511,"line_start":487,"line_end":487,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256783,"byte_end":256792,"line_start":496,"line_end":496,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256696,"byte_end":256771,"line_start":495,"line_end":495,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2846},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260913,"byte_end":260918,"line_start":665,"line_end":665,"column_start":14,"column_end":19},"name":"size2","qualname":"::size::size2","value":"pub const fn size2<T, U>(T, T) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size2D::new(w, h)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size2D::new(w, h)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260851,"byte_end":260889,"line_start":663,"line_end":663,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260890,"byte_end":260899,"line_start":664,"line_end":664,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2873},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268346,"byte_end":268352,"line_start":944,"line_end":944,"column_start":12,"column_end":18},"name":"Size3D","qualname":"::size::Size3D","value":"Size3D { width, height, depth, _unit }","parent":null,"children":[{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879}],"decl_id":null,"docs":" A 3d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d size tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268290,"byte_end":268323,"line_start":942,"line_end":942,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268324,"byte_end":268334,"line_start":943,"line_end":943,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2876},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268440,"byte_end":268445,"line_start":946,"line_end":946,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size3D::width","value":"T","parent":{"krate":0,"index":2873},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268365,"byte_end":268431,"line_start":945,"line_end":945,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2877},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268529,"byte_end":268535,"line_start":948,"line_end":948,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size3D::height","value":"T","parent":{"krate":0,"index":2873},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268454,"byte_end":268520,"line_start":947,"line_end":947,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2878},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268619,"byte_end":268624,"line_start":950,"line_end":950,"column_start":9,"column_end":14},"name":"depth","qualname":"::size::Size3D::depth","value":"T","parent":{"krate":0,"index":2873},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `z` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `z` axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268544,"byte_end":268610,"line_start":949,"line_end":949,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2879},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268656,"byte_end":268661,"line_start":952,"line_end":952,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2910},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271013,"byte_end":271017,"line_start":1048,"line_end":1048,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270860,"byte_end":270931,"line_start":1045,"line_end":1045,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270936,"byte_end":270939,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270944,"byte_end":271001,"line_start":1047,"line_end":1047,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2911},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271203,"byte_end":271206,"line_start":1057,"line_end":1057,"column_start":18,"column_end":21},"name":"new","qualname":"<Size3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271134,"byte_end":271171,"line_start":1055,"line_end":1055,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271176,"byte_end":271185,"line_start":1056,"line_end":1056,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271454,"byte_end":271466,"line_start":1067,"line_end":1067,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271375,"byte_end":271428,"line_start":1065,"line_end":1065,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271433,"byte_end":271442,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2913},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271683,"byte_end":271688,"line_start":1073,"line_end":1073,"column_start":12,"column_end":17},"name":"splat","qualname":"<Size3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271600,"byte_end":271657,"line_start":1071,"line_end":1071,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271662,"byte_end":271671,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2914},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271952,"byte_end":271964,"line_start":1087,"line_end":1087,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size3D<T, U>>::from_untyped","value":"pub fn from_untyped(Size3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271890,"byte_end":271926,"line_start":1085,"line_end":1085,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":271931,"byte_end":271940,"line_start":1086,"line_end":1086,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2918},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272205,"byte_end":272213,"line_start":1095,"line_end":1095,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272095,"byte_end":272179,"line_start":1093,"line_end":1093,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272184,"byte_end":272193,"line_start":1094,"line_end":1094,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2920},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272399,"byte_end":272407,"line_start":1101,"line_end":1101,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272289,"byte_end":272373,"line_start":1099,"line_end":1099,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272378,"byte_end":272387,"line_start":1100,"line_end":1100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272574,"byte_end":272583,"line_start":1107,"line_end":1107,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width, height and depth.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width, height and depth.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272486,"byte_end":272548,"line_start":1105,"line_end":1105,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272553,"byte_end":272562,"line_start":1106,"line_end":1106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272751,"byte_end":272761,"line_start":1113,"line_end":1113,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272671,"byte_end":272725,"line_start":1111,"line_end":1111,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272730,"byte_end":272739,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2923},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272875,"byte_end":272884,"line_start":1119,"line_end":1119,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272832,"byte_end":272849,"line_start":1117,"line_end":1117,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272854,"byte_end":272863,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2925},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273349,"byte_end":273354,"line_start":1135,"line_end":1135,"column_start":12,"column_end":17},"name":"round","qualname":"<Size3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272980,"byte_end":273035,"line_start":1123,"line_end":1123,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273040,"byte_end":273043,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273048,"byte_end":273123,"line_start":1125,"line_end":1125,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273128,"byte_end":273131,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273136,"byte_end":273147,"line_start":1127,"line_end":1127,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273152,"byte_end":273176,"line_start":1128,"line_end":1128,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273181,"byte_end":273195,"line_start":1129,"line_end":1129,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273200,"byte_end":273203,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).round(), size3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273208,"byte_end":273295,"line_start":1131,"line_end":1131,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273300,"byte_end":273307,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273312,"byte_end":273321,"line_start":1133,"line_end":1133,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273326,"byte_end":273337,"line_start":1134,"line_end":1134,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273898,"byte_end":273902,"line_start":1154,"line_end":1154,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273495,"byte_end":273586,"line_start":1142,"line_end":1142,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273591,"byte_end":273594,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273599,"byte_end":273674,"line_start":1144,"line_end":1144,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273679,"byte_end":273682,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273687,"byte_end":273698,"line_start":1146,"line_end":1146,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273703,"byte_end":273727,"line_start":1147,"line_end":1147,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273732,"byte_end":273746,"line_start":1148,"line_end":1148,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273751,"byte_end":273754,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), size3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273759,"byte_end":273844,"line_start":1150,"line_end":1150,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273849,"byte_end":273856,"line_start":1151,"line_end":1151,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273861,"byte_end":273870,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":273875,"byte_end":273886,"line_start":1153,"line_end":1153,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274442,"byte_end":274447,"line_start":1173,"line_end":1173,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274039,"byte_end":274127,"line_start":1161,"line_end":1161,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274132,"byte_end":274135,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274140,"byte_end":274215,"line_start":1163,"line_end":1163,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274220,"byte_end":274223,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274228,"byte_end":274239,"line_start":1165,"line_end":1165,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274244,"byte_end":274268,"line_start":1166,"line_end":1166,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274273,"byte_end":274287,"line_start":1167,"line_end":1167,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274292,"byte_end":274295,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).floor(), size3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274300,"byte_end":274388,"line_start":1169,"line_end":1169,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274393,"byte_end":274400,"line_start":1170,"line_end":1170,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274405,"byte_end":274414,"line_start":1171,"line_end":1171,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274419,"byte_end":274430,"line_start":1172,"line_end":1172,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274654,"byte_end":274660,"line_start":1181,"line_end":1181,"column_start":12,"column_end":18},"name":"volume","qualname":"<Size3D<T, U>>::volume","value":"pub fn volume(Self) -> T where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of all components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of all components","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274588,"byte_end":274642,"line_start":1180,"line_end":1180,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275443,"byte_end":275447,"line_start":1206,"line_end":1206,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this size and another size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274773,"byte_end":274833,"line_start":1188,"line_end":1188,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274838,"byte_end":274841,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274846,"byte_end":274859,"line_start":1190,"line_end":1190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274864,"byte_end":274867,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274872,"byte_end":274883,"line_start":1192,"line_end":1192,"column_start":5,"column_end":16}},{"value":"/ use euclid::size3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274888,"byte_end":274910,"line_start":1193,"line_end":1193,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274915,"byte_end":274947,"line_start":1194,"line_end":1194,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274952,"byte_end":274955,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ let from: Size3D<_> = size3(0.0, 10.0, -1.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":274960,"byte_end":275009,"line_start":1196,"line_end":1196,"column_start":5,"column_end":54}},{"value":"/ let to:  Size3D<_> = size3(8.0, -4.0,  0.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275014,"byte_end":275062,"line_start":1197,"line_end":1197,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275067,"byte_end":275070,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size3(-8.0,  24.0, -2.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275075,"byte_end":275137,"line_start":1199,"line_end":1199,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size3( 0.0,  10.0, -1.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275142,"byte_end":275204,"line_start":1200,"line_end":1200,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size3( 4.0,   3.0, -0.5));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275209,"byte_end":275271,"line_start":1201,"line_end":1201,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size3( 8.0,  -4.0,  0.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275276,"byte_end":275338,"line_start":1202,"line_end":1202,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size3(16.0, -18.0,  1.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275343,"byte_end":275405,"line_start":1203,"line_end":1203,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275410,"byte_end":275417,"line_start":1204,"line_end":1204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275422,"byte_end":275431,"line_start":1205,"line_end":1205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2933},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276069,"byte_end":276073,"line_start":1222,"line_end":1222,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275689,"byte_end":275763,"line_start":1216,"line_end":1216,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275768,"byte_end":275771,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275776,"byte_end":275863,"line_start":1218,"line_end":1218,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275868,"byte_end":275956,"line_start":1219,"line_end":1219,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275961,"byte_end":276043,"line_start":1220,"line_end":1220,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276048,"byte_end":276057,"line_start":1221,"line_end":1221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276535,"byte_end":276543,"line_start":1231,"line_end":1231,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276160,"byte_end":276243,"line_start":1226,"line_end":1226,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276248,"byte_end":276251,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276256,"byte_end":276343,"line_start":1228,"line_end":1228,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276348,"byte_end":276436,"line_start":1229,"line_end":1229,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276441,"byte_end":276523,"line_start":1230,"line_end":1230,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276956,"byte_end":276962,"line_start":1246,"line_end":1246,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276902,"byte_end":276930,"line_start":1244,"line_end":1244,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":276935,"byte_end":276944,"line_start":1245,"line_end":1245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277074,"byte_end":277080,"line_start":1252,"line_end":1252,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277020,"byte_end":277048,"line_start":1250,"line_end":1250,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277053,"byte_end":277062,"line_start":1251,"line_end":1251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2939},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277429,"byte_end":277437,"line_start":1262,"line_end":1262,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277138,"byte_end":277195,"line_start":1256,"line_end":1256,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277200,"byte_end":277203,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277208,"byte_end":277283,"line_start":1258,"line_end":1258,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277288,"byte_end":277362,"line_start":1259,"line_end":1259,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277367,"byte_end":277403,"line_start":1260,"line_end":1260,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277408,"byte_end":277417,"line_start":1261,"line_end":1261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277787,"byte_end":277793,"line_start":1272,"line_end":1272,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277497,"byte_end":277553,"line_start":1266,"line_end":1266,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277558,"byte_end":277561,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277566,"byte_end":277641,"line_start":1268,"line_end":1268,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277646,"byte_end":277720,"line_start":1269,"line_end":1269,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277725,"byte_end":277761,"line_start":1270,"line_end":1270,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277766,"byte_end":277775,"line_start":1271,"line_end":1271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278141,"byte_end":278147,"line_start":1282,"line_end":1282,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277851,"byte_end":277907,"line_start":1276,"line_end":1276,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277912,"byte_end":277915,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":277920,"byte_end":277995,"line_start":1278,"line_end":1278,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278000,"byte_end":278074,"line_start":1279,"line_end":1279,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278079,"byte_end":278115,"line_start":1280,"line_end":1280,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278120,"byte_end":278129,"line_start":1281,"line_end":1281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278495,"byte_end":278501,"line_start":1292,"line_end":1292,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278205,"byte_end":278261,"line_start":1286,"line_end":1286,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278266,"byte_end":278269,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278274,"byte_end":278349,"line_start":1288,"line_end":1288,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278354,"byte_end":278428,"line_start":1289,"line_end":1289,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278433,"byte_end":278469,"line_start":1290,"line_end":1290,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278474,"byte_end":278483,"line_start":1291,"line_end":1291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278663,"byte_end":278672,"line_start":1300,"line_end":1300,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Size3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278594,"byte_end":278637,"line_start":1298,"line_end":1298,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278642,"byte_end":278651,"line_start":1299,"line_end":1299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2950},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279088,"byte_end":279091,"line_start":1311,"line_end":1311,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size3D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278820,"byte_end":278870,"line_start":1306,"line_end":1306,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278875,"byte_end":278878,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278883,"byte_end":278971,"line_start":1308,"line_end":1308,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278976,"byte_end":278979,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278984,"byte_end":279076,"line_start":1310,"line_end":1310,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2951},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279295,"byte_end":279306,"line_start":1316,"line_end":1316,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size3D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components is positive and `false` any component is zero or negative.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279188,"byte_end":279283,"line_start":1315,"line_end":1315,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2955},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279572,"byte_end":279575,"line_start":1324,"line_end":1324,"column_start":12,"column_end":15},"name":"min","qualname":"<Size3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279464,"byte_end":279546,"line_start":1322,"line_end":1322,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279551,"byte_end":279560,"line_start":1323,"line_end":1323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2956},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279877,"byte_end":279880,"line_start":1334,"line_end":1334,"column_start":12,"column_end":15},"name":"max","qualname":"<Size3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279769,"byte_end":279851,"line_start":1332,"line_end":1332,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279856,"byte_end":279865,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2957},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280267,"byte_end":280272,"line_start":1347,"line_end":1347,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280074,"byte_end":280143,"line_start":1342,"line_end":1342,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280148,"byte_end":280184,"line_start":1343,"line_end":1343,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280189,"byte_end":280192,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280197,"byte_end":280241,"line_start":1345,"line_end":1345,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280246,"byte_end":280255,"line_start":1346,"line_end":1346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2958},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280498,"byte_end":280506,"line_start":1356,"line_end":1356,"column_start":12,"column_end":20},"name":"contains","qualname":"<Size3D<T, U>>::contains","value":"pub fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280477,"byte_end":280486,"line_start":1355,"line_end":1355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2959},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280732,"byte_end":280744,"line_start":1362,"line_end":1362,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280642,"byte_end":280720,"line_start":1361,"line_end":1361,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281039,"byte_end":281049,"line_start":1371,"line_end":1371,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":280951,"byte_end":281027,"line_start":1370,"line_end":1370,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281337,"byte_end":281345,"line_start":1380,"line_end":1380,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size3D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative or NaN.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281256,"byte_end":281325,"line_start":1379,"line_end":1379,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281629,"byte_end":281634,"line_start":1391,"line_end":1391,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281546,"byte_end":281617,"line_start":1390,"line_end":1390,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281931,"byte_end":281940,"line_start":1400,"line_end":1400,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281844,"byte_end":281919,"line_start":1399,"line_end":1399,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":3084},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287895,"byte_end":287900,"line_start":1656,"line_end":1656,"column_start":14,"column_end":19},"name":"size3","qualname":"::size::size3","value":"pub const fn size3<T, U>(T, T, T) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size3D::new(w, h, d)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size3D::new(w, h, d)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287830,"byte_end":287871,"line_start":1654,"line_end":1654,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287872,"byte_end":287881,"line_start":1655,"line_end":1655,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3164},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296747,"byte_end":296758,"line_start":66,"line_end":66,"column_start":12,"column_end":23},"name":"Transform2D","qualname":"::transform2d::Transform2D","value":"Transform2D { m11, m12, m21, m22, m31, m32, _unit }","parent":null,"children":[{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3171},{"krate":0,"index":3172},{"krate":0,"index":3173},{"krate":0,"index":3174}],"decl_id":null,"docs":" A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","sig":null,"attributes":[{"value":"/ A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295259,"byte_end":295349,"line_start":34,"line_end":34,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295350,"byte_end":295353,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295354,"byte_end":295441,"line_start":36,"line_end":36,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295442,"byte_end":295485,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform2D<f32, WorldSpace, ScreenSpace>::transform_point4d`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295486,"byte_end":295565,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ takes a `Point2D<f32, WorldSpace>` and returns a `Point2D<f32, ScreenSpace>`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295566,"byte_end":295647,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295648,"byte_end":295651,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295652,"byte_end":295737,"line_start":41,"line_end":41,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295738,"byte_end":295821,"line_start":42,"line_end":42,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295822,"byte_end":295909,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295910,"byte_end":295962,"line_start":44,"line_end":44,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295963,"byte_end":295966,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The matrix representation is conceptually equivalent to a 3 by 3 matrix transformation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":295967,"byte_end":296057,"line_start":46,"line_end":46,"column_start":1,"column_end":91}},{"value":"/ compressed to 3 by 2 with the components that aren't needed to describe the set of 2d","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296058,"byte_end":296147,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"/ transformations we are interested in implicitly defined:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296148,"byte_end":296208,"line_start":48,"line_end":48,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296209,"byte_end":296212,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296213,"byte_end":296224,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/  | m11 m12 0 |   |x|   |x'|","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296225,"byte_end":296256,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/  | m21 m22 0 | x |y| = |y'|","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296257,"byte_end":296288,"line_start":52,"line_end":52,"column_start":1,"column_end":32}},{"value":"/  | m31 m32 1 |   |1|   |w |","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296289,"byte_end":296320,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296321,"byte_end":296328,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296329,"byte_end":296332,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ When translating Transform2D into general matrix representations, consider that the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296333,"byte_end":296420,"line_start":56,"line_end":56,"column_start":1,"column_end":88}},{"value":"/ representation follows the column-major notation with column vectors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296421,"byte_end":296494,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296495,"byte_end":296498,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m31 and m32.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296499,"byte_end":296541,"line_start":59,"line_end":59,"column_start":1,"column_end":43}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296542,"byte_end":296552,"line_start":60,"line_end":60,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3168},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296782,"byte_end":296785,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform2d::Transform2D::m11","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296794,"byte_end":296797,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform2d::Transform2D::m12","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3170},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296810,"byte_end":296813,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform2d::Transform2D::m21","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3171},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296822,"byte_end":296825,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform2d::Transform2D::m22","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3172},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296838,"byte_end":296841,"line_start":69,"line_end":69,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform2d::Transform2D::m31","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3173},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296850,"byte_end":296853,"line_start":69,"line_end":69,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform2d::Transform2D::m32","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3174},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":296885,"byte_end":296890,"line_start":71,"line_end":71,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform2d::Transform2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3203},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299233,"byte_end":299236,"line_start":156,"line_end":156,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform2D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its components in using the column-major-column-vector\n matrix notation.","sig":null,"attributes":[{"value":"/ Create a transform specifying its components in using the column-major-column-vector","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298767,"byte_end":298855,"line_start":141,"line_end":141,"column_start":5,"column_end":93}},{"value":"/ matrix notation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298860,"byte_end":298880,"line_start":142,"line_end":142,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298885,"byte_end":298888,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ For example, the translation terms m31 and m32 are the last two parameters parameters.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298893,"byte_end":298983,"line_start":144,"line_end":144,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298988,"byte_end":298991,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298996,"byte_end":299003,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299008,"byte_end":299045,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299050,"byte_end":299067,"line_start":148,"line_end":148,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299072,"byte_end":299089,"line_start":149,"line_end":149,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform2D::new(","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299094,"byte_end":299133,"line_start":150,"line_end":150,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299138,"byte_end":299153,"line_start":151,"line_end":151,"column_start":5,"column_end":20}},{"value":"/   0.0, 1.0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299158,"byte_end":299173,"line_start":152,"line_end":152,"column_start":5,"column_end":20}},{"value":"/   tx,  ty,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299178,"byte_end":299192,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/ );","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299197,"byte_end":299203,"line_start":154,"line_end":154,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299208,"byte_end":299215,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3204},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299762,"byte_end":299771,"line_start":172,"line_end":172,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform2D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299436,"byte_end":299517,"line_start":165,"line_end":165,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299522,"byte_end":299552,"line_start":166,"line_end":166,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299557,"byte_end":299560,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299565,"byte_end":299645,"line_start":168,"line_end":168,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299650,"byte_end":299653,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299658,"byte_end":299736,"line_start":170,"line_end":170,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299741,"byte_end":299750,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3205},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300233,"byte_end":300246,"line_start":184,"line_end":184,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform2D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299896,"byte_end":299977,"line_start":177,"line_end":177,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":299982,"byte_end":300011,"line_start":178,"line_end":178,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300016,"byte_end":300019,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300024,"byte_end":300108,"line_start":180,"line_end":180,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300113,"byte_end":300116,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300121,"byte_end":300207,"line_start":182,"line_end":182,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300212,"byte_end":300221,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3210},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300812,"byte_end":300820,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300443,"byte_end":300498,"line_start":191,"line_end":191,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300503,"byte_end":300506,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300511,"byte_end":300567,"line_start":193,"line_end":193,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform2D::new`, that is following the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300572,"byte_end":300630,"line_start":194,"line_end":194,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300635,"byte_end":300682,"line_start":195,"line_end":195,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300687,"byte_end":300690,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found in the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300695,"byte_end":300749,"line_start":197,"line_end":197,"column_start":5,"column_end":59}},{"value":"/ last two slots of the array.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300754,"byte_end":300786,"line_start":198,"line_end":198,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300791,"byte_end":300800,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3212},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301368,"byte_end":301387,"line_start":217,"line_end":217,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform2D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300966,"byte_end":301032,"line_start":208,"line_end":208,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301037,"byte_end":301040,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301045,"byte_end":301114,"line_start":210,"line_end":210,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301119,"byte_end":301188,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301193,"byte_end":301241,"line_start":212,"line_end":212,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301246,"byte_end":301249,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 2 and 5","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301254,"byte_end":301320,"line_start":214,"line_end":214,"column_start":5,"column_end":71}},{"value":"/ in the array.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301325,"byte_end":301342,"line_start":215,"line_end":215,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301347,"byte_end":301356,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3214},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301641,"byte_end":301650,"line_start":227,"line_end":227,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform2D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed two at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed two at a time","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301521,"byte_end":301584,"line_start":224,"line_end":224,"column_start":5,"column_end":68}},{"value":"/ in an array of arrays.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301589,"byte_end":301615,"line_start":225,"line_end":225,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301620,"byte_end":301629,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3217},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302115,"byte_end":302125,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform2D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 6 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301808,"byte_end":301868,"line_start":235,"line_end":235,"column_start":5,"column_end":65}},{"value":"/ of 6 elements instead of as individual parameters.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301873,"byte_end":301927,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301932,"byte_end":301935,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301940,"byte_end":301990,"line_start":238,"line_end":238,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":301995,"byte_end":302057,"line_start":239,"line_end":239,"column_start":5,"column_end":67}},{"value":"/ as `Transform2D::new`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302062,"byte_end":302089,"line_start":240,"line_end":240,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302094,"byte_end":302103,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3219},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302571,"byte_end":302582,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform2D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed two at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed two at a time","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302287,"byte_end":302352,"line_start":250,"line_end":250,"column_start":5,"column_end":70}},{"value":"/ in an array of arrays.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302357,"byte_end":302383,"line_start":251,"line_end":251,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302388,"byte_end":302391,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302396,"byte_end":302446,"line_start":253,"line_end":253,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302451,"byte_end":302513,"line_start":254,"line_end":254,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302518,"byte_end":302545,"line_start":255,"line_end":255,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302550,"byte_end":302559,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3222},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302847,"byte_end":302857,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302767,"byte_end":302821,"line_start":265,"line_end":265,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":302826,"byte_end":302835,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3223},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303115,"byte_end":303127,"line_start":277,"line_end":277,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303053,"byte_end":303089,"line_start":275,"line_end":275,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303094,"byte_end":303103,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303394,"byte_end":303405,"line_start":287,"line_end":287,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform2D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303308,"byte_end":303368,"line_start":285,"line_end":285,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303373,"byte_end":303382,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3226},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303688,"byte_end":303704,"line_start":297,"line_end":297,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform2D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303597,"byte_end":303662,"line_start":295,"line_end":295,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303667,"byte_end":303676,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3228},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303960,"byte_end":303965,"line_start":306,"line_end":306,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Transform2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a 3D transform from the current transform\n","sig":null,"attributes":[{"value":"/ Create a 3D transform from the current transform","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":303896,"byte_end":303948,"line_start":305,"line_end":305,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304302,"byte_end":304306,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform2D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform2D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304202,"byte_end":304276,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304281,"byte_end":304290,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3235},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304501,"byte_end":304509,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform2D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform2D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304406,"byte_end":304489,"line_start":321,"line_end":321,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305285,"byte_end":305293,"line_start":352,"line_end":352,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an identity matrix:","sig":null,"attributes":[{"value":"/ Create an identity matrix:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305157,"byte_end":305187,"line_start":344,"line_end":344,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305192,"byte_end":305195,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305200,"byte_end":305211,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305216,"byte_end":305223,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305228,"byte_end":305235,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305240,"byte_end":305247,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305252,"byte_end":305259,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305264,"byte_end":305273,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3247},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305986,"byte_end":305990,"line_start":376,"line_end":376,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform2D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform2D<T, Dst, NewDst>)\n-> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305832,"byte_end":305913,"line_start":373,"line_end":373,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305918,"byte_end":305958,"line_start":374,"line_end":374,"column_start":5,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305963,"byte_end":305974,"line_start":375,"line_end":375,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3253},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306736,"byte_end":306747,"line_start":403,"line_end":403,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform2D<T, Src, Dst>>::translation","value":"pub fn translation(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d translation transform:","sig":null,"attributes":[{"value":"/ Create a 2d translation transform:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306600,"byte_end":306638,"line_start":395,"line_end":395,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306643,"byte_end":306646,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306651,"byte_end":306662,"line_start":397,"line_end":397,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306667,"byte_end":306674,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306679,"byte_end":306686,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ x y","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306691,"byte_end":306698,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306703,"byte_end":306710,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306715,"byte_end":306724,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3256},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307074,"byte_end":307088,"line_start":417,"line_end":417,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform2D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector2D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation after self's transformation and returns the resulting transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306942,"byte_end":307032,"line_start":414,"line_end":414,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307037,"byte_end":307046,"line_start":415,"line_end":415,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307051,"byte_end":307062,"line_start":416,"line_end":416,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3257},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307393,"byte_end":307406,"line_start":427,"line_end":427,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform2D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector2D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation before self's transformation and returns the resulting transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307260,"byte_end":307351,"line_start":424,"line_end":424,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307356,"byte_end":307365,"line_start":425,"line_end":425,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307370,"byte_end":307381,"line_start":426,"line_end":426,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307834,"byte_end":307842,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform2D<T, Src, Dst>>::rotation","value":"pub fn rotation(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation transform.\n","sig":null,"attributes":[{"value":"/ Returns a rotation transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307775,"byte_end":307808,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307813,"byte_end":307822,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308219,"byte_end":308230,"line_start":456,"line_end":456,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform2D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation after self's transformation and returns the resulting transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308090,"byte_end":308177,"line_start":453,"line_end":453,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308182,"byte_end":308191,"line_start":454,"line_end":454,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308196,"byte_end":308207,"line_start":455,"line_end":455,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3264},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308455,"byte_end":308465,"line_start":463,"line_end":463,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform2D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation before self's transformation and returns the resulting transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308325,"byte_end":308413,"line_start":460,"line_end":460,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308418,"byte_end":308427,"line_start":461,"line_end":461,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308432,"byte_end":308443,"line_start":462,"line_end":462,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3269},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308797,"byte_end":308802,"line_start":478,"line_end":478,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform2D<T, Src, Dst>>::scale","value":"pub fn scale(T, T) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d scale transform:","sig":null,"attributes":[{"value":"/ Create a 2d scale transform:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308667,"byte_end":308699,"line_start":470,"line_end":470,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308704,"byte_end":308707,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308712,"byte_end":308723,"line_start":472,"line_end":472,"column_start":5,"column_end":16}},{"value":"/ x 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308728,"byte_end":308735,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ 0 y","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308740,"byte_end":308747,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308752,"byte_end":308759,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308764,"byte_end":308771,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308776,"byte_end":308785,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309127,"byte_end":309137,"line_start":494,"line_end":494,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform2D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale after self's transformation and returns the resulting transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309001,"byte_end":309085,"line_start":491,"line_end":491,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309090,"byte_end":309099,"line_start":492,"line_end":492,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309104,"byte_end":309115,"line_start":493,"line_end":493,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309424,"byte_end":309433,"line_start":504,"line_end":504,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform2D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T) -> Self where T: Copy + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale before self's transformation and returns the resulting transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309297,"byte_end":309382,"line_start":501,"line_end":501,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309387,"byte_end":309396,"line_start":502,"line_end":502,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309401,"byte_end":309412,"line_start":503,"line_end":503,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3277},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309925,"byte_end":309940,"line_start":524,"line_end":524,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Transform2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this transform.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309825,"byte_end":309883,"line_start":521,"line_end":521,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309888,"byte_end":309897,"line_start":522,"line_end":522,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309902,"byte_end":309913,"line_start":523,"line_end":523,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3278},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310261,"byte_end":310277,"line_start":534,"line_end":534,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Transform2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this matrix.\n","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this matrix.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310163,"byte_end":310219,"line_start":531,"line_end":531,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310224,"byte_end":310233,"line_start":532,"line_end":532,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310238,"byte_end":310249,"line_start":533,"line_end":533,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3279},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310597,"byte_end":310619,"line_start":543,"line_end":543,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310441,"byte_end":310536,"line_start":539,"line_end":539,"column_start":5,"column_end":100}},{"value":"/ transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310541,"byte_end":310555,"line_start":540,"line_end":540,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310560,"byte_end":310569,"line_start":541,"line_end":541,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":310574,"byte_end":310585,"line_start":542,"line_end":542,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3280},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311174,"byte_end":311195,"line_start":562,"line_end":562,"column_start":12,"column_end":33},"name":"outer_transformed_box","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_box","value":"pub fn outer_transformed_box(&Self, &Box2D<T, Src>) -> Box2D<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a box that encompasses the result of transforming the given box by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a box that encompasses the result of transforming the given box by this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311030,"byte_end":311113,"line_start":558,"line_end":558,"column_start":5,"column_end":88}},{"value":"/ transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311118,"byte_end":311132,"line_start":559,"line_end":559,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311137,"byte_end":311146,"line_start":560,"line_end":560,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311151,"byte_end":311162,"line_start":561,"line_end":561,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3285},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311774,"byte_end":311785,"line_start":581,"line_end":581,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform2D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes and returns the determinant of this transform.\n","sig":null,"attributes":[{"value":"/ Computes and returns the determinant of this transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311703,"byte_end":311762,"line_start":580,"line_end":580,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3286},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311955,"byte_end":311968,"line_start":587,"line_end":587,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform2D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311861,"byte_end":311929,"line_start":585,"line_end":585,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311934,"byte_end":311943,"line_start":586,"line_end":586,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312114,"byte_end":312121,"line_start":593,"line_end":593,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform2D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312040,"byte_end":312086,"line_start":591,"line_end":591,"column_start":5,"column_end":51}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312091,"byte_end":312102,"line_start":592,"line_end":592,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3405},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321229,"byte_end":321240,"line_start":66,"line_end":66,"column_start":12,"column_end":23},"name":"Transform3D","qualname":"::transform3d::Transform3D","value":"Transform3D { m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, _unit }","parent":null,"children":[{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3420},{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3425}],"decl_id":null,"docs":" A 3d transform stored as a column-major 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ A 3d transform stored as a column-major 4 by 4 matrix.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":319958,"byte_end":320016,"line_start":37,"line_end":37,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320017,"byte_end":320020,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320021,"byte_end":320108,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320109,"byte_end":320152,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform3D<f32, WorldSpace, ScreenSpace>::transform_point3d`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320153,"byte_end":320232,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ takes a `Point3D<f32, WorldSpace>` and returns a `Point3D<f32, ScreenSpace>`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320233,"byte_end":320314,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320315,"byte_end":320318,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320319,"byte_end":320404,"line_start":44,"line_end":44,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320405,"byte_end":320488,"line_start":45,"line_end":45,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320489,"byte_end":320576,"line_start":46,"line_end":46,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320577,"byte_end":320629,"line_start":47,"line_end":47,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320630,"byte_end":320633,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ When translating Transform3D into general matrix representations, consider that the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320634,"byte_end":320721,"line_start":49,"line_end":49,"column_start":1,"column_end":88}},{"value":"/ representation follows the column major notation with column vectors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320722,"byte_end":320795,"line_start":50,"line_end":50,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320796,"byte_end":320799,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320800,"byte_end":320811,"line_start":52,"line_end":52,"column_start":1,"column_end":12}},{"value":"/  |x'|   | m11 m12 m13 m14 |   |x|","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320812,"byte_end":320849,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/  |y'|   | m21 m22 m23 m24 |   |y|","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320850,"byte_end":320887,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/  |z'| = | m31 m32 m33 m34 | x |y|","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320888,"byte_end":320925,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/  |w |   | m41 m42 m43 m44 |   |1|","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320926,"byte_end":320963,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320964,"byte_end":320971,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320972,"byte_end":320975,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m41, m42 and m43.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":320976,"byte_end":321023,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321024,"byte_end":321034,"line_start":60,"line_end":60,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3409},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321264,"byte_end":321267,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform3d::Transform3D::m11","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3410},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321276,"byte_end":321279,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform3d::Transform3D::m12","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3411},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321288,"byte_end":321291,"line_start":67,"line_end":67,"column_start":33,"column_end":36},"name":"m13","qualname":"::transform3d::Transform3D::m13","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3412},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321300,"byte_end":321303,"line_start":67,"line_end":67,"column_start":45,"column_end":48},"name":"m14","qualname":"::transform3d::Transform3D::m14","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3413},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321316,"byte_end":321319,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform3d::Transform3D::m21","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3414},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321328,"byte_end":321331,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform3d::Transform3D::m22","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3415},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321340,"byte_end":321343,"line_start":68,"line_end":68,"column_start":33,"column_end":36},"name":"m23","qualname":"::transform3d::Transform3D::m23","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3416},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321352,"byte_end":321355,"line_start":68,"line_end":68,"column_start":45,"column_end":48},"name":"m24","qualname":"::transform3d::Transform3D::m24","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3417},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321368,"byte_end":321371,"line_start":69,"line_end":69,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform3d::Transform3D::m31","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3418},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321380,"byte_end":321383,"line_start":69,"line_end":69,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform3d::Transform3D::m32","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3419},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321392,"byte_end":321395,"line_start":69,"line_end":69,"column_start":33,"column_end":36},"name":"m33","qualname":"::transform3d::Transform3D::m33","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3420},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321404,"byte_end":321407,"line_start":69,"line_end":69,"column_start":45,"column_end":48},"name":"m34","qualname":"::transform3d::Transform3D::m34","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3421},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321420,"byte_end":321423,"line_start":70,"line_end":70,"column_start":9,"column_end":12},"name":"m41","qualname":"::transform3d::Transform3D::m41","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3422},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321432,"byte_end":321435,"line_start":70,"line_end":70,"column_start":21,"column_end":24},"name":"m42","qualname":"::transform3d::Transform3D::m42","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321444,"byte_end":321447,"line_start":70,"line_end":70,"column_start":33,"column_end":36},"name":"m43","qualname":"::transform3d::Transform3D::m43","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3424},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321456,"byte_end":321459,"line_start":70,"line_end":70,"column_start":45,"column_end":48},"name":"m44","qualname":"::transform3d::Transform3D::m44","value":"T","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3425},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":321491,"byte_end":321496,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform3d::Transform3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3454},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325474,"byte_end":325477,"line_start":211,"line_end":211,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying all of it's component as a 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ Create a transform specifying all of it's component as a 4 by 4 matrix.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324791,"byte_end":324866,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324871,"byte_end":324874,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Components are specified following column-major-column-vector matrix notation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324879,"byte_end":324961,"line_start":194,"line_end":194,"column_start":5,"column_end":87}},{"value":"/ For example, the translation terms m41, m42, m43 are the 13rd, 14th and 15th parameters.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324966,"byte_end":325058,"line_start":195,"line_end":195,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325063,"byte_end":325066,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325071,"byte_end":325078,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325083,"byte_end":325120,"line_start":198,"line_end":198,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325125,"byte_end":325142,"line_start":199,"line_end":199,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325147,"byte_end":325164,"line_start":200,"line_end":200,"column_start":5,"column_end":22}},{"value":"/ let tz = 3.0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325169,"byte_end":325186,"line_start":201,"line_end":201,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform3D::new(","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325191,"byte_end":325230,"line_start":202,"line_end":202,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0, 0.0, 0.0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325235,"byte_end":325260,"line_start":203,"line_end":203,"column_start":5,"column_end":30}},{"value":"/   0.0, 1.0, 0.0, 0.0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325265,"byte_end":325290,"line_start":204,"line_end":204,"column_start":5,"column_end":30}},{"value":"/   0.0, 0.0, 1.0, 0.0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325295,"byte_end":325320,"line_start":205,"line_end":205,"column_start":5,"column_end":30}},{"value":"/   tx,  ty,  tz,  1.0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325325,"byte_end":325350,"line_start":206,"line_end":206,"column_start":5,"column_end":30}},{"value":"/ );","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325355,"byte_end":325361,"line_start":207,"line_end":207,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325366,"byte_end":325373,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325378,"byte_end":325387,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3455},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326272,"byte_end":326278,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"new_2d","qualname":"<Transform3D<T, Src, Dst>>::new_2d","value":"pub fn new_2d(T, T, T, T, T, T) -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a transform representing a 2d transformation from the components\n of a 2 by 3 matrix transformation.","sig":null,"attributes":[{"value":"/ Create a transform representing a 2d transformation from the components","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325858,"byte_end":325933,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/ of a 2 by 3 matrix transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325938,"byte_end":325976,"line_start":227,"line_end":227,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325981,"byte_end":325984,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Components follow the column-major-column-vector notation (m41 and m42","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":325989,"byte_end":326063,"line_start":229,"line_end":229,"column_start":5,"column_end":79}},{"value":"/ representating the translation terms).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326068,"byte_end":326110,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326115,"byte_end":326118,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326123,"byte_end":326134,"line_start":232,"line_end":232,"column_start":5,"column_end":16}},{"value":"/ m11  m12   0   0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326139,"byte_end":326159,"line_start":233,"line_end":233,"column_start":5,"column_end":25}},{"value":"/ m21  m22   0   0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326164,"byte_end":326184,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/   0    0   1   0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326189,"byte_end":326209,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/ m41  m42   0   1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326214,"byte_end":326234,"line_start":236,"line_end":236,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326239,"byte_end":326246,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326251,"byte_end":326260,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3458},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326798,"byte_end":326803,"line_start":259,"line_end":259,"column_start":12,"column_end":17},"name":"is_2d","qualname":"<Transform3D<T, Src, Dst>>::is_2d","value":"pub fn is_2d(&Self) -> bool where T: Zero + One + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this transform can be represented with a `Transform2D`.","sig":null,"attributes":[{"value":"/ Returns `true` if this transform can be represented with a `Transform2D`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326619,"byte_end":326696,"line_start":255,"line_end":255,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326701,"byte_end":326704,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#2d-transform>","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326709,"byte_end":326772,"line_start":257,"line_end":257,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":326777,"byte_end":326786,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3463},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327590,"byte_end":327598,"line_start":282,"line_end":282,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327210,"byte_end":327265,"line_start":273,"line_end":273,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327270,"byte_end":327273,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327278,"byte_end":327334,"line_start":275,"line_end":275,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform3D::new`, that is following the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327339,"byte_end":327397,"line_start":276,"line_end":276,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327402,"byte_end":327449,"line_start":277,"line_end":277,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327454,"byte_end":327457,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found on the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327462,"byte_end":327516,"line_start":279,"line_end":279,"column_start":5,"column_end":59}},{"value":"/ 13th, 14th and 15th slots of the array.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327521,"byte_end":327564,"line_start":280,"line_end":280,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327569,"byte_end":327578,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3465},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328263,"byte_end":328282,"line_start":300,"line_end":300,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327857,"byte_end":327923,"line_start":291,"line_end":291,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327928,"byte_end":327931,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327936,"byte_end":328005,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328010,"byte_end":328079,"line_start":294,"line_end":294,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328084,"byte_end":328132,"line_start":295,"line_end":295,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328137,"byte_end":328140,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 3, 7 and 11","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328145,"byte_end":328215,"line_start":297,"line_end":297,"column_start":5,"column_end":75}},{"value":"/ of the array.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328220,"byte_end":328237,"line_start":298,"line_end":298,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328242,"byte_end":328251,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3467},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328662,"byte_end":328671,"line_start":312,"line_end":312,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform3D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed four at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed four at a time","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328541,"byte_end":328605,"line_start":309,"line_end":309,"column_start":5,"column_end":69}},{"value":"/ in an array of arrays.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328610,"byte_end":328636,"line_start":310,"line_end":310,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328641,"byte_end":328650,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329074,"byte_end":329094,"line_start":324,"line_end":324,"column_start":12,"column_end":32},"name":"to_arrays_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_arrays_transposed","value":"pub fn to_arrays_transposed(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array_transposed` with elements packed\n four at a time in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array_transposed` with elements packed","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":328942,"byte_end":329002,"line_start":321,"line_end":321,"column_start":5,"column_end":65}},{"value":"/ four at a time in an array of arrays.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329007,"byte_end":329048,"line_start":322,"line_end":322,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329053,"byte_end":329062,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3473},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329673,"byte_end":329683,"line_start":340,"line_end":340,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform3D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 16 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329365,"byte_end":329425,"line_start":333,"line_end":333,"column_start":5,"column_end":65}},{"value":"/ of 16 elements instead of as individual parameters.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329430,"byte_end":329485,"line_start":334,"line_end":334,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329490,"byte_end":329493,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329498,"byte_end":329548,"line_start":336,"line_end":336,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329553,"byte_end":329615,"line_start":337,"line_end":337,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329620,"byte_end":329647,"line_start":338,"line_end":338,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329652,"byte_end":329661,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3475},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330257,"byte_end":330268,"line_start":356,"line_end":356,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform3D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed four at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed four at a time","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":329972,"byte_end":330038,"line_start":349,"line_end":349,"column_start":5,"column_end":71}},{"value":"/ in an array of arrays.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330043,"byte_end":330069,"line_start":350,"line_end":350,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330074,"byte_end":330077,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330082,"byte_end":330132,"line_start":352,"line_end":352,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330137,"byte_end":330199,"line_start":353,"line_end":353,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330204,"byte_end":330231,"line_start":354,"line_end":354,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330236,"byte_end":330245,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3478},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330657,"byte_end":330669,"line_start":367,"line_end":367,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330595,"byte_end":330631,"line_start":365,"line_end":365,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330636,"byte_end":330645,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3479},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331013,"byte_end":331023,"line_start":378,"line_end":378,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330933,"byte_end":330987,"line_start":376,"line_end":376,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":330992,"byte_end":331001,"line_start":377,"line_end":377,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3480},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331418,"byte_end":331429,"line_start":389,"line_end":389,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform3D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331332,"byte_end":331392,"line_start":387,"line_end":387,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331397,"byte_end":331406,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331824,"byte_end":331840,"line_start":400,"line_end":400,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform3D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331733,"byte_end":331798,"line_start":398,"line_end":398,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":331803,"byte_end":331812,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332433,"byte_end":332438,"line_start":415,"line_end":415,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Transform3D<T, Src, Dst>>::to_2d","value":"pub fn to_2d(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Create a 2D transform picking the relevant terms from this transform.","sig":null,"attributes":[{"value":"/ Create a 2D transform picking the relevant terms from this transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332144,"byte_end":332217,"line_start":409,"line_end":409,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332222,"byte_end":332225,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This method assumes that self represents a 2d transformation, callers","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332230,"byte_end":332303,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ should check that [`self.is_2d()`] returns `true` beforehand.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332308,"byte_end":332373,"line_start":412,"line_end":412,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332378,"byte_end":332381,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`self.is_2d()`]: #method.is_2d","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332386,"byte_end":332421,"line_start":414,"line_end":414,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3489},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332848,"byte_end":332856,"line_start":437,"line_end":437,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity matrix:","sig":null,"attributes":[{"value":"/ Creates an identity matrix:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332691,"byte_end":332722,"line_start":428,"line_end":428,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332727,"byte_end":332730,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332735,"byte_end":332746,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332751,"byte_end":332762,"line_start":431,"line_end":431,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332767,"byte_end":332778,"line_start":432,"line_end":432,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332783,"byte_end":332794,"line_start":433,"line_end":433,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332799,"byte_end":332810,"line_start":434,"line_end":434,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332815,"byte_end":332822,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332827,"byte_end":332836,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3491},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333386,"byte_end":333390,"line_start":455,"line_end":455,"column_start":12,"column_end":16},"name":"skew","qualname":"<Transform3D<T, Src, Dst>>::skew","value":"pub fn skew(Angle<T>, Angle<T>) -> Self where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d skew transform.","sig":null,"attributes":[{"value":"/ Create a 2d skew transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333267,"byte_end":333298,"line_start":452,"line_end":452,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333303,"byte_end":333306,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#funcdef-skew>","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333311,"byte_end":333374,"line_start":454,"line_end":454,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3494},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334075,"byte_end":334086,"line_start":481,"line_end":481,"column_start":12,"column_end":23},"name":"perspective","qualname":"<Transform3D<T, Src, Dst>>::perspective","value":"pub fn perspective(T) -> Self where T: Neg<Output = T> + Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Create a simple perspective transform, projecting to the plane `z = -d`.","sig":null,"attributes":[{"value":"/ Create a simple perspective transform, projecting to the plane `z = -d`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333777,"byte_end":333853,"line_start":471,"line_end":471,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333858,"byte_end":333861,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333866,"byte_end":333877,"line_start":473,"line_end":473,"column_start":5,"column_end":16}},{"value":"/ 1   0   0   0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333882,"byte_end":333899,"line_start":474,"line_end":474,"column_start":5,"column_end":22}},{"value":"/ 0   1   0   0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333904,"byte_end":333921,"line_start":475,"line_end":475,"column_start":5,"column_end":22}},{"value":"/ 0   0   1 -1/d","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333926,"byte_end":333944,"line_start":476,"line_end":476,"column_start":5,"column_end":23}},{"value":"/ 0   0   0   1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333949,"byte_end":333966,"line_start":477,"line_end":477,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333971,"byte_end":333978,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333983,"byte_end":333986,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms-2/#PerspectiveDefined>.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":333991,"byte_end":334063,"line_start":480,"line_end":480,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3501},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334796,"byte_end":334800,"line_start":508,"line_end":508,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform3D<T, Dst, NewDst>)\n-> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334571,"byte_end":334652,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334657,"byte_end":334697,"line_start":504,"line_end":504,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334702,"byte_end":334705,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to self * mat","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334710,"byte_end":334768,"line_start":506,"line_end":506,"column_start":5,"column_end":63}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334773,"byte_end":334784,"line_start":507,"line_end":507,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3507},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336984,"byte_end":336995,"line_start":547,"line_end":547,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform3D<T, Src, Dst>>::translation","value":"pub fn translation(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d translation transform:","sig":null,"attributes":[{"value":"/ Create a 3d translation transform:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336820,"byte_end":336858,"line_start":538,"line_end":538,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336863,"byte_end":336866,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336871,"byte_end":336882,"line_start":540,"line_end":540,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336887,"byte_end":336898,"line_start":541,"line_end":541,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336903,"byte_end":336914,"line_start":542,"line_end":542,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336919,"byte_end":336930,"line_start":543,"line_end":543,"column_start":5,"column_end":16}},{"value":"/ x y z 1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336935,"byte_end":336946,"line_start":544,"line_end":544,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336951,"byte_end":336958,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336963,"byte_end":336972,"line_start":546,"line_end":546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3510},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337378,"byte_end":337391,"line_start":561,"line_end":561,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform3D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector3D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied before self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337270,"byte_end":337350,"line_start":559,"line_end":559,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337355,"byte_end":337366,"line_start":560,"line_end":560,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3511},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337674,"byte_end":337688,"line_start":570,"line_end":570,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform3D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector3D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied after self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337567,"byte_end":337646,"line_start":568,"line_end":568,"column_start":5,"column_end":84}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337651,"byte_end":337662,"line_start":569,"line_end":569,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3516},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":338201,"byte_end":338209,"line_start":585,"line_end":585,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform3D<T, Src, Dst>>::rotation","value":"pub fn rotation(T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d rotation transform from an angle / axis.\n The supplied axis must be normalized.\n","sig":null,"attributes":[{"value":"/ Create a 3d rotation transform from an angle / axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":338087,"byte_end":338143,"line_start":583,"line_end":583,"column_start":5,"column_end":61}},{"value":"/ The supplied axis must be normalized.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":338148,"byte_end":338189,"line_start":584,"line_end":584,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3517},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339186,"byte_end":339197,"line_start":623,"line_end":623,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform3D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied after self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339082,"byte_end":339158,"line_start":621,"line_end":621,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339163,"byte_end":339174,"line_start":622,"line_end":622,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3518},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339424,"byte_end":339434,"line_start":629,"line_end":629,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform3D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied before self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339319,"byte_end":339396,"line_start":627,"line_end":627,"column_start":5,"column_end":82}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339401,"byte_end":339412,"line_start":628,"line_end":628,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3523},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339846,"byte_end":339851,"line_start":648,"line_end":648,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform3D<T, Src, Dst>>::scale","value":"pub fn scale(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d scale transform:","sig":null,"attributes":[{"value":"/ Create a 3d scale transform:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339688,"byte_end":339720,"line_start":639,"line_end":639,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339725,"byte_end":339728,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339733,"byte_end":339744,"line_start":641,"line_end":641,"column_start":5,"column_end":16}},{"value":"/ x 0 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339749,"byte_end":339760,"line_start":642,"line_end":642,"column_start":5,"column_end":16}},{"value":"/ 0 y 0 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339765,"byte_end":339776,"line_start":643,"line_end":643,"column_start":5,"column_end":16}},{"value":"/ 0 0 z 0","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339781,"byte_end":339792,"line_start":644,"line_end":644,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339797,"byte_end":339808,"line_start":645,"line_end":645,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339813,"byte_end":339820,"line_start":646,"line_end":646,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339825,"byte_end":339834,"line_start":647,"line_end":647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3526},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340228,"byte_end":340237,"line_start":662,"line_end":662,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform3D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied before self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340126,"byte_end":340200,"line_start":660,"line_end":660,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340205,"byte_end":340216,"line_start":661,"line_end":661,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3527},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340755,"byte_end":340765,"line_start":676,"line_end":676,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform3D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied after self's transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340654,"byte_end":340727,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340732,"byte_end":340743,"line_start":675,"line_end":675,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3532},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341280,"byte_end":341309,"line_start":693,"line_end":693,"column_start":12,"column_end":41},"name":"transform_point2d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d_homogeneous","value":"pub fn transform_point2d_homogeneous(&Self, Point2D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 2d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 2d point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341078,"byte_end":341155,"line_start":689,"line_end":689,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341160,"byte_end":341163,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341168,"byte_end":341254,"line_start":691,"line_end":691,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341259,"byte_end":341268,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3533},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341922,"byte_end":341939,"line_start":709,"line_end":709,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Option<Point2D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this transform, if the transform makes sense,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341677,"byte_end":341768,"line_start":704,"line_end":704,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341773,"byte_end":341797,"line_start":705,"line_end":705,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341802,"byte_end":341805,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341810,"byte_end":341896,"line_start":707,"line_end":707,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":341901,"byte_end":341910,"line_start":708,"line_end":708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3534},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342657,"byte_end":342675,"line_start":729,"line_end":729,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this matrix.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342473,"byte_end":342532,"line_start":725,"line_end":725,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342537,"byte_end":342540,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342545,"byte_end":342631,"line_start":727,"line_end":727,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342636,"byte_end":342645,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3535},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343053,"byte_end":343082,"line_start":740,"line_end":740,"column_start":12,"column_end":41},"name":"transform_point3d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d_homogeneous","value":"pub fn transform_point3d_homogeneous(&Self, Point3D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 3d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 3d point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342851,"byte_end":342928,"line_start":736,"line_end":736,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342933,"byte_end":342936,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":342941,"byte_end":343027,"line_start":738,"line_end":738,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343032,"byte_end":343041,"line_start":739,"line_end":739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3536},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343763,"byte_end":343780,"line_start":756,"line_end":756,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Option<Point3D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this transform, if the transform makes sense,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343518,"byte_end":343609,"line_start":751,"line_end":751,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343614,"byte_end":343638,"line_start":752,"line_end":752,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343643,"byte_end":343646,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343651,"byte_end":343737,"line_start":754,"line_end":754,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343742,"byte_end":343751,"line_start":755,"line_end":755,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3537},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344153,"byte_end":344171,"line_start":767,"line_end":767,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this matrix.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":343969,"byte_end":344028,"line_start":763,"line_end":763,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344033,"byte_end":344036,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344041,"byte_end":344127,"line_start":765,"line_end":765,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344132,"byte_end":344141,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3538},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344627,"byte_end":344649,"line_start":777,"line_end":777,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Option<Rect<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344443,"byte_end":344538,"line_start":775,"line_end":775,"column_start":5,"column_end":100}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":344543,"byte_end":344615,"line_start":776,"line_end":776,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3539},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":345278,"byte_end":345301,"line_start":793,"line_end":793,"column_start":12,"column_end":35},"name":"outer_transformed_box2d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box2d","value":"pub fn outer_transformed_box2d(&Self, &Box2D<T, Src>) -> Option<Box2D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 2d box that encompasses the result of transforming the given box by this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":345103,"byte_end":345189,"line_start":791,"line_end":791,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":345194,"byte_end":345266,"line_start":792,"line_end":792,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3540},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":345882,"byte_end":345905,"line_start":807,"line_end":807,"column_start":12,"column_end":35},"name":"outer_transformed_box3d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box3d","value":"pub fn outer_transformed_box3d(&Self, &Box3D<T, Src>) -> Option<Box3D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 3d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 3d box that encompasses the result of transforming the given box by this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":345707,"byte_end":345793,"line_start":805,"line_end":805,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":345798,"byte_end":345870,"line_start":806,"line_end":806,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3545},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":346976,"byte_end":346981,"line_start":836,"line_end":836,"column_start":12,"column_end":17},"name":"ortho","qualname":"<Transform3D<T, Src, Dst>>::ortho","value":"pub fn ortho(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an orthogonal projection transform.\n","sig":null,"attributes":[{"value":"/ Create an orthogonal projection transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":346918,"byte_end":346964,"line_start":835,"line_end":835,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3546},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":347824,"byte_end":347843,"line_start":855,"line_end":855,"column_start":12,"column_end":31},"name":"is_backface_visible","qualname":"<Transform3D<T, Src, Dst>>::is_backface_visible","value":"pub fn is_backface_visible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether shapes on the XY plane with Z pointing towards the\n screen transformed by this matrix would be facing back.\n","sig":null,"attributes":[{"value":"/ Check whether shapes on the XY plane with Z pointing towards the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":347680,"byte_end":347748,"line_start":853,"line_end":853,"column_start":5,"column_end":73}},{"value":"/ screen transformed by this matrix would be facing back.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":347753,"byte_end":347812,"line_start":854,"line_end":854,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3547},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":348344,"byte_end":348357,"line_start":867,"line_end":867,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform3D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":348250,"byte_end":348318,"line_start":865,"line_end":865,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":348323,"byte_end":348332,"line_start":866,"line_end":866,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3548},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":348487,"byte_end":348494,"line_start":872,"line_end":872,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform3D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":348429,"byte_end":348475,"line_start":871,"line_end":871,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3549},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":352289,"byte_end":352300,"line_start":952,"line_end":952,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform3D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute the determinant of the transform.\n","sig":null,"attributes":[{"value":"/ Compute the determinant of the transform.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":352232,"byte_end":352277,"line_start":951,"line_end":951,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3550},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":353683,"byte_end":353688,"line_start":981,"line_end":981,"column_start":12,"column_end":17},"name":"mul_s","qualname":"<Transform3D<T, Src, Dst>>::mul_s","value":"pub fn mul_s(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies all of the transform's component by a scalar and returns the result.\n","sig":null,"attributes":[{"value":"/ Multiplies all of the transform's component by a scalar and returns the result.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":353572,"byte_end":353655,"line_start":979,"line_end":979,"column_start":5,"column_end":88}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":353660,"byte_end":353671,"line_start":980,"line_end":980,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3551},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":354110,"byte_end":354120,"line_start":991,"line_end":991,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Transform3D<T, Src, Dst>>::from_scale","value":"pub fn from_scale(Scale<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a scale transform from a `Scale`.\n","sig":null,"attributes":[{"value":"/ Convenience function to create a scale transform from a `Scale`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":354030,"byte_end":354098,"line_start":990,"line_end":990,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3556},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":354430,"byte_end":354443,"line_start":1001,"line_end":1001,"column_start":12,"column_end":25},"name":"project_to_2d","qualname":"<Transform3D<T, Src, Dst>>::project_to_2d","value":"pub fn project_to_2d(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a projection of this transform in 2d space.\n","sig":null,"attributes":[{"value":"/ Returns a projection of this transform in 2d space.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":354363,"byte_end":354418,"line_start":1000,"line_end":1000,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3561},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":355940,"byte_end":355944,"line_start":1040,"line_end":1040,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform3D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform3D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":355840,"byte_end":355914,"line_start":1038,"line_end":1038,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":355919,"byte_end":355928,"line_start":1039,"line_end":1039,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3563},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":356139,"byte_end":356147,"line_start":1045,"line_end":1045,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform3D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform3D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":356044,"byte_end":356127,"line_start":1044,"line_end":1044,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3569},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357676,"byte_end":357685,"line_start":1076,"line_end":1076,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform3D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357350,"byte_end":357431,"line_start":1069,"line_end":1069,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357436,"byte_end":357466,"line_start":1070,"line_end":1070,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357471,"byte_end":357474,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357479,"byte_end":357559,"line_start":1072,"line_end":1072,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357564,"byte_end":357567,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357572,"byte_end":357650,"line_start":1074,"line_end":1074,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357655,"byte_end":357664,"line_start":1075,"line_end":1075,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3570},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":358121,"byte_end":358134,"line_start":1087,"line_end":1087,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform3D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357784,"byte_end":357865,"line_start":1080,"line_end":1080,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357870,"byte_end":357899,"line_start":1081,"line_end":1081,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357904,"byte_end":357907,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357912,"byte_end":357996,"line_start":1083,"line_end":1083,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":358001,"byte_end":358004,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":358009,"byte_end":358095,"line_start":1085,"line_end":1085,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":358100,"byte_end":358109,"line_start":1086,"line_end":1086,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3668},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372324,"byte_end":372337,"line_start":53,"line_end":53,"column_start":12,"column_end":25},"name":"Translation2D","qualname":"::translation::Translation2D","value":"Translation2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3674}],"decl_id":null,"docs":" A 2d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 2d transformation from a space to another that can only express translations.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371423,"byte_end":371506,"line_start":24,"line_end":24,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371507,"byte_end":371510,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector2D is the ability to cast","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371511,"byte_end":371583,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371584,"byte_end":371630,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371631,"byte_end":371634,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371635,"byte_end":371647,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371648,"byte_end":371651,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371652,"byte_end":371659,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use euclid::{Translation2D, Point2D, point2};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371660,"byte_end":371709,"line_start":32,"line_end":32,"column_start":1,"column_end":50}},{"value":"/ struct ParentSpace;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371710,"byte_end":371733,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ struct ChildSpace;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371734,"byte_end":371756,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"/ type ScrollOffset = Translation2D<i32, ParentSpace, ChildSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371757,"byte_end":371825,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/ type ParentPoint = Point2D<i32, ParentSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371826,"byte_end":371875,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"/ type ChildPoint = Point2D<i32, ChildSpace>;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371876,"byte_end":371923,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371924,"byte_end":371927,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let scrolling = ScrollOffset::new(0, 100);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371928,"byte_end":371974,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/ let p1: ParentPoint = point2(0, 0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":371975,"byte_end":372014,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/ let p2: ChildPoint = scrolling.transform_point(p1);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372015,"byte_end":372070,"line_start":41,"line_end":41,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372071,"byte_end":372078,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372079,"byte_end":372082,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372083,"byte_end":372093,"line_start":44,"line_end":44,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3672},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372361,"byte_end":372362,"line_start":54,"line_end":54,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation2D::x","value":"T","parent":{"krate":0,"index":3668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3673},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372375,"byte_end":372376,"line_start":55,"line_end":55,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation2D::y","value":"T","parent":{"krate":0,"index":3668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3674},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372408,"byte_end":372413,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3668},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3703},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373656,"byte_end":373659,"line_start":111,"line_end":111,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation2D<T, Src, Dst>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373629,"byte_end":373638,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3704},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373810,"byte_end":373815,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"splat","qualname":"<Translation2D<T, Src, Dst>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373789,"byte_end":373798,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3705},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374072,"byte_end":374080,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (both `x` and `y` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (both `x` and `y` is `zero()`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373985,"byte_end":374046,"line_start":131,"line_end":131,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374051,"byte_end":374060,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3706},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374628,"byte_end":374639,"line_start":151,"line_end":151,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation2D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (both x and y is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (both x and y is `zero()`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374175,"byte_end":374240,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374245,"byte_end":374248,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374253,"byte_end":374264,"line_start":142,"line_end":142,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374269,"byte_end":374308,"line_start":143,"line_end":143,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374313,"byte_end":374316,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation2D::<f32>::identity().is_identity(), true);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374321,"byte_end":374390,"line_start":145,"line_end":145,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation2D::new(0, 0).is_identity(), true);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374395,"byte_end":374456,"line_start":146,"line_end":146,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(Translation2D::new(1, 0).is_identity(), false);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374461,"byte_end":374523,"line_start":147,"line_end":147,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Translation2D::new(0, 1).is_identity(), false);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374528,"byte_end":374590,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374595,"byte_end":374602,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374607,"byte_end":374616,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3707},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374832,"byte_end":374846,"line_start":161,"line_end":161,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation2D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(&Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374776,"byte_end":374806,"line_start":159,"line_end":159,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374811,"byte_end":374820,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3712},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375050,"byte_end":375059,"line_start":169,"line_end":169,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation2D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector2D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 2D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 2D vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374998,"byte_end":375024,"line_start":167,"line_end":167,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375029,"byte_end":375038,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3713},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375191,"byte_end":375199,"line_start":175,"line_end":175,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375129,"byte_end":375165,"line_start":173,"line_end":173,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375170,"byte_end":375179,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3715},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375316,"byte_end":375324,"line_start":181,"line_end":181,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation2D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375255,"byte_end":375290,"line_start":179,"line_end":179,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375295,"byte_end":375304,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3716},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375460,"byte_end":375470,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375380,"byte_end":375434,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375439,"byte_end":375448,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3717},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375711,"byte_end":375723,"line_start":197,"line_end":197,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375649,"byte_end":375685,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375690,"byte_end":375699,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3718},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375983,"byte_end":375995,"line_start":207,"line_end":207,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375899,"byte_end":375957,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":375962,"byte_end":375971,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3719},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376170,"byte_end":376185,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Translation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376104,"byte_end":376144,"line_start":214,"line_end":214,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376149,"byte_end":376158,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3720},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376396,"byte_end":376410,"line_start":225,"line_end":225,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation2D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376326,"byte_end":376370,"line_start":223,"line_end":223,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376375,"byte_end":376384,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3721},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376706,"byte_end":376719,"line_start":237,"line_end":237,"column_start":12,"column_end":25},"name":"transform_box","qualname":"<Translation2D<T, Src, Dst>>::transform_box","value":"pub fn transform_box(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376639,"byte_end":376680,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376685,"byte_end":376694,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3722},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376996,"byte_end":377003,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation2D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376932,"byte_end":376970,"line_start":247,"line_end":247,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":376975,"byte_end":376984,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3772},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379512,"byte_end":379525,"line_start":334,"line_end":334,"column_start":12,"column_end":25},"name":"Translation3D","qualname":"::translation::Translation3D","value":"Translation3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":3776},{"krate":0,"index":3777},{"krate":0,"index":3778},{"krate":0,"index":3779}],"decl_id":null,"docs":" A 3d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 3d transformation from a space to another that can only express translations.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379282,"byte_end":379365,"line_start":329,"line_end":329,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379366,"byte_end":379369,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector3D is the ability to cast","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379370,"byte_end":379442,"line_start":331,"line_end":331,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379443,"byte_end":379489,"line_start":332,"line_end":332,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379490,"byte_end":379500,"line_start":333,"line_end":333,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3776},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379549,"byte_end":379550,"line_start":335,"line_end":335,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation3D::x","value":"T","parent":{"krate":0,"index":3772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3777},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379563,"byte_end":379564,"line_start":336,"line_end":336,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation3D::y","value":"T","parent":{"krate":0,"index":3772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3778},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379577,"byte_end":379578,"line_start":337,"line_end":337,"column_start":9,"column_end":10},"name":"z","qualname":"::translation::Translation3D::z","value":"T","parent":{"krate":0,"index":3772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3779},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379610,"byte_end":379615,"line_start":339,"line_end":339,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3808},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381296,"byte_end":381299,"line_start":411,"line_end":411,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381269,"byte_end":381278,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3809},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381471,"byte_end":381476,"line_start":421,"line_end":421,"column_start":12,"column_end":17},"name":"splat","qualname":"<Translation3D<T, Src, Dst>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381450,"byte_end":381459,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381759,"byte_end":381767,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (`x`, `y` and `z` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (`x`, `y` and `z` is `zero()`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381672,"byte_end":381733,"line_start":433,"line_end":433,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381738,"byte_end":381747,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3811},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382418,"byte_end":382429,"line_start":454,"line_end":454,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation3D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (`x`, `y` and `z` is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (`x`, `y` and `z` is `zero()`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381882,"byte_end":381951,"line_start":442,"line_end":442,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381956,"byte_end":381959,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381964,"byte_end":381975,"line_start":444,"line_end":444,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381980,"byte_end":382019,"line_start":445,"line_end":445,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382024,"byte_end":382027,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation3D::<f32>::identity().is_identity(), true);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382032,"byte_end":382101,"line_start":447,"line_end":447,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 0).is_identity(), true);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382106,"byte_end":382170,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Translation3D::new(1, 0, 0).is_identity(), false);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382175,"byte_end":382240,"line_start":449,"line_end":449,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 1, 0).is_identity(), false);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382245,"byte_end":382310,"line_start":450,"line_end":450,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 1).is_identity(), false);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382315,"byte_end":382380,"line_start":451,"line_end":451,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382385,"byte_end":382392,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382397,"byte_end":382406,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3812},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382638,"byte_end":382652,"line_start":464,"line_end":464,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation3D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382582,"byte_end":382612,"line_start":462,"line_end":462,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382617,"byte_end":382626,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382855,"byte_end":382864,"line_start":472,"line_end":472,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation3D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector3D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 3D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 3D vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382803,"byte_end":382829,"line_start":470,"line_end":470,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382834,"byte_end":382843,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3818},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383007,"byte_end":383015,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382942,"byte_end":382981,"line_start":476,"line_end":476,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382986,"byte_end":382995,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3820},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383143,"byte_end":383151,"line_start":484,"line_end":484,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation3D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383079,"byte_end":383117,"line_start":482,"line_end":482,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383122,"byte_end":383131,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3821},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383298,"byte_end":383308,"line_start":490,"line_end":490,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383218,"byte_end":383272,"line_start":488,"line_end":488,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383277,"byte_end":383286,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383572,"byte_end":383584,"line_start":501,"line_end":501,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383510,"byte_end":383546,"line_start":499,"line_end":499,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383551,"byte_end":383560,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3823},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383864,"byte_end":383876,"line_start":512,"line_end":512,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383780,"byte_end":383838,"line_start":510,"line_end":510,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383843,"byte_end":383852,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3824},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384051,"byte_end":384068,"line_start":521,"line_end":521,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Translation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, &Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":383985,"byte_end":384025,"line_start":519,"line_end":519,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384030,"byte_end":384039,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384290,"byte_end":384307,"line_start":530,"line_end":530,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Translation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, &Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384224,"byte_end":384264,"line_start":528,"line_end":528,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384269,"byte_end":384278,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384516,"byte_end":384531,"line_start":539,"line_end":539,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Translation3D<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384449,"byte_end":384490,"line_start":537,"line_end":537,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384495,"byte_end":384504,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3827},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384817,"byte_end":384832,"line_start":551,"line_end":551,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Translation3D<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(&Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 3D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 3D box and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384750,"byte_end":384791,"line_start":549,"line_end":549,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":384796,"byte_end":384805,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385121,"byte_end":385135,"line_start":563,"line_end":563,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation3D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385051,"byte_end":385095,"line_start":561,"line_end":561,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385100,"byte_end":385109,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385423,"byte_end":385430,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation3D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385359,"byte_end":385397,"line_start":573,"line_end":573,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385402,"byte_end":385411,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3880},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395701,"byte_end":395705,"line_start":11,"line_end":11,"column_start":11,"column_end":15},"name":"Trig","qualname":"::trig::Trig","value":"Trig","parent":null,"children":[{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3883},{"krate":0,"index":3884},{"krate":0,"index":3885},{"krate":0,"index":3886}],"decl_id":null,"docs":" Trait for basic trigonometry functions, so they can be used on generic numeric types\n","sig":null,"attributes":[{"value":"/ Trait for basic trigonometry functions, so they can be used on generic numeric types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395602,"byte_end":395690,"line_start":10,"line_end":10,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3881},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395715,"byte_end":395718,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"sin","qualname":"::trig::Trig::sin","value":"pub fn sin(Self) -> Self","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395741,"byte_end":395744,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"cos","qualname":"::trig::Trig::cos","value":"pub fn cos(Self) -> Self","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3883},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395767,"byte_end":395770,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"tan","qualname":"::trig::Trig::tan","value":"pub fn tan(Self) -> Self","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3884},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395793,"byte_end":395803,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"fast_atan2","qualname":"::trig::Trig::fast_atan2","value":"pub fn fast_atan2(Self, Self) -> Self","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3885},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395838,"byte_end":395856,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"degrees_to_radians","qualname":"::trig::Trig::degrees_to_radians","value":"pub fn degrees_to_radians(Self) -> Self","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3886},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\trig.rs","byte_start":395884,"byte_end":395902,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"radians_to_degrees","qualname":"::trig::Trig::radians_to_degrees","value":"pub fn radians_to_degrees(Self) -> Self","parent":{"krate":0,"index":3880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4007},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399155,"byte_end":399163,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"Vector2D","qualname":"::vector::Vector2D","value":"Vector2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":4010},{"krate":0,"index":4011},{"krate":0,"index":4012}],"decl_id":null,"docs":" A 2d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Vector tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399097,"byte_end":399132,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399133,"byte_end":399143,"line_start":39,"line_end":39,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4010},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399236,"byte_end":399237,"line_start":42,"line_end":42,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector2D::x","value":"T","parent":{"krate":0,"index":4007},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399176,"byte_end":399227,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4011},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399304,"byte_end":399305,"line_start":44,"line_end":44,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector2D::y","value":"T","parent":{"krate":0,"index":4007},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399246,"byte_end":399295,"line_start":43,"line_end":43,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":4012},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399337,"byte_end":399342,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":4007},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4047},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401884,"byte_end":401888,"line_start":154,"line_end":154,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401810,"byte_end":401858,"line_start":152,"line_end":152,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401863,"byte_end":401872,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4048},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402066,"byte_end":402069,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"one","qualname":"<Vector2D<T, U>>::one","value":"pub fn one() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to one.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401993,"byte_end":402040,"line_start":161,"line_end":161,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402045,"byte_end":402054,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4049},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402247,"byte_end":402250,"line_start":172,"line_end":172,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402169,"byte_end":402215,"line_start":170,"line_end":170,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402220,"byte_end":402229,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4050},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402458,"byte_end":402463,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vector2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402375,"byte_end":402432,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402437,"byte_end":402446,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4051},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402679,"byte_end":402700,"line_start":194,"line_end":194,"column_start":12,"column_end":33},"name":"from_angle_and_length","qualname":"<Vector2D<T, U>>::from_angle_and_length","value":"pub fn from_angle_and_length(Angle<T>, T) -> Self where T: Trig + Mul<Output =\nT> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking angle and length\n","sig":null,"attributes":[{"value":"/ Constructor taking angle and length","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402628,"byte_end":402667,"line_start":193,"line_end":193,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4052},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402971,"byte_end":402983,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402879,"byte_end":402945,"line_start":201,"line_end":201,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":402950,"byte_end":402959,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4053},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403125,"byte_end":403137,"line_start":209,"line_end":209,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector2D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unit-less value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unit-less value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403062,"byte_end":403099,"line_start":207,"line_end":207,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403104,"byte_end":403113,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4054},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403781,"byte_end":403784,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector2D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403211,"byte_end":403274,"line_start":213,"line_end":213,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403279,"byte_end":403282,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403287,"byte_end":403300,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403305,"byte_end":403308,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403313,"byte_end":403324,"line_start":217,"line_end":217,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403329,"byte_end":403355,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403360,"byte_end":403383,"line_start":219,"line_end":219,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403388,"byte_end":403401,"line_start":220,"line_end":220,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403406,"byte_end":403409,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, U>(-1, 2).abs(), vec2(1, 2));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403414,"byte_end":403468,"line_start":222,"line_end":222,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403473,"byte_end":403476,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let vec = vec2::<_, U>(f32::NAN, -f32::MAX).abs();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403481,"byte_end":403535,"line_start":224,"line_end":224,"column_start":5,"column_end":59}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403540,"byte_end":403568,"line_start":225,"line_end":225,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, f32::MAX);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403573,"byte_end":403605,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403610,"byte_end":403617,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403622,"byte_end":403625,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403630,"byte_end":403642,"line_start":229,"line_end":229,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403647,"byte_end":403650,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403655,"byte_end":403734,"line_start":231,"line_end":231,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403739,"byte_end":403769,"line_start":232,"line_end":232,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4055},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403928,"byte_end":403931,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector2D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403886,"byte_end":403902,"line_start":240,"line_end":240,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":403907,"byte_end":403916,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4056},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404185,"byte_end":404190,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector2D<T, U>>::cross","value":"pub fn cross(Self, Self) -> T where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].\n","sig":null,"attributes":[{"value":"/ Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404073,"byte_end":404159,"line_start":249,"line_end":249,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404164,"byte_end":404173,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4057},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404423,"byte_end":404436,"line_start":260,"line_end":260,"column_start":12,"column_end":25},"name":"component_mul","qualname":"<Vector2D<T, U>>::component_mul","value":"pub fn component_mul(Self, Self) -> Self where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise multiplication of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise multiplication of the two vectors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404332,"byte_end":404397,"line_start":258,"line_end":258,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404402,"byte_end":404411,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4058},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404653,"byte_end":404666,"line_start":269,"line_end":269,"column_start":12,"column_end":25},"name":"component_div","qualname":"<Vector2D<T, U>>::component_div","value":"pub fn component_div(Self, Self) -> Self where T: Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise division of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise division of the two vectors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404568,"byte_end":404627,"line_start":267,"line_end":267,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404632,"byte_end":404641,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4062},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404926,"byte_end":404932,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vector2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d vector from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d vector from this one, using the specified z value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404834,"byte_end":404900,"line_start":278,"line_end":278,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404905,"byte_end":404914,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4063},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405132,"byte_end":405140,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector2D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405008,"byte_end":405042,"line_start":284,"line_end":284,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405047,"byte_end":405050,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405055,"byte_end":405106,"line_start":286,"line_end":286,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405111,"byte_end":405120,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4064},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405326,"byte_end":405328,"line_start":298,"line_end":298,"column_start":12,"column_end":14},"name":"yx","qualname":"<Vector2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.\n","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405283,"byte_end":405300,"line_start":296,"line_end":296,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405305,"byte_end":405314,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4065},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405444,"byte_end":405451,"line_start":304,"line_end":304,"column_start":12,"column_end":19},"name":"to_size","qualname":"<Vector2D<T, U>>::to_size","value":"pub fn to_size(Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a size.\n","sig":null,"attributes":[{"value":"/ Cast this vector into a size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405385,"byte_end":405418,"line_start":302,"line_end":302,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405423,"byte_end":405432,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4066},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405597,"byte_end":405607,"line_start":310,"line_end":310,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405517,"byte_end":405571,"line_start":308,"line_end":308,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405576,"byte_end":405585,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4067},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405728,"byte_end":405737,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405684,"byte_end":405702,"line_start":314,"line_end":314,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405707,"byte_end":405716,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4069},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405869,"byte_end":405877,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405807,"byte_end":405843,"line_start":320,"line_end":320,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405848,"byte_end":405857,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4071},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405993,"byte_end":406001,"line_start":328,"line_end":328,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405932,"byte_end":405967,"line_start":326,"line_end":326,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":405972,"byte_end":405981,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4072},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406153,"byte_end":406158,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Vector2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Vector3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d vector with `z` coordinate equals to `T::zero()`.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d vector with `z` coordinate equals to `T::zero()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406056,"byte_end":406127,"line_start":332,"line_end":332,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406132,"byte_end":406141,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4073},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406626,"byte_end":406631,"line_start":353,"line_end":353,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406270,"byte_end":406325,"line_start":341,"line_end":341,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406330,"byte_end":406333,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406338,"byte_end":406413,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406418,"byte_end":406421,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406426,"byte_end":406437,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406442,"byte_end":406465,"line_start":346,"line_end":346,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406470,"byte_end":406484,"line_start":347,"line_end":347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406489,"byte_end":406492,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).round(), vec2::<_, Mm>(0.0, -1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406497,"byte_end":406572,"line_start":349,"line_end":349,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406577,"byte_end":406584,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406589,"byte_end":406598,"line_start":351,"line_end":351,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406603,"byte_end":406614,"line_start":352,"line_end":352,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4074},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407126,"byte_end":407130,"line_start":372,"line_end":372,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406736,"byte_end":406827,"line_start":360,"line_end":360,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406832,"byte_end":406835,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406840,"byte_end":406915,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406920,"byte_end":406923,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406928,"byte_end":406939,"line_start":364,"line_end":364,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406944,"byte_end":406967,"line_start":365,"line_end":365,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406972,"byte_end":406986,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406991,"byte_end":406994,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).ceil(), vec2::<_, Mm>(0.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":406999,"byte_end":407072,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407077,"byte_end":407084,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407089,"byte_end":407098,"line_start":370,"line_end":370,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407103,"byte_end":407114,"line_start":371,"line_end":371,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4075},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407622,"byte_end":407627,"line_start":391,"line_end":391,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407232,"byte_end":407320,"line_start":379,"line_end":379,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407325,"byte_end":407328,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407333,"byte_end":407408,"line_start":381,"line_end":381,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407413,"byte_end":407416,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407421,"byte_end":407432,"line_start":383,"line_end":383,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407437,"byte_end":407460,"line_start":384,"line_end":384,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407465,"byte_end":407479,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407484,"byte_end":407487,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).floor(), vec2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407492,"byte_end":407568,"line_start":387,"line_end":387,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407573,"byte_end":407580,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407585,"byte_end":407594,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407599,"byte_end":407610,"line_start":390,"line_end":390,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4076},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407967,"byte_end":407984,"line_start":403,"line_end":403,"column_start":12,"column_end":29},"name":"angle_from_x_axis","qualname":"<Vector2D<T, U>>::angle_from_x_axis","value":"pub fn angle_from_x_axis(Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and the x axis.\n Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`\n is `+y` axis.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and the x axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407732,"byte_end":407796,"line_start":398,"line_end":398,"column_start":5,"column_end":69}},{"value":"/ Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407801,"byte_end":407875,"line_start":399,"line_end":399,"column_start":5,"column_end":79}},{"value":"/ is `+y` axis.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407880,"byte_end":407897,"line_start":400,"line_end":400,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407902,"byte_end":407905,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":407910,"byte_end":407955,"line_start":402,"line_end":402,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4077},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408185,"byte_end":408197,"line_start":412,"line_end":412,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector2D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform2D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units.\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408104,"byte_end":408159,"line_start":410,"line_end":410,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408164,"byte_end":408173,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4081},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408484,"byte_end":408497,"line_start":426,"line_end":426,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector2D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408418,"byte_end":408458,"line_start":424,"line_end":424,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408463,"byte_end":408472,"line_start":425,"line_end":425,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4082},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408717,"byte_end":408736,"line_start":434,"line_end":434,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector2D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408564,"byte_end":408615,"line_start":430,"line_end":430,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408620,"byte_end":408623,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408628,"byte_end":408691,"line_start":432,"line_end":432,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408696,"byte_end":408705,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4083},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409035,"byte_end":409043,"line_start":444,"line_end":444,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector2D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Sub<Output = T> + Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and another vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408897,"byte_end":408965,"line_start":441,"line_end":441,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408970,"byte_end":408973,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408978,"byte_end":409023,"line_start":443,"line_end":443,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4087},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409383,"byte_end":409399,"line_start":456,"line_end":456,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector2D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409251,"byte_end":409341,"line_start":453,"line_end":453,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409346,"byte_end":409355,"line_start":454,"line_end":454,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409360,"byte_end":409371,"line_start":455,"line_end":455,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4088},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409704,"byte_end":409713,"line_start":468,"line_end":468,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Vector2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409635,"byte_end":409678,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409683,"byte_end":409692,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4092},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409882,"byte_end":409888,"line_start":476,"line_end":476,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409826,"byte_end":409856,"line_start":474,"line_end":474,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409861,"byte_end":409870,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4093},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410038,"byte_end":410047,"line_start":483,"line_end":483,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector2D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409949,"byte_end":409996,"line_start":480,"line_end":480,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410001,"byte_end":410010,"line_start":481,"line_end":481,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410015,"byte_end":410026,"line_start":482,"line_end":482,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4094},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410337,"byte_end":410350,"line_start":493,"line_end":493,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector2D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410104,"byte_end":410151,"line_start":487,"line_end":487,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410156,"byte_end":410159,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410164,"byte_end":410257,"line_start":489,"line_end":489,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410262,"byte_end":410295,"line_start":490,"line_end":490,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410300,"byte_end":410309,"line_start":491,"line_end":491,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410314,"byte_end":410325,"line_start":492,"line_end":492,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4095},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410605,"byte_end":410616,"line_start":504,"line_end":504,"column_start":12,"column_end":23},"name":"with_length","qualname":"<Vector2D<T, U>>::with_length","value":"pub fn with_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector scaled to fit the provided length.\n","sig":null,"attributes":[{"value":"/ Return this vector scaled to fit the provided length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410522,"byte_end":410579,"line_start":502,"line_end":502,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410584,"byte_end":410593,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4096},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410765,"byte_end":410780,"line_start":510,"line_end":510,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector2D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410689,"byte_end":410739,"line_start":508,"line_end":508,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":410744,"byte_end":410753,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4097},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411092,"byte_end":411107,"line_start":521,"line_end":521,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector2D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411013,"byte_end":411066,"line_start":519,"line_end":519,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411071,"byte_end":411080,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4098},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411430,"byte_end":411442,"line_start":532,"line_end":532,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector2D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411340,"byte_end":411404,"line_start":530,"line_end":530,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411409,"byte_end":411418,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4102},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412330,"byte_end":412334,"line_start":560,"line_end":560,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411685,"byte_end":411764,"line_start":542,"line_end":542,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411769,"byte_end":411772,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411777,"byte_end":411790,"line_start":544,"line_end":544,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411795,"byte_end":411798,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411803,"byte_end":411814,"line_start":546,"line_end":546,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec2;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411819,"byte_end":411840,"line_start":547,"line_end":547,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector2D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411845,"byte_end":411879,"line_start":548,"line_end":548,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411884,"byte_end":411887,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ let from: Vector2D<_> = vec2(0.0, 10.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411892,"byte_end":411936,"line_start":550,"line_end":550,"column_start":5,"column_end":49}},{"value":"/ let to:  Vector2D<_> = vec2(8.0, -4.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411941,"byte_end":411984,"line_start":551,"line_end":551,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411989,"byte_end":411992,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec2(-8.0,  24.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411997,"byte_end":412052,"line_start":553,"line_end":553,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec2( 0.0,  10.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412057,"byte_end":412112,"line_start":554,"line_end":554,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec2( 4.0,   3.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412117,"byte_end":412172,"line_start":555,"line_end":555,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec2( 8.0,  -4.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412177,"byte_end":412232,"line_start":556,"line_end":556,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec2(16.0, -18.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412237,"byte_end":412292,"line_start":557,"line_end":557,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412297,"byte_end":412304,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412309,"byte_end":412318,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4103},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412549,"byte_end":412556,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector2D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412448,"byte_end":412523,"line_start":565,"line_end":565,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412528,"byte_end":412537,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4107},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412838,"byte_end":412841,"line_start":576,"line_end":576,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412726,"byte_end":412812,"line_start":574,"line_end":574,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412817,"byte_end":412826,"line_start":575,"line_end":575,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4108},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413051,"byte_end":413054,"line_start":582,"line_end":582,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412939,"byte_end":413025,"line_start":580,"line_end":580,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413030,"byte_end":413039,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4109},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413350,"byte_end":413355,"line_start":591,"line_end":591,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413152,"byte_end":413226,"line_start":586,"line_end":586,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413231,"byte_end":413267,"line_start":587,"line_end":587,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413272,"byte_end":413275,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413280,"byte_end":413324,"line_start":589,"line_end":589,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413329,"byte_end":413338,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4110},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413575,"byte_end":413587,"line_start":600,"line_end":600,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413471,"byte_end":413549,"line_start":598,"line_end":598,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413554,"byte_end":413563,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4111},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413837,"byte_end":413847,"line_start":609,"line_end":609,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413735,"byte_end":413811,"line_start":607,"line_end":607,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":413816,"byte_end":413825,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4115},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414133,"byte_end":414138,"line_start":620,"line_end":620,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414036,"byte_end":414107,"line_start":618,"line_end":618,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414112,"byte_end":414121,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414389,"byte_end":414398,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414288,"byte_end":414363,"line_start":627,"line_end":627,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414368,"byte_end":414377,"line_start":628,"line_end":628,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4120},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414975,"byte_end":414979,"line_start":644,"line_end":644,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414594,"byte_end":414668,"line_start":638,"line_end":638,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414673,"byte_end":414676,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414681,"byte_end":414769,"line_start":640,"line_end":640,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414774,"byte_end":414862,"line_start":641,"line_end":641,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414867,"byte_end":414949,"line_start":642,"line_end":642,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414954,"byte_end":414963,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4122},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415444,"byte_end":415452,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415068,"byte_end":415151,"line_start":648,"line_end":648,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415156,"byte_end":415159,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415164,"byte_end":415252,"line_start":650,"line_end":650,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415257,"byte_end":415345,"line_start":651,"line_end":651,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415350,"byte_end":415432,"line_start":652,"line_end":652,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":4124},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415777,"byte_end":415783,"line_start":664,"line_end":664,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415721,"byte_end":415751,"line_start":662,"line_end":662,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415756,"byte_end":415765,"line_start":663,"line_end":663,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4125},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415899,"byte_end":415905,"line_start":670,"line_end":670,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415843,"byte_end":415873,"line_start":668,"line_end":668,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415878,"byte_end":415887,"line_start":669,"line_end":669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4126},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416262,"byte_end":416270,"line_start":680,"line_end":680,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":415965,"byte_end":416025,"line_start":674,"line_end":674,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416030,"byte_end":416033,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416038,"byte_end":416116,"line_start":676,"line_end":676,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416121,"byte_end":416195,"line_start":677,"line_end":677,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416200,"byte_end":416236,"line_start":678,"line_end":678,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416241,"byte_end":416250,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4127},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416627,"byte_end":416633,"line_start":690,"line_end":690,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416332,"byte_end":416390,"line_start":684,"line_end":684,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416395,"byte_end":416398,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416403,"byte_end":416481,"line_start":686,"line_end":686,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416486,"byte_end":416560,"line_start":687,"line_end":687,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416565,"byte_end":416601,"line_start":688,"line_end":688,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416606,"byte_end":416615,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4128},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416986,"byte_end":416992,"line_start":700,"line_end":700,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416693,"byte_end":416749,"line_start":694,"line_end":694,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416754,"byte_end":416757,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416762,"byte_end":416840,"line_start":696,"line_end":696,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416845,"byte_end":416919,"line_start":697,"line_end":697,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416924,"byte_end":416960,"line_start":698,"line_end":698,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":416965,"byte_end":416974,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4129},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417345,"byte_end":417351,"line_start":710,"line_end":710,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417052,"byte_end":417108,"line_start":704,"line_end":704,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417113,"byte_end":417116,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417121,"byte_end":417199,"line_start":706,"line_end":706,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417204,"byte_end":417278,"line_start":707,"line_end":707,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417283,"byte_end":417319,"line_start":708,"line_end":708,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417324,"byte_end":417333,"line_start":709,"line_end":709,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4248},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422095,"byte_end":422103,"line_start":911,"line_end":911,"column_start":12,"column_end":20},"name":"Vector3D","qualname":"::vector::Vector3D","value":"Vector3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4254}],"decl_id":null,"docs":" A 3d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Vector tagged with a unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422037,"byte_end":422072,"line_start":909,"line_end":909,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422073,"byte_end":422083,"line_start":910,"line_end":910,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4251},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422176,"byte_end":422177,"line_start":913,"line_end":913,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector3D::x","value":"T","parent":{"krate":0,"index":4248},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422116,"byte_end":422167,"line_start":912,"line_end":912,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4252},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422244,"byte_end":422245,"line_start":915,"line_end":915,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector3D::y","value":"T","parent":{"krate":0,"index":4248},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422186,"byte_end":422235,"line_start":914,"line_end":914,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":4253},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422309,"byte_end":422310,"line_start":917,"line_end":917,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::Vector3D::z","value":"T","parent":{"krate":0,"index":4248},"children":[],"decl_id":null,"docs":" The `z` (traditionally, depth) coordinate.\n","sig":null,"attributes":[{"value":"/ The `z` (traditionally, depth) coordinate.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422254,"byte_end":422300,"line_start":916,"line_end":916,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4254},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422342,"byte_end":422347,"line_start":919,"line_end":919,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":4248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4289},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424708,"byte_end":424712,"line_start":1018,"line_end":1018,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424634,"byte_end":424682,"line_start":1016,"line_end":1016,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424687,"byte_end":424696,"line_start":1017,"line_end":1017,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4290},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424895,"byte_end":424898,"line_start":1027,"line_end":1027,"column_start":12,"column_end":15},"name":"one","qualname":"<Vector3D<T, U>>::one","value":"pub fn one() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to one.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424822,"byte_end":424869,"line_start":1025,"line_end":1025,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424874,"byte_end":424883,"line_start":1026,"line_end":1026,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4291},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425079,"byte_end":425082,"line_start":1036,"line_end":1036,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425001,"byte_end":425047,"line_start":1034,"line_end":1034,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425052,"byte_end":425061,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4292},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425310,"byte_end":425315,"line_start":1046,"line_end":1046,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vector3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425227,"byte_end":425284,"line_start":1044,"line_end":1044,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425289,"byte_end":425298,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4293},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425598,"byte_end":425610,"line_start":1060,"line_end":1060,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425506,"byte_end":425572,"line_start":1058,"line_end":1058,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425577,"byte_end":425586,"line_start":1059,"line_end":1059,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4294},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425783,"byte_end":425795,"line_start":1066,"line_end":1066,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector3D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425721,"byte_end":425757,"line_start":1064,"line_end":1064,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425762,"byte_end":425771,"line_start":1065,"line_end":1065,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4295},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426487,"byte_end":426490,"line_start":1091,"line_end":1091,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector3D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425874,"byte_end":425937,"line_start":1070,"line_end":1070,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425942,"byte_end":425945,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425950,"byte_end":425963,"line_start":1072,"line_end":1072,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425968,"byte_end":425971,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425976,"byte_end":425987,"line_start":1074,"line_end":1074,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":425992,"byte_end":426018,"line_start":1075,"line_end":1075,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426023,"byte_end":426046,"line_start":1076,"line_end":1076,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426051,"byte_end":426064,"line_start":1077,"line_end":1077,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426069,"byte_end":426072,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, U>(-1, 0, 2).abs(), vec3(1, 0, 2));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426077,"byte_end":426137,"line_start":1079,"line_end":1079,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426142,"byte_end":426145,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ let vec = vec3::<_, U>(f32::NAN, 0.0, -f32::MAX).abs();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426150,"byte_end":426209,"line_start":1081,"line_end":1081,"column_start":5,"column_end":64}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426214,"byte_end":426242,"line_start":1082,"line_end":1082,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, 0.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426247,"byte_end":426274,"line_start":1083,"line_end":1083,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec.z, f32::MAX);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426279,"byte_end":426311,"line_start":1084,"line_end":1084,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426316,"byte_end":426323,"line_start":1085,"line_end":1085,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426328,"byte_end":426331,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426336,"byte_end":426348,"line_start":1087,"line_end":1087,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426353,"byte_end":426356,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426361,"byte_end":426440,"line_start":1089,"line_end":1089,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426445,"byte_end":426475,"line_start":1090,"line_end":1090,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4296},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426648,"byte_end":426651,"line_start":1100,"line_end":1100,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector3D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426606,"byte_end":426622,"line_start":1098,"line_end":1098,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426627,"byte_end":426636,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4300},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426892,"byte_end":426897,"line_start":1111,"line_end":1111,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector3D<T, U>>::cross","value":"pub fn cross(Self, Self) -> Self where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Cross product.\n","sig":null,"attributes":[{"value":"/ Cross product.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426848,"byte_end":426866,"line_start":1109,"line_end":1109,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426871,"byte_end":426880,"line_start":1110,"line_end":1110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4301},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427260,"byte_end":427273,"line_start":1124,"line_end":1124,"column_start":12,"column_end":25},"name":"component_mul","qualname":"<Vector3D<T, U>>::component_mul","value":"pub fn component_mul(Self, Self) -> Self where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise multiplication of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise multiplication of the two vectors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427169,"byte_end":427234,"line_start":1122,"line_end":1122,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427239,"byte_end":427248,"line_start":1123,"line_end":1123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4302},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427508,"byte_end":427521,"line_start":1133,"line_end":1133,"column_start":12,"column_end":25},"name":"component_div","qualname":"<Vector3D<T, U>>::component_div","value":"pub fn component_div(Self, Self) -> Self where T: Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise division of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise division of the two vectors.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427423,"byte_end":427482,"line_start":1131,"line_end":1131,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427487,"byte_end":427496,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4303},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427795,"byte_end":427803,"line_start":1144,"line_end":1144,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector3D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427671,"byte_end":427705,"line_start":1140,"line_end":1140,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427710,"byte_end":427713,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427718,"byte_end":427769,"line_start":1142,"line_end":1142,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427774,"byte_end":427783,"line_start":1143,"line_end":1143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4304},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427968,"byte_end":427970,"line_start":1150,"line_end":1150,"column_start":12,"column_end":14},"name":"xy","qualname":"<Vector3D<T, U>>::xy","value":"pub fn xy(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427879,"byte_end":427942,"line_start":1148,"line_end":1148,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":427947,"byte_end":427956,"line_start":1149,"line_end":1149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4305},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428126,"byte_end":428128,"line_start":1156,"line_end":1156,"column_start":12,"column_end":14},"name":"xz","qualname":"<Vector3D<T, U>>::xz","value":"pub fn xz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428037,"byte_end":428100,"line_start":1154,"line_end":1154,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428105,"byte_end":428114,"line_start":1155,"line_end":1155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4306},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428284,"byte_end":428286,"line_start":1162,"line_end":1162,"column_start":12,"column_end":14},"name":"yz","qualname":"<Vector3D<T, U>>::yz","value":"pub fn yz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428195,"byte_end":428258,"line_start":1160,"line_end":1160,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428263,"byte_end":428272,"line_start":1161,"line_end":1161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4307},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428418,"byte_end":428426,"line_start":1168,"line_end":1168,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428353,"byte_end":428392,"line_start":1166,"line_end":1166,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428397,"byte_end":428406,"line_start":1167,"line_end":1167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4309},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428557,"byte_end":428568,"line_start":1174,"line_end":1174,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Vector3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y, z and 0.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428489,"byte_end":428531,"line_start":1172,"line_end":1172,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428536,"byte_end":428545,"line_start":1173,"line_end":1173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4311},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428740,"byte_end":428748,"line_start":1183,"line_end":1183,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428676,"byte_end":428714,"line_start":1181,"line_end":1181,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428719,"byte_end":428728,"line_start":1182,"line_end":1182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4312},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428881,"byte_end":428892,"line_start":1189,"line_end":1189,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Vector3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y, z and 0.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428814,"byte_end":428855,"line_start":1187,"line_end":1187,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":428860,"byte_end":428869,"line_start":1188,"line_end":1188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4313},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429086,"byte_end":429096,"line_start":1198,"line_end":1198,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429006,"byte_end":429060,"line_start":1196,"line_end":1196,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429065,"byte_end":429074,"line_start":1197,"line_end":1197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4314},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429225,"byte_end":429234,"line_start":1204,"line_end":1204,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429181,"byte_end":429199,"line_start":1202,"line_end":1202,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429204,"byte_end":429213,"line_start":1203,"line_end":1203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4316},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429367,"byte_end":429372,"line_start":1210,"line_end":1210,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Vector3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d vector.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429312,"byte_end":429341,"line_start":1208,"line_end":1208,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429346,"byte_end":429355,"line_start":1209,"line_end":1209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4317},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429794,"byte_end":429799,"line_start":1226,"line_end":1226,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429428,"byte_end":429483,"line_start":1214,"line_end":1214,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429488,"byte_end":429491,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429496,"byte_end":429571,"line_start":1216,"line_end":1216,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429576,"byte_end":429579,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429584,"byte_end":429595,"line_start":1218,"line_end":1218,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429600,"byte_end":429623,"line_start":1219,"line_end":1219,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429628,"byte_end":429642,"line_start":1220,"line_end":1220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429647,"byte_end":429650,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).round(), vec3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429655,"byte_end":429740,"line_start":1222,"line_end":1222,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429745,"byte_end":429752,"line_start":1223,"line_end":1223,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429757,"byte_end":429766,"line_start":1224,"line_end":1224,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429771,"byte_end":429782,"line_start":1225,"line_end":1225,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4318},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430320,"byte_end":430324,"line_start":1245,"line_end":1245,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":429920,"byte_end":430011,"line_start":1233,"line_end":1233,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430016,"byte_end":430019,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430024,"byte_end":430099,"line_start":1235,"line_end":1235,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430104,"byte_end":430107,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430112,"byte_end":430123,"line_start":1237,"line_end":1237,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430128,"byte_end":430151,"line_start":1238,"line_end":1238,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430156,"byte_end":430170,"line_start":1239,"line_end":1239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430175,"byte_end":430178,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), vec3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430183,"byte_end":430266,"line_start":1241,"line_end":1241,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430271,"byte_end":430278,"line_start":1242,"line_end":1242,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430283,"byte_end":430292,"line_start":1243,"line_end":1243,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430297,"byte_end":430308,"line_start":1244,"line_end":1244,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4319},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430841,"byte_end":430846,"line_start":1264,"line_end":1264,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430441,"byte_end":430529,"line_start":1252,"line_end":1252,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430534,"byte_end":430537,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430542,"byte_end":430617,"line_start":1254,"line_end":1254,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430622,"byte_end":430625,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430630,"byte_end":430641,"line_start":1256,"line_end":1256,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430646,"byte_end":430669,"line_start":1257,"line_end":1257,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430674,"byte_end":430688,"line_start":1258,"line_end":1258,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430693,"byte_end":430696,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).floor(), vec3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430701,"byte_end":430787,"line_start":1260,"line_end":1260,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430792,"byte_end":430799,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430804,"byte_end":430813,"line_start":1262,"line_end":1262,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430818,"byte_end":430829,"line_start":1263,"line_end":1263,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4320},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431047,"byte_end":431059,"line_start":1273,"line_end":1273,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector3D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform3D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":430967,"byte_end":431021,"line_start":1271,"line_end":1271,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431026,"byte_end":431035,"line_start":1272,"line_end":1272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4324},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431354,"byte_end":431367,"line_start":1287,"line_end":1287,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector3D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431288,"byte_end":431328,"line_start":1285,"line_end":1285,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431333,"byte_end":431342,"line_start":1286,"line_end":1286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4325},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431605,"byte_end":431624,"line_start":1295,"line_end":1295,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector3D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431452,"byte_end":431503,"line_start":1291,"line_end":1291,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431508,"byte_end":431511,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431516,"byte_end":431579,"line_start":1293,"line_end":1293,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431584,"byte_end":431593,"line_start":1294,"line_end":1294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4329},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431954,"byte_end":431970,"line_start":1307,"line_end":1307,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector3D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431822,"byte_end":431912,"line_start":1304,"line_end":1304,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431917,"byte_end":431926,"line_start":1305,"line_end":1305,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431931,"byte_end":431942,"line_start":1306,"line_end":1306,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4330},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432275,"byte_end":432284,"line_start":1319,"line_end":1319,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Vector3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432206,"byte_end":432249,"line_start":1317,"line_end":1317,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432254,"byte_end":432263,"line_start":1318,"line_end":1318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4334},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432557,"byte_end":432565,"line_start":1328,"line_end":1328,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector3D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the positive angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the positive angle between this vector and another vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432419,"byte_end":432489,"line_start":1325,"line_end":1325,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432494,"byte_end":432497,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between 0 and PI.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432502,"byte_end":432545,"line_start":1327,"line_end":1327,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":4335},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432818,"byte_end":432824,"line_start":1340,"line_end":1340,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector3D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432762,"byte_end":432792,"line_start":1338,"line_end":1338,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432797,"byte_end":432806,"line_start":1339,"line_end":1339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4336},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432973,"byte_end":432982,"line_start":1347,"line_end":1347,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector3D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432885,"byte_end":432931,"line_start":1344,"line_end":1344,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432936,"byte_end":432945,"line_start":1345,"line_end":1345,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432950,"byte_end":432961,"line_start":1346,"line_end":1346,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4337},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433272,"byte_end":433285,"line_start":1357,"line_end":1357,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector3D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433039,"byte_end":433086,"line_start":1351,"line_end":1351,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433091,"byte_end":433094,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433099,"byte_end":433192,"line_start":1353,"line_end":1353,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433197,"byte_end":433230,"line_start":1354,"line_end":1354,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433235,"byte_end":433244,"line_start":1355,"line_end":1355,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433249,"byte_end":433260,"line_start":1356,"line_end":1356,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4338},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433533,"byte_end":433548,"line_start":1368,"line_end":1368,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector3D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433457,"byte_end":433507,"line_start":1366,"line_end":1366,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433512,"byte_end":433521,"line_start":1367,"line_end":1367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4339},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433860,"byte_end":433875,"line_start":1379,"line_end":1379,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector3D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433781,"byte_end":433834,"line_start":1377,"line_end":1377,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":433839,"byte_end":433848,"line_start":1378,"line_end":1378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4340},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434198,"byte_end":434210,"line_start":1390,"line_end":1390,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector3D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434108,"byte_end":434172,"line_start":1388,"line_end":1388,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434177,"byte_end":434186,"line_start":1389,"line_end":1389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4344},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435140,"byte_end":435144,"line_start":1418,"line_end":1418,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434453,"byte_end":434532,"line_start":1400,"line_end":1400,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434537,"byte_end":434540,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434545,"byte_end":434558,"line_start":1402,"line_end":1402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434563,"byte_end":434566,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434571,"byte_end":434582,"line_start":1404,"line_end":1404,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec3;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434587,"byte_end":434608,"line_start":1405,"line_end":1405,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector3D;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434613,"byte_end":434647,"line_start":1406,"line_end":1406,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434652,"byte_end":434655,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ let from: Vector3D<_> = vec3(0.0, 10.0, -1.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434660,"byte_end":434710,"line_start":1408,"line_end":1408,"column_start":5,"column_end":55}},{"value":"/ let to:  Vector3D<_> = vec3(8.0, -4.0,  0.0);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434715,"byte_end":434764,"line_start":1409,"line_end":1409,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434769,"byte_end":434772,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec3(-8.0,  24.0, -2.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434777,"byte_end":434838,"line_start":1411,"line_end":1411,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec3( 0.0,  10.0, -1.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434843,"byte_end":434904,"line_start":1412,"line_end":1412,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec3( 4.0,   3.0, -0.5));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434909,"byte_end":434970,"line_start":1413,"line_end":1413,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec3( 8.0,  -4.0,  0.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434975,"byte_end":435036,"line_start":1414,"line_end":1414,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec3(16.0, -18.0,  1.0));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435041,"byte_end":435102,"line_start":1415,"line_end":1415,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435107,"byte_end":435114,"line_start":1416,"line_end":1416,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435119,"byte_end":435128,"line_start":1417,"line_end":1417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4345},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435359,"byte_end":435366,"line_start":1425,"line_end":1425,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector3D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435258,"byte_end":435333,"line_start":1423,"line_end":1423,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435338,"byte_end":435347,"line_start":1424,"line_end":1424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4349},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435648,"byte_end":435651,"line_start":1434,"line_end":1434,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435536,"byte_end":435622,"line_start":1432,"line_end":1432,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435627,"byte_end":435636,"line_start":1433,"line_end":1433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4350},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435930,"byte_end":435933,"line_start":1444,"line_end":1444,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435818,"byte_end":435904,"line_start":1442,"line_end":1442,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435909,"byte_end":435918,"line_start":1443,"line_end":1443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4351},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436298,"byte_end":436303,"line_start":1457,"line_end":1457,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436100,"byte_end":436174,"line_start":1452,"line_end":1452,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436179,"byte_end":436215,"line_start":1453,"line_end":1453,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436220,"byte_end":436223,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436228,"byte_end":436272,"line_start":1455,"line_end":1455,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436277,"byte_end":436286,"line_start":1456,"line_end":1456,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4352},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436523,"byte_end":436535,"line_start":1466,"line_end":1466,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436419,"byte_end":436497,"line_start":1464,"line_end":1464,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436502,"byte_end":436511,"line_start":1465,"line_end":1465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4353},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436818,"byte_end":436828,"line_start":1476,"line_end":1476,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436716,"byte_end":436792,"line_start":1474,"line_end":1474,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":436797,"byte_end":436806,"line_start":1475,"line_end":1475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4357},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437147,"byte_end":437152,"line_start":1488,"line_end":1488,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437050,"byte_end":437121,"line_start":1486,"line_end":1486,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437126,"byte_end":437135,"line_start":1487,"line_end":1487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4358},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437437,"byte_end":437446,"line_start":1498,"line_end":1498,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437336,"byte_end":437411,"line_start":1496,"line_end":1496,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437416,"byte_end":437425,"line_start":1497,"line_end":1497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4362},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438057,"byte_end":438061,"line_start":1514,"line_end":1514,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437676,"byte_end":437750,"line_start":1508,"line_end":1508,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437755,"byte_end":437758,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437763,"byte_end":437851,"line_start":1510,"line_end":1510,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437856,"byte_end":437944,"line_start":1511,"line_end":1511,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437949,"byte_end":438031,"line_start":1512,"line_end":1512,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438036,"byte_end":438045,"line_start":1513,"line_end":1513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4364},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438526,"byte_end":438534,"line_start":1523,"line_end":1523,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438150,"byte_end":438233,"line_start":1518,"line_end":1518,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438238,"byte_end":438241,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438246,"byte_end":438334,"line_start":1520,"line_end":1520,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438339,"byte_end":438427,"line_start":1521,"line_end":1521,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438432,"byte_end":438514,"line_start":1522,"line_end":1522,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":4366},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438932,"byte_end":438938,"line_start":1538,"line_end":1538,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438876,"byte_end":438906,"line_start":1536,"line_end":1536,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438911,"byte_end":438920,"line_start":1537,"line_end":1537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4367},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439054,"byte_end":439060,"line_start":1544,"line_end":1544,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":438998,"byte_end":439028,"line_start":1542,"line_end":1542,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439033,"byte_end":439042,"line_start":1543,"line_end":1543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4368},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439417,"byte_end":439425,"line_start":1554,"line_end":1554,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439120,"byte_end":439180,"line_start":1548,"line_end":1548,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439185,"byte_end":439188,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439193,"byte_end":439271,"line_start":1550,"line_end":1550,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439276,"byte_end":439350,"line_start":1551,"line_end":1551,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439355,"byte_end":439391,"line_start":1552,"line_end":1552,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439396,"byte_end":439405,"line_start":1553,"line_end":1553,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4369},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439782,"byte_end":439788,"line_start":1564,"line_end":1564,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439487,"byte_end":439545,"line_start":1558,"line_end":1558,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439550,"byte_end":439553,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439558,"byte_end":439636,"line_start":1560,"line_end":1560,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439641,"byte_end":439715,"line_start":1561,"line_end":1561,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439720,"byte_end":439756,"line_start":1562,"line_end":1562,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439761,"byte_end":439770,"line_start":1563,"line_end":1563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4370},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440143,"byte_end":440149,"line_start":1574,"line_end":1574,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439848,"byte_end":439906,"line_start":1568,"line_end":1568,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439911,"byte_end":439914,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":439919,"byte_end":439997,"line_start":1570,"line_end":1570,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440002,"byte_end":440076,"line_start":1571,"line_end":1571,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440081,"byte_end":440117,"line_start":1572,"line_end":1572,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440122,"byte_end":440131,"line_start":1573,"line_end":1573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4371},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440504,"byte_end":440510,"line_start":1584,"line_end":1584,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` vector, truncating decimals if any.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440209,"byte_end":440267,"line_start":1578,"line_end":1578,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440272,"byte_end":440275,"line_start":1579,"line_end":1579,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440280,"byte_end":440358,"line_start":1580,"line_end":1580,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440363,"byte_end":440437,"line_start":1581,"line_end":1581,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440442,"byte_end":440478,"line_start":1582,"line_end":1582,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440483,"byte_end":440492,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4728},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445736,"byte_end":445748,"line_start":1803,"line_end":1803,"column_start":12,"column_end":24},"name":"BoolVector2D","qualname":"::vector::BoolVector2D","value":"BoolVector2D { x, y }","parent":null,"children":[{"krate":0,"index":4729},{"krate":0,"index":4730}],"decl_id":null,"docs":" A 2d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 2d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445601,"byte_end":445673,"line_start":1801,"line_end":1801,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4729},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445759,"byte_end":445760,"line_start":1804,"line_end":1804,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector2D::x","value":"bool","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4730},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445776,"byte_end":445777,"line_start":1805,"line_end":1805,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector2D::y","value":"bool","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4746},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445923,"byte_end":445935,"line_start":1810,"line_end":1810,"column_start":12,"column_end":24},"name":"BoolVector3D","qualname":"::vector::BoolVector3D","value":"BoolVector3D { x, y, z }","parent":null,"children":[{"krate":0,"index":4747},{"krate":0,"index":4748},{"krate":0,"index":4749}],"decl_id":null,"docs":" A 3d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 3d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445788,"byte_end":445860,"line_start":1808,"line_end":1808,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4747},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445946,"byte_end":445947,"line_start":1811,"line_end":1811,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector3D::x","value":"bool","parent":{"krate":0,"index":4746},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4748},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445963,"byte_end":445964,"line_start":1812,"line_end":1812,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector3D::y","value":"bool","parent":{"krate":0,"index":4746},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4749},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445980,"byte_end":445981,"line_start":1813,"line_end":1813,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::BoolVector3D::z","value":"bool","parent":{"krate":0,"index":4746},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4488},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446112,"byte_end":446115,"line_start":1819,"line_end":1819,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector2D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446016,"byte_end":446086,"line_start":1817,"line_end":1817,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446091,"byte_end":446100,"line_start":1818,"line_end":1818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4489},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446263,"byte_end":446266,"line_start":1825,"line_end":1825,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector2D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446168,"byte_end":446237,"line_start":1823,"line_end":1823,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446242,"byte_end":446251,"line_start":1824,"line_end":1824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4490},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446437,"byte_end":446441,"line_start":1831,"line_end":1831,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector2D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446319,"byte_end":446411,"line_start":1829,"line_end":1829,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446416,"byte_end":446425,"line_start":1830,"line_end":1830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4491},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446578,"byte_end":446581,"line_start":1837,"line_end":1837,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector2D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446489,"byte_end":446552,"line_start":1835,"line_end":1835,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446557,"byte_end":446566,"line_start":1836,"line_end":1836,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4492},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446811,"byte_end":446813,"line_start":1846,"line_end":1846,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector2D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446723,"byte_end":446785,"line_start":1844,"line_end":1844,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446790,"byte_end":446799,"line_start":1845,"line_end":1845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4493},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447057,"byte_end":447060,"line_start":1855,"line_end":1855,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector2D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":446955,"byte_end":447031,"line_start":1853,"line_end":1853,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447036,"byte_end":447045,"line_start":1854,"line_end":1854,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4494},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447382,"byte_end":447394,"line_start":1865,"line_end":1865,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector2D>::select_point","value":"pub fn select_point<T, U>(Self, Point2D<T, U>, Point2D<T, U>) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447169,"byte_end":447261,"line_start":1862,"line_end":1862,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447266,"byte_end":447356,"line_start":1863,"line_end":1863,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447361,"byte_end":447370,"line_start":1864,"line_end":1864,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4497},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447801,"byte_end":447814,"line_start":1875,"line_end":1875,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector2D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector2D<T, U>, Vector2D<T, U>)\n-> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447587,"byte_end":447680,"line_start":1872,"line_end":1872,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447685,"byte_end":447775,"line_start":1873,"line_end":1873,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":447780,"byte_end":447789,"line_start":1874,"line_end":1874,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4500},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448220,"byte_end":448231,"line_start":1885,"line_end":1885,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector2D>::select_size","value":"pub fn select_size<T, U>(Self, Size2D<T, U>, Size2D<T, U>) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448008,"byte_end":448099,"line_start":1882,"line_end":1882,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448104,"byte_end":448194,"line_start":1883,"line_end":1883,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448199,"byte_end":448208,"line_start":1884,"line_end":1884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4504},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448556,"byte_end":448559,"line_start":1896,"line_end":1896,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector3D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448460,"byte_end":448530,"line_start":1894,"line_end":1894,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448535,"byte_end":448544,"line_start":1895,"line_end":1895,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4505},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448717,"byte_end":448720,"line_start":1902,"line_end":1902,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector3D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448622,"byte_end":448691,"line_start":1900,"line_end":1900,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448696,"byte_end":448705,"line_start":1901,"line_end":1901,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4506},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448901,"byte_end":448905,"line_start":1908,"line_end":1908,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector3D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448783,"byte_end":448875,"line_start":1906,"line_end":1906,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448880,"byte_end":448889,"line_start":1907,"line_end":1907,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4507},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449042,"byte_end":449045,"line_start":1914,"line_end":1914,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector3D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448953,"byte_end":449016,"line_start":1912,"line_end":1912,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449021,"byte_end":449030,"line_start":1913,"line_end":1913,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4508},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449309,"byte_end":449311,"line_start":1924,"line_end":1924,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector3D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449221,"byte_end":449283,"line_start":1922,"line_end":1922,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449288,"byte_end":449297,"line_start":1923,"line_end":1923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4509},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449589,"byte_end":449592,"line_start":1934,"line_end":1934,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector3D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449487,"byte_end":449563,"line_start":1932,"line_end":1932,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449568,"byte_end":449577,"line_start":1933,"line_end":1933,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4510},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449938,"byte_end":449950,"line_start":1945,"line_end":1945,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector3D>::select_point","value":"pub fn select_point<T, U>(Self, Point3D<T, U>, Point3D<T, U>) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449725,"byte_end":449817,"line_start":1942,"line_end":1942,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449822,"byte_end":449912,"line_start":1943,"line_end":1943,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":449917,"byte_end":449926,"line_start":1944,"line_end":1944,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4513},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450401,"byte_end":450414,"line_start":1956,"line_end":1956,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector3D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector3D<T, U>, Vector3D<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450187,"byte_end":450280,"line_start":1953,"line_end":1953,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450285,"byte_end":450375,"line_start":1954,"line_end":1954,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450380,"byte_end":450389,"line_start":1955,"line_end":1955,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4516},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450880,"byte_end":450891,"line_start":1968,"line_end":1968,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector3D>::select_size","value":"pub fn select_size<T, U>(Self, Size3D<T, U>, Size3D<T, U>) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450652,"byte_end":450743,"line_start":1964,"line_end":1964,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450748,"byte_end":450838,"line_start":1965,"line_end":1965,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450843,"byte_end":450852,"line_start":1966,"line_end":1966,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":450857,"byte_end":450868,"line_start":1967,"line_end":1967,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4519},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451240,"byte_end":451242,"line_start":1978,"line_end":1978,"column_start":12,"column_end":14},"name":"xy","qualname":"<BoolVector3D>::xy","value":"pub fn xy(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451150,"byte_end":451214,"line_start":1976,"line_end":1976,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451219,"byte_end":451228,"line_start":1977,"line_end":1977,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4520},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451447,"byte_end":451449,"line_start":1987,"line_end":1987,"column_start":12,"column_end":14},"name":"xz","qualname":"<BoolVector3D>::xz","value":"pub fn xz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451357,"byte_end":451421,"line_start":1985,"line_end":1985,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451426,"byte_end":451435,"line_start":1986,"line_end":1986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4521},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451654,"byte_end":451656,"line_start":1996,"line_end":1996,"column_start":12,"column_end":14},"name":"yz","qualname":"<BoolVector3D>::yz","value":"pub fn yz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's y and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's y and z coordinates.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451564,"byte_end":451628,"line_start":1994,"line_end":1994,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451633,"byte_end":451642,"line_start":1995,"line_end":1995,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":4522},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451821,"byte_end":451825,"line_start":2006,"line_end":2006,"column_start":14,"column_end":18},"name":"vec2","qualname":"::vector::vec2","value":"pub const fn vec2<T, U>(T, T) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451769,"byte_end":451797,"line_start":2004,"line_end":2004,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451798,"byte_end":451807,"line_start":2005,"line_end":2005,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4525},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451990,"byte_end":451994,"line_start":2016,"line_end":2016,"column_start":14,"column_end":18},"name":"vec3","qualname":"::vector::vec3","value":"pub const fn vec3<T, U>(T, T, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451938,"byte_end":451966,"line_start":2014,"line_end":2014,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":451967,"byte_end":451976,"line_start":2015,"line_end":2015,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4528},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":452190,"byte_end":452195,"line_start":2027,"line_end":2027,"column_start":14,"column_end":19},"name":"bvec2","qualname":"::vector::bvec2","value":"pub const fn bvec2(bool, bool) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector2D { x, y }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector2D { x, y }`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":452124,"byte_end":452166,"line_start":2025,"line_end":2025,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":452167,"byte_end":452176,"line_start":2026,"line_end":2026,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4529},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":452330,"byte_end":452335,"line_start":2033,"line_end":2033,"column_start":14,"column_end":19},"name":"bvec3","qualname":"::vector::bvec3","value":"pub const fn bvec3(bool, bool, bool) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector3D { x, y, z }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector3D { x, y, z }`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":452261,"byte_end":452306,"line_start":2031,"line_end":2031,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":452307,"byte_end":452316,"line_start":2032,"line_end":2032,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":4765},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3050,"byte_end":3061,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"UnknownUnit","qualname":"::UnknownUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default unit.\n","sig":null,"attributes":[{"value":"/ The default unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2940,"byte_end":2961,"line_start":87,"line_end":87,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":4530},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3072,"byte_end":3079,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"name":"default","qualname":"::default","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":4531},{"krate":0,"index":4532},{"krate":0,"index":4534},{"krate":0,"index":4536},{"krate":0,"index":4538},{"krate":0,"index":4540},{"krate":0,"index":4542},{"krate":0,"index":4544},{"krate":0,"index":4546},{"krate":0,"index":4548},{"krate":0,"index":4550},{"krate":0,"index":4552},{"krate":0,"index":4554},{"krate":0,"index":4556},{"krate":0,"index":4558},{"krate":0,"index":4560},{"krate":0,"index":4562},{"krate":0,"index":4564},{"krate":0,"index":4566},{"krate":0,"index":4568},{"krate":0,"index":4570},{"krate":0,"index":4572}],"decl_id":null,"docs":" A set of aliases for all types, tagged with the default unknown unit.\n","sig":null,"attributes":[{"value":"/ A set of aliases for all types, tagged with the default unknown unit.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3086,"byte_end":3159,"line_start":92,"line_end":92,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":4534},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3202,"byte_end":3208,"line_start":95,"line_end":95,"column_start":14,"column_end":20},"name":"Length","qualname":"::default::Length","value":"super::Length<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4536},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3258,"byte_end":3265,"line_start":96,"line_end":96,"column_start":14,"column_end":21},"name":"Point2D","qualname":"::default::Point2D","value":"super::Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4538},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3316,"byte_end":3323,"line_start":97,"line_end":97,"column_start":14,"column_end":21},"name":"Point3D","qualname":"::default::Point3D","value":"super::Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4540},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3374,"byte_end":3382,"line_start":98,"line_end":98,"column_start":14,"column_end":22},"name":"Vector2D","qualname":"::default::Vector2D","value":"super::Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4542},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3434,"byte_end":3442,"line_start":99,"line_end":99,"column_start":14,"column_end":22},"name":"Vector3D","qualname":"::default::Vector3D","value":"super::Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4544},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3494,"byte_end":3511,"line_start":100,"line_end":100,"column_start":14,"column_end":31},"name":"HomogeneousVector","qualname":"::default::HomogeneousVector","value":"super::HomogeneousVector<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4546},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3572,"byte_end":3578,"line_start":101,"line_end":101,"column_start":14,"column_end":20},"name":"Size2D","qualname":"::default::Size2D","value":"super::Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4548},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3628,"byte_end":3634,"line_start":102,"line_end":102,"column_start":14,"column_end":20},"name":"Size3D","qualname":"::default::Size3D","value":"super::Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4550},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3684,"byte_end":3688,"line_start":103,"line_end":103,"column_start":14,"column_end":18},"name":"Rect","qualname":"::default::Rect","value":"super::Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4552},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3736,"byte_end":3741,"line_start":104,"line_end":104,"column_start":14,"column_end":19},"name":"Box2D","qualname":"::default::Box2D","value":"super::Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4554},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3790,"byte_end":3795,"line_start":105,"line_end":105,"column_start":14,"column_end":19},"name":"Box3D","qualname":"::default::Box3D","value":"super::Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4556},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3844,"byte_end":3857,"line_start":106,"line_end":106,"column_start":14,"column_end":27},"name":"SideOffsets2D","qualname":"::default::SideOffsets2D","value":"super::SideOffsets2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4558},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3914,"byte_end":3925,"line_start":107,"line_end":107,"column_start":14,"column_end":25},"name":"Transform2D","qualname":"::default::Transform2D","value":"super::Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4560},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":3993,"byte_end":4004,"line_start":108,"line_end":108,"column_start":14,"column_end":25},"name":"Transform3D","qualname":"::default::Transform3D","value":"super::Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4562},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":4072,"byte_end":4082,"line_start":109,"line_end":109,"column_start":14,"column_end":24},"name":"Rotation2D","qualname":"::default::Rotation2D","value":"super::Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4564},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":4149,"byte_end":4159,"line_start":110,"line_end":110,"column_start":14,"column_end":24},"name":"Rotation3D","qualname":"::default::Rotation3D","value":"super::Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4566},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":4226,"byte_end":4239,"line_start":111,"line_end":111,"column_start":14,"column_end":27},"name":"Translation2D","qualname":"::default::Translation2D","value":"super::Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4568},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":4309,"byte_end":4322,"line_start":112,"line_end":112,"column_start":14,"column_end":27},"name":"Translation3D","qualname":"::default::Translation3D","value":"super::Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4570},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":4392,"byte_end":4397,"line_start":113,"line_end":113,"column_start":14,"column_end":19},"name":"Scale","qualname":"::default::Scale","value":"super::Scale<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4572},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":4459,"byte_end":4475,"line_start":114,"line_end":114,"column_start":14,"column_end":30},"name":"RigidTransform3D","qualname":"::default::RigidTransform3D","value":"super::RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6910,"byte_end":6915,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7089,"byte_end":7094,"line_start":49,"line_end":49,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7362,"byte_end":7367,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7906,"byte_end":7911,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8596,"byte_end":8601,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8782,"byte_end":8787,"line_start":124,"line_end":124,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8937,"byte_end":8942,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9046,"byte_end":9051,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9491,"byte_end":9496,"line_start":168,"line_end":168,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10211,"byte_end":10216,"line_start":198,"line_end":198,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10397,"byte_end":10402,"line_start":205,"line_end":205,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10562,"byte_end":10567,"line_start":212,"line_end":212,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10732,"byte_end":10737,"line_start":218,"line_end":218,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10888,"byte_end":10893,"line_start":224,"line_end":224,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11041,"byte_end":11046,"line_start":230,"line_end":230,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11239,"byte_end":11244,"line_start":237,"line_end":237,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11392,"byte_end":11397,"line_start":243,"line_end":243,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11564,"byte_end":11569,"line_start":251,"line_end":251,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11753,"byte_end":11758,"line_start":259,"line_end":259,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11886,"byte_end":11891,"line_start":265,"line_end":265,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":12075,"byte_end":12080,"line_start":273,"line_end":273,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":12202,"byte_end":12207,"line_start":279,"line_end":279,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":12348,"byte_end":12353,"line_start":286,"line_end":286,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20029,"byte_end":20034,"line_start":72,"line_end":72,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20173,"byte_end":20178,"line_start":79,"line_end":79,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20217,"byte_end":20222,"line_start":81,"line_end":81,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20360,"byte_end":20365,"line_start":87,"line_end":87,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20505,"byte_end":20510,"line_start":93,"line_end":93,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20559,"byte_end":20564,"line_start":95,"line_end":95,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20936,"byte_end":20941,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21660,"byte_end":21665,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23377,"byte_end":23382,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25074,"byte_end":25079,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25364,"byte_end":25369,"line_start":260,"line_end":260,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26113,"byte_end":26118,"line_start":296,"line_end":296,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27333,"byte_end":27338,"line_start":332,"line_end":332,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28335,"byte_end":28340,"line_start":373,"line_end":373,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28653,"byte_end":28658,"line_start":384,"line_end":384,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28879,"byte_end":28884,"line_start":394,"line_end":394,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29083,"byte_end":29088,"line_start":405,"line_end":405,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29288,"byte_end":29293,"line_start":415,"line_end":415,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29511,"byte_end":29516,"line_start":424,"line_end":424,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29659,"byte_end":29664,"line_start":431,"line_end":431,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29882,"byte_end":29887,"line_start":440,"line_end":440,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30050,"byte_end":30055,"line_start":447,"line_end":447,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30303,"byte_end":30308,"line_start":456,"line_end":456,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30502,"byte_end":30507,"line_start":464,"line_end":464,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30755,"byte_end":30760,"line_start":473,"line_end":473,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30911,"byte_end":30916,"line_start":481,"line_end":481,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31982,"byte_end":31987,"line_start":525,"line_end":525,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34833,"byte_end":34838,"line_start":603,"line_end":603,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35019,"byte_end":35024,"line_start":611,"line_end":611,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35699,"byte_end":35704,"line_start":630,"line_end":630,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36366,"byte_end":36371,"line_start":653,"line_end":653,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36526,"byte_end":36531,"line_start":662,"line_end":662,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45536,"byte_end":45541,"line_start":42,"line_end":42,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45680,"byte_end":45685,"line_start":49,"line_end":49,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45724,"byte_end":45729,"line_start":51,"line_end":51,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45867,"byte_end":45872,"line_start":57,"line_end":57,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46012,"byte_end":46017,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46066,"byte_end":46071,"line_start":65,"line_end":65,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46443,"byte_end":46448,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46877,"byte_end":46882,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48908,"byte_end":48913,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50537,"byte_end":50542,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50845,"byte_end":50850,"line_start":236,"line_end":236,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51369,"byte_end":51374,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51840,"byte_end":51845,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53027,"byte_end":53032,"line_start":327,"line_end":327,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53349,"byte_end":53354,"line_start":338,"line_end":338,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53575,"byte_end":53580,"line_start":348,"line_end":348,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54150,"byte_end":54155,"line_start":377,"line_end":377,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54355,"byte_end":54360,"line_start":387,"line_end":387,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54578,"byte_end":54583,"line_start":396,"line_end":396,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54744,"byte_end":54749,"line_start":404,"line_end":404,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54975,"byte_end":54980,"line_start":413,"line_end":413,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55161,"byte_end":55166,"line_start":421,"line_end":421,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55422,"byte_end":55427,"line_start":430,"line_end":430,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55629,"byte_end":55634,"line_start":438,"line_end":438,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55890,"byte_end":55895,"line_start":447,"line_end":447,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56054,"byte_end":56059,"line_start":455,"line_end":455,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57343,"byte_end":57348,"line_start":510,"line_end":510,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60214,"byte_end":60219,"line_start":588,"line_end":588,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60400,"byte_end":60405,"line_start":596,"line_end":596,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61084,"byte_end":61089,"line_start":615,"line_end":615,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61757,"byte_end":61762,"line_start":640,"line_end":640,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61917,"byte_end":61922,"line_start":649,"line_end":649,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72239,"byte_end":72256,"line_start":36,"line_end":36,"column_start":27,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72295,"byte_end":72312,"line_start":38,"line_end":38,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":73543,"byte_end":73560,"line_start":89,"line_end":89,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":73608,"byte_end":73625,"line_start":91,"line_end":91,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":73817,"byte_end":73834,"line_start":100,"line_end":100,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74033,"byte_end":74050,"line_start":112,"line_end":112,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74376,"byte_end":74393,"line_start":126,"line_end":126,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75198,"byte_end":75215,"line_start":156,"line_end":156,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75393,"byte_end":75410,"line_start":163,"line_end":163,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75587,"byte_end":75604,"line_start":170,"line_end":170,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75778,"byte_end":75795,"line_start":177,"line_end":177,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75961,"byte_end":75978,"line_start":184,"line_end":184,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78778,"byte_end":78784,"line_start":46,"line_end":46,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78902,"byte_end":78908,"line_start":52,"line_end":52,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79649,"byte_end":79655,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79823,"byte_end":79829,"line_start":94,"line_end":94,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80898,"byte_end":80904,"line_start":132,"line_end":132,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81251,"byte_end":81257,"line_start":146,"line_end":146,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81709,"byte_end":81715,"line_start":159,"line_end":159,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81846,"byte_end":81852,"line_start":165,"line_end":165,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81977,"byte_end":81983,"line_start":172,"line_end":172,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82111,"byte_end":82117,"line_start":179,"line_end":179,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82320,"byte_end":82326,"line_start":188,"line_end":188,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82545,"byte_end":82551,"line_start":197,"line_end":197,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82759,"byte_end":82765,"line_start":204,"line_end":204,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82939,"byte_end":82945,"line_start":211,"line_end":211,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83077,"byte_end":83083,"line_start":218,"line_end":218,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83292,"byte_end":83298,"line_start":227,"line_end":227,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83476,"byte_end":83482,"line_start":234,"line_end":234,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83779,"byte_end":83785,"line_start":245,"line_end":245,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84007,"byte_end":84013,"line_start":255,"line_end":255,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84242,"byte_end":84248,"line_start":265,"line_end":265,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84397,"byte_end":84403,"line_start":273,"line_end":273,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84632,"byte_end":84638,"line_start":283,"line_end":283,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84816,"byte_end":84822,"line_start":291,"line_end":291,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85074,"byte_end":85080,"line_start":301,"line_end":301,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85292,"byte_end":85298,"line_start":311,"line_end":311,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85471,"byte_end":85477,"line_start":320,"line_end":320,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85602,"byte_end":85608,"line_start":326,"line_end":326,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85747,"byte_end":85753,"line_start":332,"line_end":332,"column_start":23,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85788,"byte_end":85794,"line_start":334,"line_end":334,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85913,"byte_end":85919,"line_start":340,"line_end":340,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":86049,"byte_end":86055,"line_start":347,"line_end":347,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94753,"byte_end":94754,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94894,"byte_end":94895,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98198,"byte_end":98205,"line_start":42,"line_end":42,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98244,"byte_end":98251,"line_start":44,"line_end":44,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":99683,"byte_end":99690,"line_start":107,"line_end":107,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":99738,"byte_end":99745,"line_start":109,"line_end":109,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":99895,"byte_end":99902,"line_start":118,"line_end":118,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100116,"byte_end":100123,"line_start":130,"line_end":130,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100297,"byte_end":100304,"line_start":136,"line_end":136,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100421,"byte_end":100428,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101577,"byte_end":101584,"line_start":197,"line_end":197,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106646,"byte_end":106653,"line_start":397,"line_end":397,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107254,"byte_end":107261,"line_start":421,"line_end":421,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110075,"byte_end":110082,"line_start":499,"line_end":499,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110286,"byte_end":110293,"line_start":507,"line_end":507,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110481,"byte_end":110488,"line_start":514,"line_end":514,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110625,"byte_end":110632,"line_start":521,"line_end":521,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110812,"byte_end":110819,"line_start":530,"line_end":530,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111059,"byte_end":111066,"line_start":539,"line_end":539,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111253,"byte_end":111260,"line_start":547,"line_end":547,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111511,"byte_end":111518,"line_start":556,"line_end":556,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111658,"byte_end":111665,"line_start":563,"line_end":563,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1352}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111875,"byte_end":111882,"line_start":572,"line_end":572,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1356},{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112122,"byte_end":112129,"line_start":581,"line_end":581,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112316,"byte_end":112323,"line_start":589,"line_end":589,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112574,"byte_end":112581,"line_start":598,"line_end":598,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112731,"byte_end":112738,"line_start":605,"line_end":605,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112959,"byte_end":112966,"line_start":614,"line_end":614,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113123,"byte_end":113130,"line_start":621,"line_end":621,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1384},{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113376,"byte_end":113383,"line_start":630,"line_end":630,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113557,"byte_end":113564,"line_start":638,"line_end":638,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1393},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113785,"byte_end":113792,"line_start":647,"line_end":647,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113949,"byte_end":113956,"line_start":654,"line_end":654,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114202,"byte_end":114209,"line_start":663,"line_end":663,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114375,"byte_end":114382,"line_start":671,"line_end":671,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114489,"byte_end":114496,"line_start":678,"line_end":678,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114650,"byte_end":114657,"line_start":686,"line_end":686,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114809,"byte_end":114816,"line_start":694,"line_end":694,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114996,"byte_end":115003,"line_start":702,"line_end":702,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115328,"byte_end":115335,"line_start":714,"line_end":714,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115436,"byte_end":115443,"line_start":720,"line_end":720,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115548,"byte_end":115555,"line_start":726,"line_end":726,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115656,"byte_end":115663,"line_start":732,"line_end":732,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115984,"byte_end":115991,"line_start":750,"line_end":750,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":116030,"byte_end":116037,"line_start":752,"line_end":752,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117150,"byte_end":117157,"line_start":801,"line_end":801,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117205,"byte_end":117212,"line_start":803,"line_end":803,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117383,"byte_end":117390,"line_start":812,"line_end":812,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117592,"byte_end":117599,"line_start":823,"line_end":823,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1479}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117840,"byte_end":117847,"line_start":833,"line_end":833,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117984,"byte_end":117991,"line_start":839,"line_end":839,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119228,"byte_end":119235,"line_start":896,"line_end":896,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124826,"byte_end":124833,"line_start":1111,"line_end":1111,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125572,"byte_end":125579,"line_start":1143,"line_end":1143,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1525},{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128479,"byte_end":128486,"line_start":1225,"line_end":1225,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128712,"byte_end":128719,"line_start":1233,"line_end":1233,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128975,"byte_end":128982,"line_start":1244,"line_end":1244,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129119,"byte_end":129126,"line_start":1251,"line_end":1251,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129315,"byte_end":129322,"line_start":1260,"line_end":1260,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129631,"byte_end":129638,"line_start":1273,"line_end":1273,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129856,"byte_end":129863,"line_start":1282,"line_end":1282,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130132,"byte_end":130139,"line_start":1291,"line_end":1291,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130279,"byte_end":130286,"line_start":1298,"line_end":1298,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130514,"byte_end":130521,"line_start":1307,"line_end":1307,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130830,"byte_end":130837,"line_start":1320,"line_end":1320,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131055,"byte_end":131062,"line_start":1329,"line_end":1329,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131331,"byte_end":131338,"line_start":1338,"line_end":1338,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131488,"byte_end":131495,"line_start":1345,"line_end":1345,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1594},{"krate":0,"index":1595}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131770,"byte_end":131777,"line_start":1358,"line_end":1358,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131979,"byte_end":131986,"line_start":1367,"line_end":1367,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132297,"byte_end":132304,"line_start":1380,"line_end":1380,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132450,"byte_end":132457,"line_start":1387,"line_end":1387,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132732,"byte_end":132739,"line_start":1400,"line_end":1400,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132941,"byte_end":132948,"line_start":1409,"line_end":1409,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133259,"byte_end":133266,"line_start":1422,"line_end":1422,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133404,"byte_end":133411,"line_start":1429,"line_end":1429,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133518,"byte_end":133525,"line_start":1436,"line_end":1436,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133679,"byte_end":133686,"line_start":1444,"line_end":1444,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133838,"byte_end":133845,"line_start":1452,"line_end":1452,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134025,"byte_end":134032,"line_start":1460,"line_end":1460,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1648},{"krate":0,"index":1649}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134491,"byte_end":134498,"line_start":1478,"line_end":1478,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134607,"byte_end":134614,"line_start":1484,"line_end":1484,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134728,"byte_end":134735,"line_start":1490,"line_end":1490,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134850,"byte_end":134857,"line_start":1496,"line_end":1496,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150788,"byte_end":150792,"line_start":80,"line_end":80,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150935,"byte_end":150939,"line_start":87,"line_end":87,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150978,"byte_end":150982,"line_start":89,"line_end":89,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151124,"byte_end":151128,"line_start":95,"line_end":95,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151276,"byte_end":151280,"line_start":101,"line_end":101,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151329,"byte_end":151333,"line_start":103,"line_end":103,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151606,"byte_end":151610,"line_start":113,"line_end":113,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151724,"byte_end":151728,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151896,"byte_end":151900,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152301,"byte_end":152305,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153573,"byte_end":153577,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1803},{"krate":0,"index":1804}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154096,"byte_end":154100,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154456,"byte_end":154460,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154880,"byte_end":154884,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155454,"byte_end":155458,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1820}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156305,"byte_end":156309,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156927,"byte_end":156931,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157744,"byte_end":157748,"line_start":349,"line_end":349,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158116,"byte_end":158120,"line_start":363,"line_end":363,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158343,"byte_end":158347,"line_start":373,"line_end":373,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158578,"byte_end":158582,"line_start":383,"line_end":383,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158920,"byte_end":158924,"line_start":396,"line_end":396,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159048,"byte_end":159052,"line_start":403,"line_end":403,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159187,"byte_end":159191,"line_start":410,"line_end":410,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159391,"byte_end":159395,"line_start":421,"line_end":421,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159615,"byte_end":159619,"line_start":430,"line_end":430,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1867}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159762,"byte_end":159766,"line_start":437,"line_end":437,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1871},{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159994,"byte_end":159998,"line_start":446,"line_end":446,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1876}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160161,"byte_end":160165,"line_start":453,"line_end":453,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1881},{"krate":0,"index":1882}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160423,"byte_end":160427,"line_start":462,"line_end":462,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160633,"byte_end":160637,"line_start":470,"line_end":470,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1891},{"krate":0,"index":1892}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160895,"byte_end":160899,"line_start":479,"line_end":479,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161068,"byte_end":161072,"line_start":487,"line_end":487,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161713,"byte_end":161717,"line_start":510,"line_end":510,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165004,"byte_end":165008,"line_start":598,"line_end":598,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165257,"byte_end":165261,"line_start":606,"line_end":606,"column_start":76,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167323,"byte_end":167327,"line_start":657,"line_end":657,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177902,"byte_end":177918,"line_start":30,"line_end":30,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178231,"byte_end":178247,"line_start":41,"line_end":41,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178528,"byte_end":178544,"line_start":50,"line_end":50,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182886,"byte_end":182902,"line_start":188,"line_end":188,"column_start":34,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182955,"byte_end":182971,"line_start":190,"line_end":190,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1993}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":183465,"byte_end":183481,"line_start":206,"line_end":206,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1998}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":183656,"byte_end":183672,"line_start":213,"line_end":213,"column_start":66,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2003}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187642,"byte_end":187652,"line_start":43,"line_end":43,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187705,"byte_end":187715,"line_start":45,"line_end":45,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2102}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187897,"byte_end":187907,"line_start":54,"line_end":54,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187969,"byte_end":187979,"line_start":56,"line_end":56,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188130,"byte_end":188140,"line_start":65,"line_end":65,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188503,"byte_end":188513,"line_start":80,"line_end":80,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189064,"byte_end":189074,"line_start":105,"line_end":105,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2129},{"krate":0,"index":2132},{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190719,"byte_end":190729,"line_start":168,"line_end":168,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190933,"byte_end":190943,"line_start":178,"line_end":178,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192341,"byte_end":192351,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2153}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193771,"byte_end":193781,"line_start":260,"line_end":260,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193834,"byte_end":193844,"line_start":262,"line_end":262,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194111,"byte_end":194121,"line_start":274,"line_end":274,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194183,"byte_end":194193,"line_start":276,"line_end":276,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194399,"byte_end":194409,"line_start":285,"line_end":285,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194840,"byte_end":194850,"line_start":303,"line_end":303,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2191},{"krate":0,"index":2192}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195721,"byte_end":195731,"line_start":334,"line_end":334,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2201},{"krate":0,"index":2202}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198278,"byte_end":198288,"line_start":418,"line_end":418,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":207919,"byte_end":207929,"line_start":721,"line_end":721,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":208184,"byte_end":208194,"line_start":731,"line_end":731,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2240}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218854,"byte_end":218859,"line_start":55,"line_end":55,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223521,"byte_end":223526,"line_start":243,"line_end":243,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2326},{"krate":0,"index":2328}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225620,"byte_end":225625,"line_start":308,"line_end":308,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225848,"byte_end":225853,"line_start":318,"line_end":318,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226088,"byte_end":226093,"line_start":328,"line_end":328,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2347},{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226451,"byte_end":226456,"line_start":340,"line_end":340,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2353}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226591,"byte_end":226596,"line_start":346,"line_end":346,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226659,"byte_end":226664,"line_start":348,"line_end":348,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226819,"byte_end":226824,"line_start":354,"line_end":354,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226959,"byte_end":226964,"line_start":360,"line_end":360,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2372}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227101,"byte_end":227106,"line_start":366,"line_end":366,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227169,"byte_end":227174,"line_start":368,"line_end":368,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2381}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227319,"byte_end":227324,"line_start":374,"line_end":374,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2386}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227441,"byte_end":227446,"line_start":380,"line_end":380,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227576,"byte_end":227581,"line_start":386,"line_end":386,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2397}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230850,"byte_end":230863,"line_start":68,"line_end":68,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230902,"byte_end":230915,"line_start":70,"line_end":70,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2469}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231199,"byte_end":231212,"line_start":82,"line_end":82,"column_start":19,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231260,"byte_end":231273,"line_start":84,"line_end":84,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231529,"byte_end":231542,"line_start":96,"line_end":96,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2480}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231782,"byte_end":231795,"line_start":108,"line_end":108,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2485}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232039,"byte_end":232052,"line_start":118,"line_end":118,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2489}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232328,"byte_end":232341,"line_start":130,"line_end":130,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2502}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235419,"byte_end":235432,"line_start":237,"line_end":237,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2506},{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235764,"byte_end":235777,"line_start":252,"line_end":252,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2511}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236021,"byte_end":236034,"line_start":264,"line_end":264,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2515},{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236366,"byte_end":236379,"line_start":279,"line_end":279,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2520}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236623,"byte_end":236636,"line_start":291,"line_end":291,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2524},{"krate":0,"index":2525}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236958,"byte_end":236971,"line_start":307,"line_end":307,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2529},{"krate":0,"index":2530}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":237306,"byte_end":237319,"line_start":321,"line_end":321,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":237560,"byte_end":237573,"line_start":331,"line_end":331,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2539},{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":237946,"byte_end":237959,"line_start":345,"line_end":345,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2544}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":238105,"byte_end":238118,"line_start":352,"line_end":352,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2548},{"krate":0,"index":2549}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":238453,"byte_end":238466,"line_start":366,"line_end":366,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2553}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":238707,"byte_end":238720,"line_start":376,"line_end":376,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2558},{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":239093,"byte_end":239106,"line_start":390,"line_end":390,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2563}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243615,"byte_end":243621,"line_start":43,"line_end":43,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243660,"byte_end":243666,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2671}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245271,"byte_end":245277,"line_start":110,"line_end":110,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245325,"byte_end":245331,"line_start":112,"line_end":112,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245499,"byte_end":245505,"line_start":121,"line_end":121,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245692,"byte_end":245698,"line_start":131,"line_end":131,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2687}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245915,"byte_end":245921,"line_start":139,"line_end":139,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2691}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246037,"byte_end":246043,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247174,"byte_end":247180,"line_start":192,"line_end":192,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2703},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250547,"byte_end":250553,"line_start":315,"line_end":315,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2728}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253720,"byte_end":253726,"line_start":403,"line_end":403,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2732}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253920,"byte_end":253926,"line_start":411,"line_end":411,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2736},{"krate":0,"index":2737}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254519,"byte_end":254525,"line_start":427,"line_end":427,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256421,"byte_end":256427,"line_start":486,"line_end":486,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2751},{"krate":0,"index":2752}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256986,"byte_end":256992,"line_start":504,"line_end":504,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2756}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257148,"byte_end":257154,"line_start":512,"line_end":512,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2760}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257308,"byte_end":257314,"line_start":520,"line_end":520,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2764}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257470,"byte_end":257476,"line_start":528,"line_end":528,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2768}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257604,"byte_end":257610,"line_start":535,"line_end":535,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2772},{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257789,"byte_end":257795,"line_start":544,"line_end":544,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2777},{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258043,"byte_end":258049,"line_start":553,"line_end":553,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2782},{"krate":0,"index":2783}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258249,"byte_end":258255,"line_start":560,"line_end":560,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2787}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258442,"byte_end":258448,"line_start":566,"line_end":566,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2793}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258602,"byte_end":258608,"line_start":572,"line_end":572,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2798}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258780,"byte_end":258786,"line_start":580,"line_end":580,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2802},{"krate":0,"index":2803}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259017,"byte_end":259023,"line_start":589,"line_end":589,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2807}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259205,"byte_end":259211,"line_start":597,"line_end":597,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2811},{"krate":0,"index":2812}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259436,"byte_end":259442,"line_start":606,"line_end":606,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2816}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259628,"byte_end":259634,"line_start":614,"line_end":614,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2821},{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259893,"byte_end":259899,"line_start":623,"line_end":623,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260045,"byte_end":260051,"line_start":630,"line_end":630,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260276,"byte_end":260282,"line_start":639,"line_end":639,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2835}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260468,"byte_end":260474,"line_start":647,"line_end":647,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2840},{"krate":0,"index":2841}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260733,"byte_end":260739,"line_start":656,"line_end":656,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261497,"byte_end":261503,"line_start":691,"line_end":691,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2852}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261628,"byte_end":261634,"line_start":698,"line_end":698,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2857}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261758,"byte_end":261764,"line_start":705,"line_end":705,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2863}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261882,"byte_end":261888,"line_start":712,"line_end":712,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2868}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":262012,"byte_end":262018,"line_start":719,"line_end":719,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2872}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268708,"byte_end":268714,"line_start":955,"line_end":955,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268753,"byte_end":268759,"line_start":957,"line_end":957,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2886}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":269931,"byte_end":269937,"line_start":1006,"line_end":1006,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":269985,"byte_end":269991,"line_start":1008,"line_end":1008,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2893}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270188,"byte_end":270194,"line_start":1017,"line_end":1017,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2897}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270409,"byte_end":270415,"line_start":1028,"line_end":1028,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2902}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270699,"byte_end":270705,"line_start":1038,"line_end":1038,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2906}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270841,"byte_end":270847,"line_start":1044,"line_end":1044,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2914}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272076,"byte_end":272082,"line_start":1092,"line_end":1092,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2918},{"krate":0,"index":2920},{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2923},{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275670,"byte_end":275676,"line_start":1215,"line_end":1215,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2933},{"krate":0,"index":2935},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278575,"byte_end":278581,"line_start":1297,"line_end":1297,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278801,"byte_end":278807,"line_start":1305,"line_end":1305,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2950},{"krate":0,"index":2951}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279445,"byte_end":279451,"line_start":1321,"line_end":1321,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2955},{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2961}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281527,"byte_end":281533,"line_start":1389,"line_end":1389,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2965},{"krate":0,"index":2966}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282176,"byte_end":282182,"line_start":1409,"line_end":1409,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2970}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282338,"byte_end":282344,"line_start":1417,"line_end":1417,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2974}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282498,"byte_end":282504,"line_start":1425,"line_end":1425,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2978}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282660,"byte_end":282666,"line_start":1433,"line_end":1433,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2982}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282808,"byte_end":282814,"line_start":1440,"line_end":1440,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2986},{"krate":0,"index":2987}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283006,"byte_end":283012,"line_start":1449,"line_end":1449,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2991},{"krate":0,"index":2992}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283333,"byte_end":283339,"line_start":1462,"line_end":1462,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2996},{"krate":0,"index":2997}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283612,"byte_end":283618,"line_start":1473,"line_end":1473,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3001}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283805,"byte_end":283811,"line_start":1479,"line_end":1479,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":3007}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283965,"byte_end":283971,"line_start":1485,"line_end":1485,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3012}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":284178,"byte_end":284184,"line_start":1494,"line_end":1494,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3016},{"krate":0,"index":3017}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":284488,"byte_end":284494,"line_start":1507,"line_end":1507,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3021}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":284711,"byte_end":284717,"line_start":1516,"line_end":1516,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3025},{"krate":0,"index":3026}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285009,"byte_end":285015,"line_start":1529,"line_end":1529,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3030}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285230,"byte_end":285236,"line_start":1538,"line_end":1538,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3035},{"krate":0,"index":3036}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285564,"byte_end":285570,"line_start":1551,"line_end":1551,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3040}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285716,"byte_end":285722,"line_start":1558,"line_end":1558,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3044},{"krate":0,"index":3045}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":286014,"byte_end":286020,"line_start":1571,"line_end":1571,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3049}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":286235,"byte_end":286241,"line_start":1580,"line_end":1580,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3054},{"krate":0,"index":3055}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":286569,"byte_end":286575,"line_start":1593,"line_end":1593,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3059}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287152,"byte_end":287158,"line_start":1619,"line_end":1619,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3063}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287288,"byte_end":287294,"line_start":1626,"line_end":1626,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287430,"byte_end":287436,"line_start":1633,"line_end":1633,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3074}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287563,"byte_end":287569,"line_start":1640,"line_end":1640,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3079}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287711,"byte_end":287717,"line_start":1647,"line_end":1647,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3083}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":297608,"byte_end":297619,"line_start":95,"line_end":95,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":297672,"byte_end":297683,"line_start":97,"line_end":97,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3183}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298037,"byte_end":298048,"line_start":111,"line_end":111,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298110,"byte_end":298121,"line_start":113,"line_end":113,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298452,"byte_end":298463,"line_start":126,"line_end":126,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3197}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298736,"byte_end":298747,"line_start":140,"line_end":140,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3203},{"krate":0,"index":3204},{"krate":0,"index":3205}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300412,"byte_end":300423,"line_start":190,"line_end":190,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3210},{"krate":0,"index":3212},{"krate":0,"index":3214},{"krate":0,"index":3217},{"krate":0,"index":3219},{"krate":0,"index":3222},{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3226},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304171,"byte_end":304182,"line_start":314,"line_end":314,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3235}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305101,"byte_end":305112,"line_start":340,"line_end":340,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3241},{"krate":0,"index":3242}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305746,"byte_end":305757,"line_start":369,"line_end":369,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3247}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306544,"byte_end":306555,"line_start":391,"line_end":391,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3257}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307657,"byte_end":307668,"line_start":436,"line_end":436,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308636,"byte_end":308647,"line_start":469,"line_end":469,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3269},{"krate":0,"index":3271},{"krate":0,"index":3272}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309739,"byte_end":309750,"line_start":517,"line_end":517,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3277},{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3280}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311574,"byte_end":311585,"line_start":576,"line_end":576,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3287}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312720,"byte_end":312731,"line_start":615,"line_end":615,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3292}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312939,"byte_end":312950,"line_start":624,"line_end":624,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3297},{"krate":0,"index":3298}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":313536,"byte_end":313547,"line_start":637,"line_end":637,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3303}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":322652,"byte_end":322663,"line_start":116,"line_end":116,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":322716,"byte_end":322727,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3434}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":323431,"byte_end":323442,"line_start":142,"line_end":142,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":323504,"byte_end":323515,"line_start":144,"line_end":144,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3443}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324216,"byte_end":324227,"line_start":167,"line_end":167,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3448}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324760,"byte_end":324771,"line_start":191,"line_end":191,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3458}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327179,"byte_end":327190,"line_start":272,"line_end":272,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3463},{"krate":0,"index":3465},{"krate":0,"index":3467},{"krate":0,"index":3470},{"krate":0,"index":3473},{"krate":0,"index":3475},{"krate":0,"index":3478},{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3482},{"krate":0,"index":3484}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332635,"byte_end":332646,"line_start":424,"line_end":424,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3491},{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334485,"byte_end":334496,"line_start":499,"line_end":499,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3501}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336764,"byte_end":336775,"line_start":534,"line_end":534,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3507},{"krate":0,"index":3510},{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337945,"byte_end":337956,"line_start":579,"line_end":579,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3516},{"krate":0,"index":3517},{"krate":0,"index":3518}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339632,"byte_end":339643,"line_start":635,"line_end":635,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3523},{"krate":0,"index":3526},{"krate":0,"index":3527}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340992,"byte_end":341003,"line_start":685,"line_end":685,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3532},{"krate":0,"index":3533},{"krate":0,"index":3534},{"krate":0,"index":3535},{"krate":0,"index":3536},{"krate":0,"index":3537},{"krate":0,"index":3538},{"krate":0,"index":3539},{"krate":0,"index":3540}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":346691,"byte_end":346702,"line_start":825,"line_end":825,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3545},{"krate":0,"index":3546},{"krate":0,"index":3547},{"krate":0,"index":3548},{"krate":0,"index":3549},{"krate":0,"index":3550},{"krate":0,"index":3551}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":354252,"byte_end":354263,"line_start":996,"line_end":996,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3556}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":355809,"byte_end":355820,"line_start":1037,"line_end":1037,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3561},{"krate":0,"index":3563}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357319,"byte_end":357330,"line_start":1068,"line_end":1068,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3569},{"krate":0,"index":3570}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":358298,"byte_end":358309,"line_start":1093,"line_end":1093,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3575},{"krate":0,"index":3576}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":359243,"byte_end":359254,"line_start":1109,"line_end":1109,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3581}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":359448,"byte_end":359459,"line_start":1118,"line_end":1118,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372879,"byte_end":372892,"line_start":76,"line_end":76,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372945,"byte_end":372958,"line_start":78,"line_end":78,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3683}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373166,"byte_end":373179,"line_start":88,"line_end":88,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373241,"byte_end":373254,"line_start":90,"line_end":90,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3692}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373418,"byte_end":373431,"line_start":99,"line_end":99,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3697}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373596,"byte_end":373609,"line_start":109,"line_end":109,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3703},{"krate":0,"index":3704},{"krate":0,"index":3705},{"krate":0,"index":3706},{"krate":0,"index":3707}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374965,"byte_end":374978,"line_start":166,"line_end":166,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3715},{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720},{"krate":0,"index":3721},{"krate":0,"index":3722}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":377427,"byte_end":377440,"line_start":263,"line_end":263,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3728},{"krate":0,"index":3729}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":377728,"byte_end":377741,"line_start":271,"line_end":271,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3734}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":377954,"byte_end":377967,"line_start":278,"line_end":278,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3740},{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378255,"byte_end":378268,"line_start":286,"line_end":286,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3746}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378458,"byte_end":378471,"line_start":293,"line_end":293,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3751}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378621,"byte_end":378634,"line_start":299,"line_end":299,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3756}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378781,"byte_end":378794,"line_start":305,"line_end":305,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3761}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378971,"byte_end":378984,"line_start":314,"line_end":314,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3766}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379125,"byte_end":379138,"line_start":323,"line_end":323,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3771}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379678,"byte_end":379691,"line_start":342,"line_end":342,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379744,"byte_end":379757,"line_start":344,"line_end":344,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3788}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":380761,"byte_end":380774,"line_start":387,"line_end":387,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":380836,"byte_end":380849,"line_start":389,"line_end":389,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3797}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381034,"byte_end":381047,"line_start":398,"line_end":398,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3802}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381236,"byte_end":381249,"line_start":409,"line_end":409,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3808},{"krate":0,"index":3809},{"krate":0,"index":3810},{"krate":0,"index":3811},{"krate":0,"index":3812}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382770,"byte_end":382783,"line_start":469,"line_end":469,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3817},{"krate":0,"index":3818},{"krate":0,"index":3820},{"krate":0,"index":3821},{"krate":0,"index":3822},{"krate":0,"index":3823},{"krate":0,"index":3824},{"krate":0,"index":3825},{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3828},{"krate":0,"index":3829}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385863,"byte_end":385876,"line_start":589,"line_end":589,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3835},{"krate":0,"index":3836}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386182,"byte_end":386195,"line_start":597,"line_end":597,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3841}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386435,"byte_end":386448,"line_start":605,"line_end":605,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3847},{"krate":0,"index":3848}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386754,"byte_end":386767,"line_start":613,"line_end":613,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3853}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386984,"byte_end":386997,"line_start":621,"line_end":621,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3858}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387152,"byte_end":387165,"line_start":627,"line_end":627,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3863}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387320,"byte_end":387333,"line_start":633,"line_end":633,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3868}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387518,"byte_end":387531,"line_start":642,"line_end":642,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3873}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387672,"byte_end":387685,"line_start":651,"line_end":651,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3878}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399427,"byte_end":399435,"line_start":51,"line_end":51,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399474,"byte_end":399482,"line_start":53,"line_end":53,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4019}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":400926,"byte_end":400934,"line_start":116,"line_end":116,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":400981,"byte_end":400989,"line_start":118,"line_end":118,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4026}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401121,"byte_end":401129,"line_start":124,"line_end":124,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4030}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401276,"byte_end":401284,"line_start":131,"line_end":131,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4035}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401481,"byte_end":401489,"line_start":139,"line_end":139,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4039}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401663,"byte_end":401671,"line_start":145,"line_end":145,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4043}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401789,"byte_end":401797,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4049},{"krate":0,"index":4050},{"krate":0,"index":4051},{"krate":0,"index":4052},{"krate":0,"index":4053},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4058}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404813,"byte_end":404821,"line_start":277,"line_end":277,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4069},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4076},{"krate":0,"index":4077}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408336,"byte_end":408344,"line_start":420,"line_end":420,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4083}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409230,"byte_end":409238,"line_start":452,"line_end":452,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4087},{"krate":0,"index":4088}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409805,"byte_end":409813,"line_start":473,"line_end":473,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4092},{"krate":0,"index":4093},{"krate":0,"index":4094},{"krate":0,"index":4095},{"krate":0,"index":4096},{"krate":0,"index":4097},{"krate":0,"index":4098}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411585,"byte_end":411593,"line_start":538,"line_end":538,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4102},{"krate":0,"index":4103}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412705,"byte_end":412713,"line_start":573,"line_end":573,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4109},{"krate":0,"index":4110},{"krate":0,"index":4111}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414015,"byte_end":414023,"line_start":617,"line_end":617,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4115},{"krate":0,"index":4116}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414573,"byte_end":414581,"line_start":637,"line_end":637,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4120},{"krate":0,"index":4122},{"krate":0,"index":4124},{"krate":0,"index":4125},{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4128},{"krate":0,"index":4129}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417433,"byte_end":417441,"line_start":715,"line_end":715,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4133},{"krate":0,"index":4134}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417606,"byte_end":417614,"line_start":724,"line_end":724,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4138},{"krate":0,"index":4139}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417833,"byte_end":417841,"line_start":733,"line_end":733,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4143},{"krate":0,"index":4144}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418066,"byte_end":418074,"line_start":742,"line_end":742,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4148}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418261,"byte_end":418269,"line_start":748,"line_end":748,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":4154}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418439,"byte_end":418447,"line_start":754,"line_end":754,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4159}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418577,"byte_end":418585,"line_start":761,"line_end":761,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4163},{"krate":0,"index":4164}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418825,"byte_end":418833,"line_start":770,"line_end":770,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":4168}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418973,"byte_end":418981,"line_start":777,"line_end":777,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4172},{"krate":0,"index":4173}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419201,"byte_end":419209,"line_start":786,"line_end":786,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4177}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419366,"byte_end":419374,"line_start":793,"line_end":793,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4182},{"krate":0,"index":4183}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419619,"byte_end":419627,"line_start":802,"line_end":802,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4187}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419801,"byte_end":419809,"line_start":810,"line_end":810,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4191},{"krate":0,"index":4192}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420029,"byte_end":420037,"line_start":819,"line_end":819,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4196}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420194,"byte_end":420202,"line_start":826,"line_end":826,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4201},{"krate":0,"index":4202}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420447,"byte_end":420455,"line_start":835,"line_end":835,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4206}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420623,"byte_end":420631,"line_start":843,"line_end":843,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4210}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420788,"byte_end":420796,"line_start":851,"line_end":851,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4214}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420951,"byte_end":420959,"line_start":859,"line_end":859,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4218}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421143,"byte_end":421151,"line_start":867,"line_end":867,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4222},{"krate":0,"index":4223}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421474,"byte_end":421482,"line_start":879,"line_end":879,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4228}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421583,"byte_end":421591,"line_start":885,"line_end":885,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4234}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421694,"byte_end":421702,"line_start":891,"line_end":891,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4239}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421803,"byte_end":421811,"line_start":897,"line_end":897,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4243}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421931,"byte_end":421939,"line_start":903,"line_end":903,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4247}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422435,"byte_end":422443,"line_start":924,"line_end":924,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422482,"byte_end":422490,"line_start":926,"line_end":926,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4261}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":423613,"byte_end":423621,"line_start":975,"line_end":975,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":423668,"byte_end":423676,"line_start":977,"line_end":977,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4268}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":423829,"byte_end":423837,"line_start":983,"line_end":983,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4272}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424008,"byte_end":424016,"line_start":991,"line_end":991,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4277}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424218,"byte_end":424226,"line_start":999,"line_end":999,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4281}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424467,"byte_end":424475,"line_start":1009,"line_end":1009,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4285}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424613,"byte_end":424621,"line_start":1015,"line_end":1015,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4289},{"krate":0,"index":4290},{"krate":0,"index":4291},{"krate":0,"index":4292},{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4296}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426827,"byte_end":426835,"line_start":1108,"line_end":1108,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4300},{"krate":0,"index":4301},{"krate":0,"index":4302},{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":4305},{"krate":0,"index":4306},{"krate":0,"index":4307},{"krate":0,"index":4309},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4316},{"krate":0,"index":4317},{"krate":0,"index":4318},{"krate":0,"index":4319},{"krate":0,"index":4320}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431206,"byte_end":431214,"line_start":1281,"line_end":1281,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4324},{"krate":0,"index":4325}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431801,"byte_end":431809,"line_start":1303,"line_end":1303,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4329},{"krate":0,"index":4330}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432398,"byte_end":432406,"line_start":1324,"line_end":1324,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4336},{"krate":0,"index":4337},{"krate":0,"index":4338},{"krate":0,"index":4339},{"krate":0,"index":4340}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434353,"byte_end":434361,"line_start":1396,"line_end":1396,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4344},{"krate":0,"index":4345}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435515,"byte_end":435523,"line_start":1431,"line_end":1431,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437029,"byte_end":437037,"line_start":1485,"line_end":1485,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4357},{"krate":0,"index":4358}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437655,"byte_end":437663,"line_start":1507,"line_end":1507,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4362},{"krate":0,"index":4364},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4370},{"krate":0,"index":4371}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440592,"byte_end":440600,"line_start":1589,"line_end":1589,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4375},{"krate":0,"index":4376}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440774,"byte_end":440782,"line_start":1598,"line_end":1598,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4380},{"krate":0,"index":4381}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441023,"byte_end":441031,"line_start":1607,"line_end":1607,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4386},{"krate":0,"index":4387}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441265,"byte_end":441273,"line_start":1616,"line_end":1616,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4391}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441460,"byte_end":441468,"line_start":1622,"line_end":1622,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":4397}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441638,"byte_end":441646,"line_start":1628,"line_end":1628,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4402}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441776,"byte_end":441784,"line_start":1635,"line_end":1635,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4406},{"krate":0,"index":4407}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442042,"byte_end":442050,"line_start":1644,"line_end":1644,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":4411}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442190,"byte_end":442198,"line_start":1651,"line_end":1651,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4415},{"krate":0,"index":4416}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442481,"byte_end":442489,"line_start":1664,"line_end":1664,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4420}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442646,"byte_end":442654,"line_start":1671,"line_end":1671,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4425},{"krate":0,"index":4426}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442964,"byte_end":442972,"line_start":1684,"line_end":1684,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4430}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443173,"byte_end":443181,"line_start":1693,"line_end":1693,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4434},{"krate":0,"index":4435}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443464,"byte_end":443472,"line_start":1706,"line_end":1706,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4439}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443629,"byte_end":443637,"line_start":1713,"line_end":1713,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4444},{"krate":0,"index":4445}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443947,"byte_end":443955,"line_start":1726,"line_end":1726,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4449}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444150,"byte_end":444158,"line_start":1735,"line_end":1735,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4453}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444315,"byte_end":444323,"line_start":1743,"line_end":1743,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4457}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444478,"byte_end":444486,"line_start":1751,"line_end":1751,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4461}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444670,"byte_end":444678,"line_start":1759,"line_end":1759,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4465},{"krate":0,"index":4466}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445135,"byte_end":445143,"line_start":1777,"line_end":1777,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4471}],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445252,"byte_end":445260,"line_start":1783,"line_end":1783,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4477}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445372,"byte_end":445380,"line_start":1789,"line_end":1789,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4482}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445495,"byte_end":445503,"line_start":1795,"line_end":1795,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4486}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445997,"byte_end":446009,"line_start":1816,"line_end":1816,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4488},{"krate":0,"index":4489},{"krate":0,"index":4490},{"krate":0,"index":4491},{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":4497},{"krate":0,"index":4500}],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448441,"byte_end":448453,"line_start":1893,"line_end":1893,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4504},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4508},{"krate":0,"index":4509},{"krate":0,"index":4510},{"krate":0,"index":4513},{"krate":0,"index":4516},{"krate":0,"index":4519},{"krate":0,"index":4520},{"krate":0,"index":4521}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2692,"byte_end":2700,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":280}},{"kind":"Mod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2710,"byte_end":2719,"line_start":68,"line_end":68,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":287}},{"kind":"Mod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\lib.rs","byte_start":2776,"byte_end":2779,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1118}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":6910,"byte_end":6915,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7089,"byte_end":7094,"line_start":49,"line_end":49,"column_start":9,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7362,"byte_end":7367,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":7906,"byte_end":7911,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8596,"byte_end":8601,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8782,"byte_end":8787,"line_start":124,"line_end":124,"column_start":9,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":8937,"byte_end":8942,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9046,"byte_end":9051,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":9491,"byte_end":9496,"line_start":168,"line_end":168,"column_start":9,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":4574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10211,"byte_end":10216,"line_start":198,"line_end":198,"column_start":37,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10397,"byte_end":10402,"line_start":205,"line_end":205,"column_start":51,"column_end":56},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10562,"byte_end":10567,"line_start":212,"line_end":212,"column_start":29,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10732,"byte_end":10737,"line_start":218,"line_end":218,"column_start":55,"column_end":60},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":10888,"byte_end":10893,"line_start":224,"line_end":224,"column_start":37,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11041,"byte_end":11046,"line_start":230,"line_end":230,"column_start":47,"column_end":52},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11239,"byte_end":11244,"line_start":237,"line_end":237,"column_start":37,"column_end":42},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11392,"byte_end":11397,"line_start":243,"line_end":243,"column_start":47,"column_end":52},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11564,"byte_end":11569,"line_start":251,"line_end":251,"column_start":40,"column_end":45},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11753,"byte_end":11758,"line_start":259,"line_end":259,"column_start":40,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":11886,"byte_end":11891,"line_start":265,"line_end":265,"column_start":40,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":12075,"byte_end":12080,"line_start":273,"line_end":273,"column_start":40,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":12202,"byte_end":12207,"line_start":279,"line_end":279,"column_start":34,"column_end":39},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4574},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\angle.rs","byte_start":12348,"byte_end":12353,"line_start":286,"line_end":286,"column_start":38,"column_end":43},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":4574},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20029,"byte_end":20034,"line_start":72,"line_end":72,"column_start":27,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20173,"byte_end":20178,"line_start":79,"line_end":79,"column_start":27,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20217,"byte_end":20222,"line_start":81,"line_end":81,"column_start":29,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20360,"byte_end":20365,"line_start":87,"line_end":87,"column_start":37,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20505,"byte_end":20510,"line_start":93,"line_end":93,"column_start":23,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20559,"byte_end":20564,"line_start":95,"line_end":95,"column_start":39,"column_end":44},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":20936,"byte_end":20941,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":21660,"byte_end":21665,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":23377,"byte_end":23382,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25074,"byte_end":25079,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":25364,"byte_end":25369,"line_start":260,"line_end":260,"column_start":12,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":26113,"byte_end":26118,"line_start":296,"line_end":296,"column_start":12,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":27333,"byte_end":27338,"line_start":332,"line_end":332,"column_start":12,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28335,"byte_end":28340,"line_start":373,"line_end":373,"column_start":12,"column_end":17},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28653,"byte_end":28658,"line_start":384,"line_end":384,"column_start":12,"column_end":17},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":28879,"byte_end":28884,"line_start":394,"line_end":394,"column_start":12,"column_end":17},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29083,"byte_end":29088,"line_start":405,"line_end":405,"column_start":12,"column_end":17},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29288,"byte_end":29293,"line_start":415,"line_end":415,"column_start":35,"column_end":40},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29511,"byte_end":29516,"line_start":424,"line_end":424,"column_start":47,"column_end":52},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29659,"byte_end":29664,"line_start":431,"line_end":431,"column_start":35,"column_end":40},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":29882,"byte_end":29887,"line_start":440,"line_end":440,"column_start":47,"column_end":52},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30050,"byte_end":30055,"line_start":447,"line_end":447,"column_start":55,"column_end":60},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30303,"byte_end":30308,"line_start":456,"line_end":456,"column_start":60,"column_end":65},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30502,"byte_end":30507,"line_start":464,"line_end":464,"column_start":55,"column_end":60},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30755,"byte_end":30760,"line_start":473,"line_end":473,"column_start":60,"column_end":65},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":30911,"byte_end":30916,"line_start":481,"line_end":481,"column_start":12,"column_end":17},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":31982,"byte_end":31987,"line_start":525,"line_end":525,"column_start":28,"column_end":33},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":34833,"byte_end":34838,"line_start":603,"line_end":603,"column_start":19,"column_end":24},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35019,"byte_end":35024,"line_start":611,"line_end":611,"column_start":12,"column_end":17},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":35699,"byte_end":35704,"line_start":630,"line_end":630,"column_start":12,"column_end":17},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36366,"byte_end":36371,"line_start":653,"line_end":653,"column_start":35,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box2d.rs","byte_start":36526,"byte_end":36531,"line_start":662,"line_end":662,"column_start":33,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":375},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45536,"byte_end":45541,"line_start":42,"line_end":42,"column_start":27,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45680,"byte_end":45685,"line_start":49,"line_end":49,"column_start":27,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45724,"byte_end":45729,"line_start":51,"line_end":51,"column_start":29,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":45867,"byte_end":45872,"line_start":57,"line_end":57,"column_start":37,"column_end":42},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46012,"byte_end":46017,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46066,"byte_end":46071,"line_start":65,"line_end":65,"column_start":39,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46443,"byte_end":46448,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":46877,"byte_end":46882,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":48908,"byte_end":48913,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50537,"byte_end":50542,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":50845,"byte_end":50850,"line_start":236,"line_end":236,"column_start":12,"column_end":17},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51369,"byte_end":51374,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":51840,"byte_end":51845,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53027,"byte_end":53032,"line_start":327,"line_end":327,"column_start":12,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53349,"byte_end":53354,"line_start":338,"line_end":338,"column_start":12,"column_end":17},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":53575,"byte_end":53580,"line_start":348,"line_end":348,"column_start":12,"column_end":17},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54150,"byte_end":54155,"line_start":377,"line_end":377,"column_start":12,"column_end":17},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54355,"byte_end":54360,"line_start":387,"line_end":387,"column_start":35,"column_end":40},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54578,"byte_end":54583,"line_start":396,"line_end":396,"column_start":47,"column_end":52},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54744,"byte_end":54749,"line_start":404,"line_end":404,"column_start":35,"column_end":40},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":54975,"byte_end":54980,"line_start":413,"line_end":413,"column_start":47,"column_end":52},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55161,"byte_end":55166,"line_start":421,"line_end":421,"column_start":55,"column_end":60},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55422,"byte_end":55427,"line_start":430,"line_end":430,"column_start":60,"column_end":65},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55629,"byte_end":55634,"line_start":438,"line_end":438,"column_start":55,"column_end":60},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":55890,"byte_end":55895,"line_start":447,"line_end":447,"column_start":60,"column_end":65},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":56054,"byte_end":56059,"line_start":455,"line_end":455,"column_start":12,"column_end":17},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":57343,"byte_end":57348,"line_start":510,"line_end":510,"column_start":28,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60214,"byte_end":60219,"line_start":588,"line_end":588,"column_start":19,"column_end":24},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":60400,"byte_end":60405,"line_start":596,"line_end":596,"column_start":12,"column_end":17},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61084,"byte_end":61089,"line_start":615,"line_end":615,"column_start":12,"column_end":17},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61757,"byte_end":61762,"line_start":640,"line_end":640,"column_start":35,"column_end":40},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\box3d.rs","byte_start":61917,"byte_end":61922,"line_start":649,"line_end":649,"column_start":33,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":619},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72239,"byte_end":72256,"line_start":36,"line_end":36,"column_start":27,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":72295,"byte_end":72312,"line_start":38,"line_end":38,"column_start":29,"column_end":46},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":73543,"byte_end":73560,"line_start":89,"line_end":89,"column_start":19,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":73608,"byte_end":73625,"line_start":91,"line_end":91,"column_start":26,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":73817,"byte_end":73834,"line_start":100,"line_end":100,"column_start":21,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74033,"byte_end":74050,"line_start":112,"line_end":112,"column_start":12,"column_end":29},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":74376,"byte_end":74393,"line_start":126,"line_end":126,"column_start":59,"column_end":76},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75198,"byte_end":75215,"line_start":156,"line_end":156,"column_start":43,"column_end":60},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75393,"byte_end":75410,"line_start":163,"line_end":163,"column_start":43,"column_end":60},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75587,"byte_end":75604,"line_start":170,"line_end":170,"column_start":48,"column_end":65},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75778,"byte_end":75795,"line_start":177,"line_end":177,"column_start":41,"column_end":58},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\homogen.rs","byte_start":75961,"byte_end":75978,"line_start":184,"line_end":184,"column_start":39,"column_end":56},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78778,"byte_end":78784,"line_start":46,"line_end":46,"column_start":29,"column_end":35},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":78902,"byte_end":78908,"line_start":52,"line_end":52,"column_start":27,"column_end":33},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79649,"byte_end":79655,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":79823,"byte_end":79829,"line_start":94,"line_end":94,"column_start":19,"column_end":25},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":80898,"byte_end":80904,"line_start":132,"line_end":132,"column_start":24,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81251,"byte_end":81257,"line_start":146,"line_end":146,"column_start":29,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81709,"byte_end":81715,"line_start":159,"line_end":159,"column_start":39,"column_end":45},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81846,"byte_end":81852,"line_start":165,"line_end":165,"column_start":33,"column_end":39},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":81977,"byte_end":81983,"line_start":172,"line_end":172,"column_start":27,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82111,"byte_end":82117,"line_start":179,"line_end":179,"column_start":25,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82320,"byte_end":82326,"line_start":188,"line_end":188,"column_start":39,"column_end":45},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82545,"byte_end":82551,"line_start":197,"line_end":197,"column_start":44,"column_end":50},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82759,"byte_end":82765,"line_start":204,"line_end":204,"column_start":74,"column_end":80},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":82939,"byte_end":82945,"line_start":211,"line_end":211,"column_start":37,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83077,"byte_end":83083,"line_start":218,"line_end":218,"column_start":25,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83292,"byte_end":83298,"line_start":227,"line_end":227,"column_start":37,"column_end":43},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83476,"byte_end":83482,"line_start":234,"line_end":234,"column_start":39,"column_end":45},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":965},"to":{"krate":4,"index":768}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":83779,"byte_end":83785,"line_start":245,"line_end":245,"column_start":48,"column_end":54},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84007,"byte_end":84013,"line_start":255,"line_end":255,"column_start":28,"column_end":34},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84242,"byte_end":84248,"line_start":265,"line_end":265,"column_start":56,"column_end":62},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84397,"byte_end":84403,"line_start":273,"line_end":273,"column_start":28,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84632,"byte_end":84638,"line_start":283,"line_end":283,"column_start":56,"column_end":62},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":84816,"byte_end":84822,"line_start":291,"line_end":291,"column_start":52,"column_end":58},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85074,"byte_end":85080,"line_start":301,"line_end":301,"column_start":52,"column_end":58},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85292,"byte_end":85298,"line_start":311,"line_end":311,"column_start":25,"column_end":31},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85471,"byte_end":85477,"line_start":320,"line_end":320,"column_start":37,"column_end":43},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85602,"byte_end":85608,"line_start":326,"line_end":326,"column_start":39,"column_end":45},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":2722}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85747,"byte_end":85753,"line_start":332,"line_end":332,"column_start":23,"column_end":29},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85788,"byte_end":85794,"line_start":334,"line_end":334,"column_start":25,"column_end":31},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":965},"to":{"krate":1,"index":2711}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":85913,"byte_end":85919,"line_start":340,"line_end":340,"column_start":27,"column_end":33},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":965},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\length.rs","byte_start":86049,"byte_end":86055,"line_start":347,"line_end":347,"column_start":41,"column_end":47},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":965},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94753,"byte_end":94754,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1125},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":94894,"byte_end":94895,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1130},"to":{"krate":0,"index":1127}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95036,"byte_end":95040,"line_start":49,"line_end":49,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95311,"byte_end":95315,"line_start":57,"line_end":57,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\num.rs","byte_start":95621,"byte_end":95625,"line_start":65,"line_end":65,"column_start":17,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98198,"byte_end":98205,"line_start":42,"line_end":42,"column_start":27,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":98244,"byte_end":98251,"line_start":44,"line_end":44,"column_start":29,"column_end":36},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":99683,"byte_end":99690,"line_start":107,"line_end":107,"column_start":19,"column_end":26},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":99738,"byte_end":99745,"line_start":109,"line_end":109,"column_start":26,"column_end":33},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":99895,"byte_end":99902,"line_start":118,"line_end":118,"column_start":21,"column_end":28},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100116,"byte_end":100123,"line_start":130,"line_end":130,"column_start":39,"column_end":46},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100297,"byte_end":100304,"line_start":136,"line_end":136,"column_start":33,"column_end":40},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":100421,"byte_end":100428,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":101577,"byte_end":101584,"line_start":197,"line_end":197,"column_start":18,"column_end":25},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":106646,"byte_end":106653,"line_start":397,"line_end":397,"column_start":24,"column_end":31},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":107254,"byte_end":107261,"line_start":421,"line_end":421,"column_start":28,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110075,"byte_end":110082,"line_start":499,"line_end":499,"column_start":19,"column_end":26},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110286,"byte_end":110293,"line_start":507,"line_end":507,"column_start":39,"column_end":46},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110481,"byte_end":110488,"line_start":514,"line_end":514,"column_start":39,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110625,"byte_end":110632,"line_start":521,"line_end":521,"column_start":25,"column_end":32},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":110812,"byte_end":110819,"line_start":530,"line_end":530,"column_start":39,"column_end":46},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111059,"byte_end":111066,"line_start":539,"line_end":539,"column_start":51,"column_end":58},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111253,"byte_end":111260,"line_start":547,"line_end":547,"column_start":41,"column_end":48},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111511,"byte_end":111518,"line_start":556,"line_end":556,"column_start":69,"column_end":76},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111658,"byte_end":111665,"line_start":563,"line_end":563,"column_start":25,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":111875,"byte_end":111882,"line_start":572,"line_end":572,"column_start":39,"column_end":46},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112122,"byte_end":112129,"line_start":581,"line_end":581,"column_start":51,"column_end":58},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112316,"byte_end":112323,"line_start":589,"line_end":589,"column_start":41,"column_end":48},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112574,"byte_end":112581,"line_start":598,"line_end":598,"column_start":69,"column_end":76},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112731,"byte_end":112738,"line_start":605,"line_end":605,"column_start":35,"column_end":42},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":112959,"byte_end":112966,"line_start":614,"line_end":614,"column_start":56,"column_end":63},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113123,"byte_end":113130,"line_start":621,"line_end":621,"column_start":55,"column_end":62},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113376,"byte_end":113383,"line_start":630,"line_end":630,"column_start":60,"column_end":67},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113557,"byte_end":113564,"line_start":638,"line_end":638,"column_start":35,"column_end":42},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113785,"byte_end":113792,"line_start":647,"line_end":647,"column_start":56,"column_end":63},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":113949,"byte_end":113956,"line_start":654,"line_end":654,"column_start":55,"column_end":62},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114202,"byte_end":114209,"line_start":663,"line_end":663,"column_start":60,"column_end":67},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114375,"byte_end":114382,"line_start":671,"line_end":671,"column_start":27,"column_end":34},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1235},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114489,"byte_end":114496,"line_start":678,"line_end":678,"column_start":29,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1235},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114650,"byte_end":114657,"line_start":686,"line_end":686,"column_start":27,"column_end":34},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1235},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114809,"byte_end":114816,"line_start":694,"line_end":694,"column_start":29,"column_end":36},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1235},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":114996,"byte_end":115003,"line_start":702,"line_end":702,"column_start":53,"column_end":60},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1235},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115328,"byte_end":115335,"line_start":714,"line_end":714,"column_start":29,"column_end":36},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115436,"byte_end":115443,"line_start":720,"line_end":720,"column_start":29,"column_end":36},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115548,"byte_end":115555,"line_start":726,"line_end":726,"column_start":29,"column_end":36},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115656,"byte_end":115663,"line_start":732,"line_end":732,"column_start":29,"column_end":36},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1235},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":115984,"byte_end":115991,"line_start":750,"line_end":750,"column_start":27,"column_end":34},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":116030,"byte_end":116037,"line_start":752,"line_end":752,"column_start":29,"column_end":36},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117150,"byte_end":117157,"line_start":801,"line_end":801,"column_start":19,"column_end":26},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117205,"byte_end":117212,"line_start":803,"line_end":803,"column_start":26,"column_end":33},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117383,"byte_end":117390,"line_start":812,"line_end":812,"column_start":21,"column_end":28},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117592,"byte_end":117599,"line_start":823,"line_end":823,"column_start":39,"column_end":46},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117840,"byte_end":117847,"line_start":833,"line_end":833,"column_start":33,"column_end":40},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":117984,"byte_end":117991,"line_start":839,"line_end":839,"column_start":12,"column_end":19},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":119228,"byte_end":119235,"line_start":896,"line_end":896,"column_start":18,"column_end":25},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":124826,"byte_end":124833,"line_start":1111,"line_end":1111,"column_start":24,"column_end":31},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":125572,"byte_end":125579,"line_start":1143,"line_end":1143,"column_start":28,"column_end":35},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128479,"byte_end":128486,"line_start":1225,"line_end":1225,"column_start":19,"column_end":26},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128712,"byte_end":128719,"line_start":1233,"line_end":1233,"column_start":39,"column_end":46},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":128975,"byte_end":128982,"line_start":1244,"line_end":1244,"column_start":39,"column_end":46},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129119,"byte_end":129126,"line_start":1251,"line_end":1251,"column_start":25,"column_end":32},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129315,"byte_end":129322,"line_start":1260,"line_end":1260,"column_start":39,"column_end":46},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129631,"byte_end":129638,"line_start":1273,"line_end":1273,"column_start":51,"column_end":58},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":129856,"byte_end":129863,"line_start":1282,"line_end":1282,"column_start":41,"column_end":48},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130132,"byte_end":130139,"line_start":1291,"line_end":1291,"column_start":69,"column_end":76},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130279,"byte_end":130286,"line_start":1298,"line_end":1298,"column_start":25,"column_end":32},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130514,"byte_end":130521,"line_start":1307,"line_end":1307,"column_start":39,"column_end":46},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":130830,"byte_end":130837,"line_start":1320,"line_end":1320,"column_start":51,"column_end":58},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131055,"byte_end":131062,"line_start":1329,"line_end":1329,"column_start":41,"column_end":48},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131331,"byte_end":131338,"line_start":1338,"line_end":1338,"column_start":69,"column_end":76},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131488,"byte_end":131495,"line_start":1345,"line_end":1345,"column_start":35,"column_end":42},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131770,"byte_end":131777,"line_start":1358,"line_end":1358,"column_start":47,"column_end":54},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":131979,"byte_end":131986,"line_start":1367,"line_end":1367,"column_start":55,"column_end":62},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132297,"byte_end":132304,"line_start":1380,"line_end":1380,"column_start":60,"column_end":67},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132450,"byte_end":132457,"line_start":1387,"line_end":1387,"column_start":35,"column_end":42},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132732,"byte_end":132739,"line_start":1400,"line_end":1400,"column_start":47,"column_end":54},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":132941,"byte_end":132948,"line_start":1409,"line_end":1409,"column_start":55,"column_end":62},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133259,"byte_end":133266,"line_start":1422,"line_end":1422,"column_start":60,"column_end":67},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133404,"byte_end":133411,"line_start":1429,"line_end":1429,"column_start":27,"column_end":34},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1450},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133518,"byte_end":133525,"line_start":1436,"line_end":1436,"column_start":29,"column_end":36},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1450},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133679,"byte_end":133686,"line_start":1444,"line_end":1444,"column_start":27,"column_end":34},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1450},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":133838,"byte_end":133845,"line_start":1452,"line_end":1452,"column_start":29,"column_end":36},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1450},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134025,"byte_end":134032,"line_start":1460,"line_end":1460,"column_start":53,"column_end":60},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1450},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134491,"byte_end":134498,"line_start":1478,"line_end":1478,"column_start":29,"column_end":36},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134607,"byte_end":134614,"line_start":1484,"line_end":1484,"column_start":29,"column_end":36},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134728,"byte_end":134735,"line_start":1490,"line_end":1490,"column_start":32,"column_end":39},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\point.rs","byte_start":134850,"byte_end":134857,"line_start":1496,"line_end":1496,"column_start":32,"column_end":39},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":1450},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150788,"byte_end":150792,"line_start":80,"line_end":80,"column_start":27,"column_end":31},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150935,"byte_end":150939,"line_start":87,"line_end":87,"column_start":27,"column_end":31},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":150978,"byte_end":150982,"line_start":89,"line_end":89,"column_start":29,"column_end":33},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151124,"byte_end":151128,"line_start":95,"line_end":95,"column_start":37,"column_end":41},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151276,"byte_end":151280,"line_start":101,"line_end":101,"column_start":23,"column_end":27},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151329,"byte_end":151333,"line_start":103,"line_end":103,"column_start":39,"column_end":43},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151606,"byte_end":151610,"line_start":113,"line_end":113,"column_start":33,"column_end":37},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151724,"byte_end":151728,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":151896,"byte_end":151900,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":152301,"byte_end":152305,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":153573,"byte_end":153577,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154096,"byte_end":154100,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154456,"byte_end":154460,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":154880,"byte_end":154884,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":155454,"byte_end":155458,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156305,"byte_end":156309,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":156927,"byte_end":156931,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":157744,"byte_end":157748,"line_start":349,"line_end":349,"column_start":12,"column_end":16},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158116,"byte_end":158120,"line_start":363,"line_end":363,"column_start":12,"column_end":16},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158343,"byte_end":158347,"line_start":373,"line_end":373,"column_start":12,"column_end":16},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158578,"byte_end":158582,"line_start":383,"line_end":383,"column_start":12,"column_end":16},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":158920,"byte_end":158924,"line_start":396,"line_end":396,"column_start":39,"column_end":43},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159048,"byte_end":159052,"line_start":403,"line_end":403,"column_start":38,"column_end":42},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159187,"byte_end":159191,"line_start":410,"line_end":410,"column_start":38,"column_end":42},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159391,"byte_end":159395,"line_start":421,"line_end":421,"column_start":35,"column_end":39},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159615,"byte_end":159619,"line_start":430,"line_end":430,"column_start":47,"column_end":51},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159762,"byte_end":159766,"line_start":437,"line_end":437,"column_start":35,"column_end":39},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":159994,"byte_end":159998,"line_start":446,"line_end":446,"column_start":47,"column_end":51},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160161,"byte_end":160165,"line_start":453,"line_end":453,"column_start":55,"column_end":59},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160423,"byte_end":160427,"line_start":462,"line_end":462,"column_start":60,"column_end":64},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160633,"byte_end":160637,"line_start":470,"line_end":470,"column_start":55,"column_end":59},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":160895,"byte_end":160899,"line_start":479,"line_end":479,"column_start":60,"column_end":64},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161068,"byte_end":161072,"line_start":487,"line_end":487,"column_start":18,"column_end":22},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":161713,"byte_end":161717,"line_start":510,"line_end":510,"column_start":28,"column_end":32},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165004,"byte_end":165008,"line_start":598,"line_end":598,"column_start":19,"column_end":23},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":165257,"byte_end":165261,"line_start":606,"line_end":606,"column_start":76,"column_end":80},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rect.rs","byte_start":167323,"byte_end":167327,"line_start":657,"line_end":657,"column_start":35,"column_end":39},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":1744},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":177902,"byte_end":177918,"line_start":30,"line_end":30,"column_start":19,"column_end":35},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":4672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178231,"byte_end":178247,"line_start":41,"line_end":41,"column_start":25,"column_end":41},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":4672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":178528,"byte_end":178544,"line_start":50,"line_end":50,"column_start":39,"column_end":55},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":4672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182886,"byte_end":182902,"line_start":188,"line_end":188,"column_start":34,"column_end":50},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":4672},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":182955,"byte_end":182971,"line_start":190,"line_end":190,"column_start":36,"column_end":52},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":4672},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":183465,"byte_end":183481,"line_start":206,"line_end":206,"column_start":9,"column_end":25},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":4672},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rigid.rs","byte_start":183656,"byte_end":183672,"line_start":213,"line_end":213,"column_start":66,"column_end":82},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":4672},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187642,"byte_end":187652,"line_start":43,"line_end":43,"column_start":34,"column_end":44},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2088},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187705,"byte_end":187715,"line_start":45,"line_end":45,"column_start":36,"column_end":46},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2088},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187897,"byte_end":187907,"line_start":54,"line_end":54,"column_start":26,"column_end":36},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2088},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":187969,"byte_end":187979,"line_start":56,"line_end":56,"column_start":33,"column_end":43},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2088},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188130,"byte_end":188140,"line_start":65,"line_end":65,"column_start":28,"column_end":38},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2088},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":188503,"byte_end":188513,"line_start":80,"line_end":80,"column_start":19,"column_end":29},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":189064,"byte_end":189074,"line_start":105,"line_end":105,"column_start":25,"column_end":35},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190719,"byte_end":190729,"line_start":168,"line_end":168,"column_start":19,"column_end":29},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":190933,"byte_end":190943,"line_start":178,"line_end":178,"column_start":25,"column_end":35},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":192341,"byte_end":192351,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193771,"byte_end":193781,"line_start":260,"line_end":260,"column_start":34,"column_end":44},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":193834,"byte_end":193844,"line_start":262,"line_end":262,"column_start":36,"column_end":46},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194111,"byte_end":194121,"line_start":274,"line_end":274,"column_start":26,"column_end":36},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194183,"byte_end":194193,"line_start":276,"line_end":276,"column_start":33,"column_end":43},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194399,"byte_end":194409,"line_start":285,"line_end":285,"column_start":28,"column_end":38},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":194840,"byte_end":194850,"line_start":303,"line_end":303,"column_start":19,"column_end":29},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":2154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":195721,"byte_end":195731,"line_start":334,"line_end":334,"column_start":19,"column_end":29},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":2154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":198278,"byte_end":198288,"line_start":418,"line_end":418,"column_start":19,"column_end":29},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":2154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":207919,"byte_end":207929,"line_start":721,"line_end":721,"column_start":46,"column_end":56},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":2154},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\rotation.rs","byte_start":208184,"byte_end":208194,"line_start":731,"line_end":731,"column_start":35,"column_end":45},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":2154},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":218854,"byte_end":218859,"line_start":55,"line_end":55,"column_start":19,"column_end":24},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":2299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":223521,"byte_end":223526,"line_start":243,"line_end":243,"column_start":28,"column_end":33},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":2299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225620,"byte_end":225625,"line_start":308,"line_end":308,"column_start":47,"column_end":52},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":225848,"byte_end":225853,"line_start":318,"line_end":318,"column_start":32,"column_end":37},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226088,"byte_end":226093,"line_start":328,"line_end":328,"column_start":32,"column_end":37},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226451,"byte_end":226456,"line_start":340,"line_end":340,"column_start":44,"column_end":49},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226591,"byte_end":226596,"line_start":346,"line_end":346,"column_start":30,"column_end":35},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226659,"byte_end":226664,"line_start":348,"line_end":348,"column_start":46,"column_end":51},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":2722}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226819,"byte_end":226824,"line_start":354,"line_end":354,"column_start":32,"column_end":37},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":2711}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":226959,"byte_end":226964,"line_start":360,"line_end":360,"column_start":36,"column_end":41},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227101,"byte_end":227106,"line_start":366,"line_end":366,"column_start":34,"column_end":39},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227169,"byte_end":227174,"line_start":368,"line_end":368,"column_start":46,"column_end":51},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227319,"byte_end":227324,"line_start":374,"line_end":374,"column_start":40,"column_end":45},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227441,"byte_end":227446,"line_start":380,"line_end":380,"column_start":34,"column_end":39},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":2299},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\scale.rs","byte_start":227576,"byte_end":227581,"line_start":386,"line_end":386,"column_start":32,"column_end":37},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2299},"to":{"krate":0,"index":1127}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230850,"byte_end":230863,"line_start":68,"line_end":68,"column_start":27,"column_end":40},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":230902,"byte_end":230915,"line_start":70,"line_end":70,"column_start":29,"column_end":42},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231199,"byte_end":231212,"line_start":82,"line_end":82,"column_start":19,"column_end":32},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231260,"byte_end":231273,"line_start":84,"line_end":84,"column_start":26,"column_end":39},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231529,"byte_end":231542,"line_start":96,"line_end":96,"column_start":21,"column_end":34},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":231782,"byte_end":231795,"line_start":108,"line_end":108,"column_start":39,"column_end":52},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232039,"byte_end":232052,"line_start":118,"line_end":118,"column_start":33,"column_end":46},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":232328,"byte_end":232341,"line_start":130,"line_end":130,"column_start":12,"column_end":25},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":2455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235419,"byte_end":235432,"line_start":237,"line_end":237,"column_start":20,"column_end":33},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":235764,"byte_end":235777,"line_start":252,"line_end":252,"column_start":32,"column_end":45},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236021,"byte_end":236034,"line_start":264,"line_end":264,"column_start":20,"column_end":33},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236366,"byte_end":236379,"line_start":279,"line_end":279,"column_start":32,"column_end":45},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236623,"byte_end":236636,"line_start":291,"line_end":291,"column_start":20,"column_end":33},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":236958,"byte_end":236971,"line_start":307,"line_end":307,"column_start":35,"column_end":48},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":237306,"byte_end":237319,"line_start":321,"line_end":321,"column_start":47,"column_end":60},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":237560,"byte_end":237573,"line_start":331,"line_end":331,"column_start":55,"column_end":68},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":237946,"byte_end":237959,"line_start":345,"line_end":345,"column_start":60,"column_end":73},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":238105,"byte_end":238118,"line_start":352,"line_end":352,"column_start":35,"column_end":48},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":238453,"byte_end":238466,"line_start":366,"line_end":366,"column_start":47,"column_end":60},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":238707,"byte_end":238720,"line_start":376,"line_end":376,"column_start":55,"column_end":68},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\side_offsets.rs","byte_start":239093,"byte_end":239106,"line_start":390,"line_end":390,"column_start":60,"column_end":73},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":2455},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243615,"byte_end":243621,"line_start":43,"line_end":43,"column_start":27,"column_end":33},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":243660,"byte_end":243666,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245271,"byte_end":245277,"line_start":110,"line_end":110,"column_start":19,"column_end":25},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245325,"byte_end":245331,"line_start":112,"line_end":112,"column_start":26,"column_end":32},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245499,"byte_end":245505,"line_start":121,"line_end":121,"column_start":21,"column_end":27},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245692,"byte_end":245698,"line_start":131,"line_end":131,"column_start":39,"column_end":45},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":245915,"byte_end":245921,"line_start":139,"line_end":139,"column_start":33,"column_end":39},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":246037,"byte_end":246043,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":247174,"byte_end":247180,"line_start":192,"line_end":192,"column_start":18,"column_end":24},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":250547,"byte_end":250553,"line_start":315,"line_end":315,"column_start":28,"column_end":34},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253720,"byte_end":253726,"line_start":403,"line_end":403,"column_start":19,"column_end":25},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":253920,"byte_end":253926,"line_start":411,"line_end":411,"column_start":20,"column_end":26},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":254519,"byte_end":254525,"line_start":427,"line_end":427,"column_start":24,"column_end":30},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256421,"byte_end":256427,"line_start":486,"line_end":486,"column_start":23,"column_end":29},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":2659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":256986,"byte_end":256992,"line_start":504,"line_end":504,"column_start":29,"column_end":35},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":2659},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257148,"byte_end":257154,"line_start":512,"line_end":512,"column_start":27,"column_end":33},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2659},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257308,"byte_end":257314,"line_start":520,"line_end":520,"column_start":29,"column_end":35},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2659},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257470,"byte_end":257476,"line_start":528,"line_end":528,"column_start":27,"column_end":33},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2659},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257604,"byte_end":257610,"line_start":535,"line_end":535,"column_start":25,"column_end":31},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":257789,"byte_end":257795,"line_start":544,"line_end":544,"column_start":25,"column_end":31},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258043,"byte_end":258049,"line_start":553,"line_end":553,"column_start":54,"column_end":60},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258249,"byte_end":258255,"line_start":560,"line_end":560,"column_start":44,"column_end":50},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258442,"byte_end":258448,"line_start":566,"line_end":566,"column_start":74,"column_end":80},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258602,"byte_end":258608,"line_start":572,"line_end":572,"column_start":37,"column_end":43},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":258780,"byte_end":258786,"line_start":580,"line_end":580,"column_start":25,"column_end":31},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259017,"byte_end":259023,"line_start":589,"line_end":589,"column_start":37,"column_end":43},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259205,"byte_end":259211,"line_start":597,"line_end":597,"column_start":35,"column_end":41},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259436,"byte_end":259442,"line_start":606,"line_end":606,"column_start":47,"column_end":53},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259628,"byte_end":259634,"line_start":614,"line_end":614,"column_start":55,"column_end":61},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":259893,"byte_end":259899,"line_start":623,"line_end":623,"column_start":60,"column_end":66},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260045,"byte_end":260051,"line_start":630,"line_end":630,"column_start":35,"column_end":41},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260276,"byte_end":260282,"line_start":639,"line_end":639,"column_start":47,"column_end":53},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260468,"byte_end":260474,"line_start":647,"line_end":647,"column_start":55,"column_end":61},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":260733,"byte_end":260739,"line_start":656,"line_end":656,"column_start":60,"column_end":66},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261497,"byte_end":261503,"line_start":691,"line_end":691,"column_start":37,"column_end":43},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261628,"byte_end":261634,"line_start":698,"line_end":698,"column_start":29,"column_end":35},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261758,"byte_end":261764,"line_start":705,"line_end":705,"column_start":29,"column_end":35},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":261882,"byte_end":261888,"line_start":712,"line_end":712,"column_start":29,"column_end":35},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":262012,"byte_end":262018,"line_start":719,"line_end":719,"column_start":29,"column_end":35},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2659},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268708,"byte_end":268714,"line_start":955,"line_end":955,"column_start":27,"column_end":33},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":268753,"byte_end":268759,"line_start":957,"line_end":957,"column_start":29,"column_end":35},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":269931,"byte_end":269937,"line_start":1006,"line_end":1006,"column_start":19,"column_end":25},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":269985,"byte_end":269991,"line_start":1008,"line_end":1008,"column_start":26,"column_end":32},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270188,"byte_end":270194,"line_start":1017,"line_end":1017,"column_start":21,"column_end":27},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270409,"byte_end":270415,"line_start":1028,"line_end":1028,"column_start":39,"column_end":45},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270699,"byte_end":270705,"line_start":1038,"line_end":1038,"column_start":33,"column_end":39},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":270841,"byte_end":270847,"line_start":1044,"line_end":1044,"column_start":12,"column_end":18},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":272076,"byte_end":272082,"line_start":1092,"line_end":1092,"column_start":18,"column_end":24},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":275670,"byte_end":275676,"line_start":1215,"line_end":1215,"column_start":28,"column_end":34},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278575,"byte_end":278581,"line_start":1297,"line_end":1297,"column_start":19,"column_end":25},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":278801,"byte_end":278807,"line_start":1305,"line_end":1305,"column_start":20,"column_end":26},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":279445,"byte_end":279451,"line_start":1321,"line_end":1321,"column_start":24,"column_end":30},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":281527,"byte_end":281533,"line_start":1389,"line_end":1389,"column_start":23,"column_end":29},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282176,"byte_end":282182,"line_start":1409,"line_end":1409,"column_start":29,"column_end":35},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2873},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282338,"byte_end":282344,"line_start":1417,"line_end":1417,"column_start":27,"column_end":33},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2873},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282498,"byte_end":282504,"line_start":1425,"line_end":1425,"column_start":29,"column_end":35},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2873},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282660,"byte_end":282666,"line_start":1433,"line_end":1433,"column_start":27,"column_end":33},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2873},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":282808,"byte_end":282814,"line_start":1440,"line_end":1440,"column_start":25,"column_end":31},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283006,"byte_end":283012,"line_start":1449,"line_end":1449,"column_start":25,"column_end":31},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283333,"byte_end":283339,"line_start":1462,"line_end":1462,"column_start":54,"column_end":60},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283612,"byte_end":283618,"line_start":1473,"line_end":1473,"column_start":44,"column_end":50},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283805,"byte_end":283811,"line_start":1479,"line_end":1479,"column_start":74,"column_end":80},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":283965,"byte_end":283971,"line_start":1485,"line_end":1485,"column_start":37,"column_end":43},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":284178,"byte_end":284184,"line_start":1494,"line_end":1494,"column_start":25,"column_end":31},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":284488,"byte_end":284494,"line_start":1507,"line_end":1507,"column_start":37,"column_end":43},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":284711,"byte_end":284717,"line_start":1516,"line_end":1516,"column_start":35,"column_end":41},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285009,"byte_end":285015,"line_start":1529,"line_end":1529,"column_start":47,"column_end":53},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285230,"byte_end":285236,"line_start":1538,"line_end":1538,"column_start":55,"column_end":61},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285564,"byte_end":285570,"line_start":1551,"line_end":1551,"column_start":60,"column_end":66},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":285716,"byte_end":285722,"line_start":1558,"line_end":1558,"column_start":35,"column_end":41},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":286014,"byte_end":286020,"line_start":1571,"line_end":1571,"column_start":47,"column_end":53},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":286235,"byte_end":286241,"line_start":1580,"line_end":1580,"column_start":55,"column_end":61},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":286569,"byte_end":286575,"line_start":1593,"line_end":1593,"column_start":60,"column_end":66},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287152,"byte_end":287158,"line_start":1619,"line_end":1619,"column_start":37,"column_end":43},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287288,"byte_end":287294,"line_start":1626,"line_end":1626,"column_start":29,"column_end":35},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287430,"byte_end":287436,"line_start":1633,"line_end":1633,"column_start":29,"column_end":35},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287563,"byte_end":287569,"line_start":1640,"line_end":1640,"column_start":32,"column_end":38},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\size.rs","byte_start":287711,"byte_end":287717,"line_start":1647,"line_end":1647,"column_start":32,"column_end":38},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":2873},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":297608,"byte_end":297619,"line_start":95,"line_end":95,"column_start":34,"column_end":45},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":297672,"byte_end":297683,"line_start":97,"line_end":97,"column_start":36,"column_end":47},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298037,"byte_end":298048,"line_start":111,"line_end":111,"column_start":26,"column_end":37},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298110,"byte_end":298121,"line_start":113,"line_end":113,"column_start":33,"column_end":44},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298452,"byte_end":298463,"line_start":126,"line_end":126,"column_start":28,"column_end":39},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":298736,"byte_end":298747,"line_start":140,"line_end":140,"column_start":19,"column_end":30},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":300412,"byte_end":300423,"line_start":190,"line_end":190,"column_start":25,"column_end":36},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":304171,"byte_end":304182,"line_start":314,"line_end":314,"column_start":35,"column_end":46},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305101,"byte_end":305112,"line_start":340,"line_end":340,"column_start":19,"column_end":30},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":305746,"byte_end":305757,"line_start":369,"line_end":369,"column_start":19,"column_end":30},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":306544,"byte_end":306555,"line_start":391,"line_end":391,"column_start":19,"column_end":30},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":307657,"byte_end":307668,"line_start":436,"line_end":436,"column_start":19,"column_end":30},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":308636,"byte_end":308647,"line_start":469,"line_end":469,"column_start":19,"column_end":30},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":309739,"byte_end":309750,"line_start":517,"line_end":517,"column_start":19,"column_end":30},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":311574,"byte_end":311585,"line_start":576,"line_end":576,"column_start":19,"column_end":30},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312720,"byte_end":312731,"line_start":615,"line_end":615,"column_start":32,"column_end":43},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":312939,"byte_end":312950,"line_start":624,"line_end":624,"column_start":48,"column_end":59},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform2d.rs","byte_start":313536,"byte_end":313547,"line_start":637,"line_end":637,"column_start":34,"column_end":45},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":322652,"byte_end":322663,"line_start":116,"line_end":116,"column_start":34,"column_end":45},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":322716,"byte_end":322727,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":323431,"byte_end":323442,"line_start":142,"line_end":142,"column_start":26,"column_end":37},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":323504,"byte_end":323515,"line_start":144,"line_end":144,"column_start":33,"column_end":44},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324216,"byte_end":324227,"line_start":167,"line_end":167,"column_start":28,"column_end":39},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":324760,"byte_end":324771,"line_start":191,"line_end":191,"column_start":19,"column_end":30},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":327179,"byte_end":327190,"line_start":272,"line_end":272,"column_start":25,"column_end":36},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":332635,"byte_end":332646,"line_start":424,"line_end":424,"column_start":20,"column_end":31},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":334485,"byte_end":334496,"line_start":499,"line_end":499,"column_start":20,"column_end":31},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":336764,"byte_end":336775,"line_start":534,"line_end":534,"column_start":20,"column_end":31},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":337945,"byte_end":337956,"line_start":579,"line_end":579,"column_start":19,"column_end":30},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":339632,"byte_end":339643,"line_start":635,"line_end":635,"column_start":19,"column_end":30},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":340992,"byte_end":341003,"line_start":685,"line_end":685,"column_start":19,"column_end":30},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":346691,"byte_end":346702,"line_start":825,"line_end":825,"column_start":20,"column_end":31},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":354252,"byte_end":354263,"line_start":996,"line_end":996,"column_start":20,"column_end":31},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":355809,"byte_end":355820,"line_start":1037,"line_end":1037,"column_start":35,"column_end":46},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":357319,"byte_end":357330,"line_start":1068,"line_end":1068,"column_start":32,"column_end":43},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":358298,"byte_end":358309,"line_start":1093,"line_end":1093,"column_start":48,"column_end":59},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":3405},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":359243,"byte_end":359254,"line_start":1109,"line_end":1109,"column_start":32,"column_end":43},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\transform3d.rs","byte_start":359448,"byte_end":359459,"line_start":1118,"line_end":1118,"column_start":34,"column_end":45},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":3405},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372879,"byte_end":372892,"line_start":76,"line_end":76,"column_start":34,"column_end":47},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":372945,"byte_end":372958,"line_start":78,"line_end":78,"column_start":36,"column_end":49},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373166,"byte_end":373179,"line_start":88,"line_end":88,"column_start":26,"column_end":39},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373241,"byte_end":373254,"line_start":90,"line_end":90,"column_start":33,"column_end":46},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373418,"byte_end":373431,"line_start":99,"line_end":99,"column_start":28,"column_end":41},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":373596,"byte_end":373609,"line_start":109,"line_end":109,"column_start":19,"column_end":32},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":3668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":374965,"byte_end":374978,"line_start":166,"line_end":166,"column_start":25,"column_end":38},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":3668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":377427,"byte_end":377440,"line_start":263,"line_end":263,"column_start":69,"column_end":82},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":377728,"byte_end":377741,"line_start":271,"line_end":271,"column_start":72,"column_end":85},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":377954,"byte_end":377967,"line_start":278,"line_end":278,"column_start":69,"column_end":82},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378255,"byte_end":378268,"line_start":286,"line_end":286,"column_start":72,"column_end":85},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378458,"byte_end":378471,"line_start":293,"line_end":293,"column_start":46,"column_end":59},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378621,"byte_end":378634,"line_start":299,"line_end":299,"column_start":46,"column_end":59},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378781,"byte_end":378794,"line_start":305,"line_end":305,"column_start":54,"column_end":67},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":378971,"byte_end":378984,"line_start":314,"line_end":314,"column_start":31,"column_end":44},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379125,"byte_end":379138,"line_start":323,"line_end":323,"column_start":46,"column_end":59},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":3668},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379678,"byte_end":379691,"line_start":342,"line_end":342,"column_start":34,"column_end":47},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":379744,"byte_end":379757,"line_start":344,"line_end":344,"column_start":36,"column_end":49},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":380761,"byte_end":380774,"line_start":387,"line_end":387,"column_start":26,"column_end":39},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":380836,"byte_end":380849,"line_start":389,"line_end":389,"column_start":33,"column_end":46},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381034,"byte_end":381047,"line_start":398,"line_end":398,"column_start":28,"column_end":41},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":381236,"byte_end":381249,"line_start":409,"line_end":409,"column_start":19,"column_end":32},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":3772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":382770,"byte_end":382783,"line_start":469,"line_end":469,"column_start":25,"column_end":38},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":3772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":385863,"byte_end":385876,"line_start":589,"line_end":589,"column_start":69,"column_end":82},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386182,"byte_end":386195,"line_start":597,"line_end":597,"column_start":72,"column_end":85},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386435,"byte_end":386448,"line_start":605,"line_end":605,"column_start":69,"column_end":82},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386754,"byte_end":386767,"line_start":613,"line_end":613,"column_start":72,"column_end":85},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":386984,"byte_end":386997,"line_start":621,"line_end":621,"column_start":46,"column_end":59},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387152,"byte_end":387165,"line_start":627,"line_end":627,"column_start":46,"column_end":59},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387320,"byte_end":387333,"line_start":633,"line_end":633,"column_start":54,"column_end":67},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387518,"byte_end":387531,"line_start":642,"line_end":642,"column_start":31,"column_end":44},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\translation.rs","byte_start":387672,"byte_end":387685,"line_start":651,"line_end":651,"column_start":46,"column_end":59},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":3772},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399427,"byte_end":399435,"line_start":51,"line_end":51,"column_start":27,"column_end":35},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":399474,"byte_end":399482,"line_start":53,"line_end":53,"column_start":29,"column_end":37},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":400926,"byte_end":400934,"line_start":116,"line_end":116,"column_start":23,"column_end":31},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":400981,"byte_end":400989,"line_start":118,"line_end":118,"column_start":37,"column_end":45},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401121,"byte_end":401129,"line_start":124,"line_end":124,"column_start":27,"column_end":35},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401276,"byte_end":401284,"line_start":131,"line_end":131,"column_start":27,"column_end":35},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401481,"byte_end":401489,"line_start":139,"line_end":139,"column_start":39,"column_end":47},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401663,"byte_end":401671,"line_start":145,"line_end":145,"column_start":33,"column_end":41},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":401789,"byte_end":401797,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":404813,"byte_end":404821,"line_start":277,"line_end":277,"column_start":18,"column_end":26},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":408336,"byte_end":408344,"line_start":420,"line_end":420,"column_start":12,"column_end":20},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409230,"byte_end":409238,"line_start":452,"line_end":452,"column_start":19,"column_end":27},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":409805,"byte_end":409813,"line_start":473,"line_end":473,"column_start":18,"column_end":26},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":411585,"byte_end":411593,"line_start":538,"line_end":538,"column_start":12,"column_end":20},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":412705,"byte_end":412713,"line_start":573,"line_end":573,"column_start":24,"column_end":32},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414015,"byte_end":414023,"line_start":617,"line_end":617,"column_start":23,"column_end":31},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":414573,"byte_end":414581,"line_start":637,"line_end":637,"column_start":28,"column_end":36},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":4007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417433,"byte_end":417441,"line_start":715,"line_end":715,"column_start":25,"column_end":33},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417606,"byte_end":417614,"line_start":724,"line_end":724,"column_start":25,"column_end":33},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":417833,"byte_end":417841,"line_start":733,"line_end":733,"column_start":39,"column_end":47},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418066,"byte_end":418074,"line_start":742,"line_end":742,"column_start":44,"column_end":52},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418261,"byte_end":418269,"line_start":748,"line_end":748,"column_start":74,"column_end":82},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418439,"byte_end":418447,"line_start":754,"line_end":754,"column_start":53,"column_end":61},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418577,"byte_end":418585,"line_start":761,"line_end":761,"column_start":25,"column_end":33},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418825,"byte_end":418833,"line_start":770,"line_end":770,"column_start":69,"column_end":77},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":418973,"byte_end":418981,"line_start":777,"line_end":777,"column_start":35,"column_end":43},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419201,"byte_end":419209,"line_start":786,"line_end":786,"column_start":56,"column_end":64},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419366,"byte_end":419374,"line_start":793,"line_end":793,"column_start":55,"column_end":63},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419619,"byte_end":419627,"line_start":802,"line_end":802,"column_start":60,"column_end":68},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":419801,"byte_end":419809,"line_start":810,"line_end":810,"column_start":35,"column_end":43},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420029,"byte_end":420037,"line_start":819,"line_end":819,"column_start":56,"column_end":64},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420194,"byte_end":420202,"line_start":826,"line_end":826,"column_start":55,"column_end":63},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420447,"byte_end":420455,"line_start":835,"line_end":835,"column_start":60,"column_end":68},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420623,"byte_end":420631,"line_start":843,"line_end":843,"column_start":29,"column_end":37},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420788,"byte_end":420796,"line_start":851,"line_end":851,"column_start":27,"column_end":35},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":420951,"byte_end":420959,"line_start":859,"line_end":859,"column_start":29,"column_end":37},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421143,"byte_end":421151,"line_start":867,"line_end":867,"column_start":54,"column_end":62},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":4007},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421474,"byte_end":421482,"line_start":879,"line_end":879,"column_start":29,"column_end":37},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421583,"byte_end":421591,"line_start":885,"line_end":885,"column_start":29,"column_end":37},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421694,"byte_end":421702,"line_start":891,"line_end":891,"column_start":29,"column_end":37},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421803,"byte_end":421811,"line_start":897,"line_end":897,"column_start":29,"column_end":37},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":421931,"byte_end":421939,"line_start":903,"line_end":903,"column_start":35,"column_end":43},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":4007},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422435,"byte_end":422443,"line_start":924,"line_end":924,"column_start":27,"column_end":35},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3034}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":422482,"byte_end":422490,"line_start":926,"line_end":926,"column_start":29,"column_end":37},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2645}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":423613,"byte_end":423621,"line_start":975,"line_end":975,"column_start":23,"column_end":31},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2680}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":423668,"byte_end":423676,"line_start":977,"line_end":977,"column_start":37,"column_end":45},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2675}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":423829,"byte_end":423837,"line_start":983,"line_end":983,"column_start":27,"column_end":35},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":9809}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424008,"byte_end":424016,"line_start":991,"line_end":991,"column_start":27,"column_end":35},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":4248},"to":{"krate":0,"index":1122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424218,"byte_end":424226,"line_start":999,"line_end":999,"column_start":39,"column_end":47},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":9602}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424467,"byte_end":424475,"line_start":1009,"line_end":1009,"column_start":33,"column_end":41},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3002}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":424613,"byte_end":424621,"line_start":1015,"line_end":1015,"column_start":12,"column_end":20},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":426827,"byte_end":426835,"line_start":1108,"line_end":1108,"column_start":18,"column_end":26},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431206,"byte_end":431214,"line_start":1281,"line_end":1281,"column_start":12,"column_end":20},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":431801,"byte_end":431809,"line_start":1303,"line_end":1303,"column_start":19,"column_end":27},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":432398,"byte_end":432406,"line_start":1324,"line_end":1324,"column_start":18,"column_end":26},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":434353,"byte_end":434361,"line_start":1396,"line_end":1396,"column_start":12,"column_end":20},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":435515,"byte_end":435523,"line_start":1431,"line_end":1431,"column_start":24,"column_end":32},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437029,"byte_end":437037,"line_start":1485,"line_end":1485,"column_start":23,"column_end":31},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":437655,"byte_end":437663,"line_start":1507,"line_end":1507,"column_start":28,"column_end":36},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":4248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440592,"byte_end":440600,"line_start":1589,"line_end":1589,"column_start":25,"column_end":33},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3118}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":440774,"byte_end":440782,"line_start":1598,"line_end":1598,"column_start":25,"column_end":33},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441023,"byte_end":441031,"line_start":1607,"line_end":1607,"column_start":52,"column_end":60},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3091}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441265,"byte_end":441273,"line_start":1616,"line_end":1616,"column_start":44,"column_end":52},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441460,"byte_end":441468,"line_start":1622,"line_end":1622,"column_start":74,"column_end":82},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":7681}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441638,"byte_end":441646,"line_start":1628,"line_end":1628,"column_start":53,"column_end":61},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3122}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":441776,"byte_end":441784,"line_start":1635,"line_end":1635,"column_start":25,"column_end":33},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3096}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442042,"byte_end":442050,"line_start":1644,"line_end":1644,"column_start":69,"column_end":77},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3126}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442190,"byte_end":442198,"line_start":1651,"line_end":1651,"column_start":35,"column_end":43},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442481,"byte_end":442489,"line_start":1664,"line_end":1664,"column_start":56,"column_end":64},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442646,"byte_end":442654,"line_start":1671,"line_end":1671,"column_start":55,"column_end":63},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3101}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":442964,"byte_end":442972,"line_start":1684,"line_end":1684,"column_start":60,"column_end":68},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3130}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443173,"byte_end":443181,"line_start":1693,"line_end":1693,"column_start":35,"column_end":43},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443464,"byte_end":443472,"line_start":1706,"line_end":1706,"column_start":56,"column_end":64},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443629,"byte_end":443637,"line_start":1713,"line_end":1713,"column_start":55,"column_end":63},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3106}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":443947,"byte_end":443955,"line_start":1726,"line_end":1726,"column_start":60,"column_end":68},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":3134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444150,"byte_end":444158,"line_start":1735,"line_end":1735,"column_start":29,"column_end":37},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":4248},"to":{"krate":0,"index":1132}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444315,"byte_end":444323,"line_start":1743,"line_end":1743,"column_start":27,"column_end":35},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":4248},"to":{"krate":0,"index":1136}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444478,"byte_end":444486,"line_start":1751,"line_end":1751,"column_start":29,"column_end":37},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":4248},"to":{"krate":0,"index":1134}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":444670,"byte_end":444678,"line_start":1759,"line_end":1759,"column_start":54,"column_end":62},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":4248},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445135,"byte_end":445143,"line_start":1777,"line_end":1777,"column_start":29,"column_end":37},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445252,"byte_end":445260,"line_start":1783,"line_end":1783,"column_start":29,"column_end":37},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445372,"byte_end":445380,"line_start":1789,"line_end":1789,"column_start":32,"column_end":40},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2927}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445495,"byte_end":445503,"line_start":1795,"line_end":1795,"column_start":32,"column_end":40},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":4248},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":445997,"byte_end":446009,"line_start":1816,"line_end":1816,"column_start":6,"column_end":18},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":4728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\euclid-0.22.7\\src\\vector.rs","byte_start":448441,"byte_end":448453,"line_start":1893,"line_end":1893,"column_start":6,"column_end":18},"kind":{"Impl":{"id":578}},"from":{"krate":0,"index":4746},"to":{"krate":4294967295,"index":4294967295}}]}